//% types = {'Int'; 'Llong'; 'Long'; 'Doub'; 'Comp'};
//%----------------------------------------------------------
//% T = varargin{:};
//% VecT = ['Vec' T];
//% VbaseT = ['Vbase' T];
//% if is_Long(T)
#ifdef SLS_USE_INT_AS_LONG
typedef VecInt VecLong;
#else
typedef VecLlong VecLong;
#endif
//% else
class @VecT@ : public @VbaseT@
{
public:
    typedef @VbaseT@ Base;
    using Base::resize;
    using Base::operator[];

    explicit @VecT@(Long_I N);
    @VecT@(const @VecT@ &rhs); // copy constructor
    void operator<<(@VecT@ &rhs); // move data and rhs.resize(0)
};

inline @VecT@::@VecT@(Long_I N) : Base(N) {}

inline @VecT@::@VecT@(const @VecT@ &rhs) : Base(0)
{
    SLS_ERR("copy constructor forbidden!");
}

inline void @VecT@::operator<<(@VecT@ &rhs)
{
    Base::operator<<(rhs);
}

//% end
typedef const @VecT@ & @VecT@_I;
typedef @VecT@ & @VecT@_O, & @VecT@_IO;
