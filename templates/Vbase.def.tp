//% types = {'Llong'; 'Doub'; 'Comp'};
//%----------------------------------------------
//% T = varargin{:};
//% VbaseT = ['Vbase' T];
@VbaseT@::@VbaseT@(Long_I N) : m_p(new @T@[N]), m_N(N) {}

@VbaseT@::@VbaseT@(const @VbaseT@ &rhs)
{
#ifndef SLS_ALLOW_COPY_CONSTRUCTOR
    SLS_ERR("Copy constructor or move constructor is forbidden!");
#endif
    // m_N = rhs.m_N;
    // m_p = new @T@[rhs.m_N];
    // veccpy(m_p, rhs.ptr(), m_N);
}

@T@ * @VbaseT@::ptr()
{
#ifdef SLS_CHECK_BOUNDS
    if (m_N == 0)
        SLS_ERR("using ptr() for empty container!");
#endif
    return m_p;
}

const @T@ * @VbaseT@::ptr() const
{
#ifdef SLS_CHECK_BOUNDS
    if (m_N == 0)
        SLS_ERR("using ptr() for empty container!");
#endif
    return m_p;
}

Long @VbaseT@::size() const
{
    return m_N;
}

void @VbaseT@::resize(Long_I N)
{
    if (N != m_N) {
        if (m_N == 0) {
            m_N = N; m_p = new @T@[N];
        }
        else { // m_N != 0
            delete[] m_p;
            if (N == 0)
                m_N = 0;
            else {
                m_N = N;
                m_p = new @T@[N];
            }
        }
    }
}

void @VbaseT@::operator<<(@VbaseT@ &rhs)
{
    if (this == &rhs)
        SLS_ERR("self move is forbidden!");
    if (m_N != 0)
        delete[] m_p;
    m_N = rhs.m_N; rhs.m_N = 0;
    m_p = rhs.m_p;
}

@T@ & @VbaseT@::operator[](Long_I i)
{
#ifdef SLS_CHECK_BOUNDS
if (i<0 || i>=m_N)
    SLS_ERR("@VbaseT@ subscript out of bounds");
#endif
    return m_p[i];
}

const @T@ & @VbaseT@::operator[](Long_I i) const
{
#ifdef SLS_CHECK_BOUNDS
    if (i<0 || i>=m_N)
        SLS_ERR("@VbaseT@ subscript out of bounds");
#endif
    return m_p[i];
}

@T@ & @VbaseT@::operator()(Long_I i)
{ return (*this)[i]; }

const @T@ & @VbaseT@::operator()(Long_I i) const
{ return (*this)[i]; }

@T@ & @VbaseT@::end()
{
#ifdef SLS_CHECK_BOUNDS
    if (m_N == 0)
        SLS_ERR("tring to use end() on empty vector!");
#endif
    return m_p[m_N - 1];
}

const @T@ & @VbaseT@::end() const
{
#ifdef SLS_CHECK_BOUNDS
    if (m_N == 0)
        SLS_ERR("tring to use end() on empty vector!");
#endif
    return m_p[m_N - 1];
}

@T@ & @VbaseT@::end(Long_I i)
{
#ifdef SLS_CHECK_BOUNDS
    if (i <= 0 || i > m_N)
        SLS_ERR("index out of bound");
#endif
    return m_p[m_N - i];
}

const @T@ & @VbaseT@::end(Long_I i) const
{
#ifdef SLS_CHECK_BOUNDS
    if (i <= 0 || i > m_N)
        SLS_ERR("index out of bound");
#endif
    return m_p[m_N - i];
}

@VbaseT@::~@VbaseT@()
{
    if (m_N != 0)
        delete[] m_p;
}
