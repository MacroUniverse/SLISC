//% types = {'Llong'; 'Doub'; 'Comp'};
//%----------------------------------------------
//% T = varargin{:};
//% VbaseT = ['Vbase' T];
class @VbaseT@
{
protected:
    @T@ *m_p; // pointer to the first element
    Long m_N; // number of elements
public:
    typedef @T@ value_type;
    // constructors
    explicit @VbaseT@(Long_I N);
    @VbaseT@(const @VbaseT@ &rhs); // copy constructor

    // get properties
    @T@* ptr(); // get pointer
    const @T@* ptr() const;
    Long size() const;
    void resize(Long_I N);
    @T@ & operator[](Long_I i);
    const @T@ & operator[](Long_I i) const;
    @T@ & operator()(Long_I i);
    const @T@ & operator()(Long_I i) const;
    @T@& end();
    const @T@& end() const;
    @T@& end(Long_I i); // i = 1 for the last, i = 2 for the second last...
    const @T@& end(Long_I i) const;
    void operator<<(@VbaseT@ &rhs); // move data
    ~@VbaseT@();
};
