//% types = {
//%     'VecChar', 'VecChar';
//%     'VecInt', 'VecInt';
//%     'VecDoub', 'VecDoub';
//%     'VecComp', 'VecComp';
//%     'MatDoub', 'MatDoub';
//%     'MatComp', 'MatComp';
//%     'CmatDoub', 'CmatDoub';
//%     'CmatComp', 'CmatComp';
//%     'Cmat3Doub', 'Cmat3Doub';
//%     'Cmat3Comp', 'Cmat3Comp';
//%     };
//%-------------------
//% [T, T1] = varargin{:};
//% if is_dense(T) && is_dense(T1) && is_same_major(T, T1)
// v += v
inline void operator+=(@T@_O &v, @T1@_I v1)
{
#ifdef SLS_CHECK_SHAPE
    if (!shape_cmp(v, v1))
        SLS_ERR("wrong shape!");
#endif
    plus_equals_vv(v.ptr(), v1.ptr(), v1.size());
}

// v -= v
inline void operator-=(@T@_O &v, @T1@_I v1)
{
#ifdef SLS_CHECK_SHAPE
    if (!shape_cmp(v, v1))
        SLS_ERR("wrong shape!");
#endif
    minus_equals_vv(v.ptr(), v1.ptr(), v1.size());
}

// v *= v
inline void operator*=(@T@_O &v, @T1@_I v1)
{
#ifdef SLS_CHECK_SHAPE
    if (!shape_cmp(v, v1))
        SLS_ERR("wrong shape!");
#endif
    times_equals_vv(v.ptr(), v1.ptr(), v1.size());
}

// v /= v
inline void operator/=(@T@_O &v, @T1@_I v1)
{
#ifdef SLS_CHECK_SHAPE
    if (!shape_cmp(v, v1))
        SLS_ERR("wrong shape!");
#endif
    divide_equals_vv(v.ptr(), v1.ptr(), v1.size());
}
//% elseif ndim(T) == 1 && ndim(T1) == 1
// v += v
inline void operator+=(@T@_O &v, @T1@_I v1)
{
#ifdef SLS_CHECK_SHAPE
    if (!shape_cmp(v, v1))
        SLS_ERR("wrong shape!");
#endif
    for (Long i = 0; i < v.size(); ++i)
		v[i] += v1[i];
}

// v -= v
inline void operator-=(@T@_O &v, @T1@_I v1)
{
#ifdef SLS_CHECK_SHAPE
    if (!shape_cmp(v, v1))
        SLS_ERR("wrong shape!");
#endif
	for (Long i = 0; i < v.size(); ++i)
		v[i] -= v1[i];
}

// v *= v
inline void operator*=(@T@_O &v, @T1@_I v1)
{
#ifdef SLS_CHECK_SHAPE
    if (!shape_cmp(v, v1))
        SLS_ERR("wrong shape!");
#endif
    for (Long i = 0; i < v.size(); ++i)
		v[i] *= v1[i];
}

// v /= v
inline void operator/=(@T@_O &v, @T1@_I v1)
{
#ifdef SLS_CHECK_SHAPE
    if (!shape_cmp(v, v1))
        SLS_ERR("wrong shape!");
#endif
    for (Long i = 0; i < v.size(); ++i)
		v[i] /= v1[i];
}
//% end
