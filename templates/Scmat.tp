//% types = {
//%     'Int', true;
//%     'Int', false;
//%     'Llong', true;
//%     'Llong', false;
//%     'Long', true;
//%     'Long', false;
//%     'Doub', true;
//%     'Doub', false;
//%     'Comp', true;
//%     'Comp', false;
//% };
//%------------------------
//% [T, constness] = varargin{:};
//% SvecT = ['Svec' T];
//% SvecT_c = [SvecT '_c'];
//% ScmatT = ['Scmat' T];
//% ScmatT_c = [ScmatT '_c'];
//% if constness
//%     CT = ['const ' T];
//%     Base = SvecT_c;
//%     Class = ScmatT_c;
//% else
//%     CT = T;
//% 	Base = SvecT;
//% 	Class = ScmatT;
//% end
//% if is_Long(T) && constness
#ifdef SLS_USE_INT_AS_LONG
typedef ScmatInt_c ScmatLong_c;
#else
typedef ScmatLlong_c ScmatLong_c;
#endif
//% elseif is_Long(T) && ~constness
#ifdef SLS_USE_INT_AS_LONG
typedef ScmatInt ScmatLong;
#else
typedef ScmatLlong ScmatLong;
#endif
//% else
class @Class@ : public @Base@
{
public:
    Long m_N1, m_N2;
    @Class@();
    @Class@(Long_I N1, Long_I N2);
    @Class@(@CT@ *ptr, Long_I N1, Long_I N2);

    // === Cmat functions ===
    @CT@& operator()(Long_I i, Long_I j) const; // double indexing
    Long n1() const;
    Long n2() const;

    // resize() is a bad idea, don't try to create it!

    // There is no upper bound checking of N, use with care
    void set_size(Long_I N1, Long_I N2);
    void set(@CT@ *ptr, Long_I N1, Long_I N2);
    ~@Class@();
};

inline @Class@::@Class@() {}

inline @Class@::@Class@(Long_I N1, Long_I N2)
    : @Base@(N1*N2), m_N1(N1), m_N2(N2) {}

inline @Class@::@Class@(@CT@ *ptr, Long_I N1, Long_I N2)
    : @Class@(N1, N2)
{
    m_p = ptr;
}

inline @CT@ & @Class@::operator()(Long_I i, Long_I j) const
{
#ifdef SLS_CHECK_BOUNDS
    if (i < 0 || i >= m_N1 || j < 0 || j >= m_N2)
        SLS_ERR("Matrix subscript out of bounds");
#endif
    return m_p[i + m_N1 * j];
}

inline Long @Class@::n1() const
{
    return m_N1;
}

inline Long @Class@::n2() const
{
    return m_N2;
}

inline void @Class@::set_size(Long_I N1, Long_I N2)
{
#ifdef SLS_CHECK_SHAPE
    if (N1 <= 0 || N2 <= 0) SLS_ERR("illegal N1 or N2!");
#endif
    m_N1 = N1; m_N2 = N2; m_N = N1 * N2;
}

inline void @Class@::set(@CT@ * ptr, Long_I N1, Long_I N2)
{
    m_p = ptr;
    m_N1 = N1; m_N2 = N2; m_N = N1 * N2;
}

inline @Class@::~@Class@() {}
//% end

//% if constness
typedef const @Class@ & @ScmatT@_I;
//% else
typedef const @Class@ & @ScmatT@_O, & @ScmatT@_IO;
//% end
