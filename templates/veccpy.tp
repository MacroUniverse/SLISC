//% types = {
//%     'Char', 'Char';
//%     'Int', 'Int';
//%     'Llong', 'Llong';
//%     'Doub', 'Llong';
//%     'Float', 'Float';
//%     'Doub', 'Float';
//%     'Doub', 'Doub';
//%     'Comp', 'Doub';
//%     'Comp', 'Llong';
//%     'Comp', 'Comp';
//%     };
//%----------------------------
//% [T, T1] = varargin{:};
//% if ~is_promo(T, T1)
//%     error('illegal types!');
//% end
inline void veccpy(@T@ *v, const @T1@ *v1, Long_I n)
{
    for (Long i = 0; i < n; ++i)
        v[i] = v1[i];
}

inline void veccpy(@T@ *v, const @T1@ *v1, Long_I step1, Long_I n)
{
    for (@T@ *p = v; p < v + n; ++p) {
        *p = *v1;
        v1 += step1;
    }
}

inline void veccpy(@T@ *v, Long_I step, const @T1@ *v1, Long_I n)
{
    for (@T@ *p = v; p < v + n*step; p += step) {
        *p = *v1;
        ++v1;
    }
}

inline void veccpy(@T@ *v, Long_I step, const @T1@ *v1, Long_I step1, Long_I n)
{
    @T@ *end = v + n * step;
    for (; v < end; v += step) {
        *v = *v1;
        v1 += step1;
    }
}
