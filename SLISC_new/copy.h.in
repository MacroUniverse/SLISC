// copy data from one container to another
// includes container shape checking
// all `container = container` should be implemented using copy
#pragma once
#include "compare.h"
#include "cut.h"

namespace slisc {
//  === pointer interface ===

//% tem('vecset', {
//%     'Char'; 'Int'; 'Llong';
//%     'Float'; 'Doub'; 'Ldoub'; 'Qdoub';
//%     'Fcomp'; 'Comp'; 'Lcomp'; 'Qcomp';
//% });
//%-----------------------
//% T = varargin{:};
//% if is_Qdoub(T) || is_Qcomp(T)
#ifdef SLS_USE_QUAD_MATH
//% end
inline void vecset(@T@ *v, @T@_I val, Long_I n)
{
    for (@T@ *p = v; p < v + n; ++p)
        *p = val;
}

inline void vecset(@T@ *v, @T@_I val, Long_I n, Long_I step)
{
    for (@T@ *p = v; p < v + n*step; p += step)
        *p = val;
}
//% if is_Qdoub(T) || is_Qcomp(T)
#endif
//% end
//%------------------------

//% tem('veccpy', {
//%     'Char', 'Char';
//%     'Int', 'Char';
//%     'Int', 'Int';
//%     'Llong', 'Char';
//%     'Llong', 'Int';
//%     'Llong', 'Llong';
//%     'Float', 'Float';
//%     'Doub', 'Int';
//%     'Doub', 'Llong';
//%     'Doub', 'Float';
//%     'Doub', 'Doub';
//%     'Ldoub', 'Float';
//%     'Ldoub', 'Doub';
//%     'Ldoub', 'Ldoub';
//%     'Qdoub', 'Qdoub';
//%     'Fcomp', 'Int';
//%     'Fcomp', 'Llong';
//%     'Fcomp', 'Float';
//%     'Fcomp', 'Fcomp';
//%     'Comp', 'Int';
//%     'Comp', 'Llong';
//%     'Comp', 'Doub';
//%     'Comp', 'Comp';
//%     'Lcomp', 'Int';
//%     'Lcomp', 'Llong';
//%     'Lcomp', 'Doub';
//%     'Lcomp', 'Comp';
//%     'Lcomp', 'Lcomp';
//%     'Qcomp', 'Qcomp';
//%     });
//%----------------------------
//% [T, T1] = varargin{:};
//% if ~is_promo(T, T1)
//%     error('illegal types!');
//% end
inline void veccpy(@T@ *v, const @T1@ *v1, Long_I n)
{
    for (Long i = 0; i < n; ++i)
        v[i] = v1[i];
}

inline void veccpy(@T@ *v, const @T1@ *v1, Long_I step1, Long_I n)
{
    for (@T@ *p = v; p < v + n; ++p) {
        *p = *v1;
        v1 += step1;
    }
}

inline void veccpy(@T@ *v, Long_I step, const @T1@ *v1, Long_I n)
{
    for (@T@ *p = v; p < v + n*step; p += step) {
        *p = *v1;
        ++v1;
    }
}

inline void veccpy(@T@ *v, Long_I step, const @T1@ *v1, Long_I step1, Long_I n)
{
    @T@ *end = v + n * step;
    for (; v < end; v += step) {
        *v = *v1;
        v1 += step1;
    }
}
//%------------------------

//% tem('matcpy', {
//%     'Char', 'Char';
//%     'Int', 'Int';
//%     'Llong', 'Llong';
//%     'Float', 'Float';
//%     'Doub', 'Doub';
//%     'Ldoub', 'Ldoub';
//%     'Fcomp', 'Fcomp';
//%     'Comp', 'Comp';
//%     'Lcomp', 'Lcomp';
//%     });
//%--------------------------
//% [T, T1] = varargin{:};
//% if ~is_promo(T, T1);
//%     error('illegal types!');
//% end
inline void matcpy(@T@ *v, Long_I lda, const @T1@ *v1, Long_I lda1, Long_I Nld, Long_I Nsd)
{
    for (Long j = 0; j < Nsd; ++j) {
        veccpy(v, v1, Nld);
        v += lda; v1 += lda1;
    }
}
//%------------------------

//% tem('matcpy_diff_major', {
//%     'Llong', 'Llong';
//%     'Doub', 'Doub';
//%     'Comp', 'Comp';
//%     });
//%----------------------------
//% [T, T1] = varargin{:};
//% if ~is_promo(T, T1);
//%     error('illegal types!');
//% end
inline void matcpy_diff_major(@T@ *a2, const @T1@ *a1, Long_I N2, Long_I N1)
{
    for (Long i2 = 0; i2 < N2; ++i2) {
        Long start = N1 * i2, k2 = i2;
        for (Long k1 = start; k1 < start + N1; ++k1) {
            a2[k2] = a1[k1];
            k2 += N2;
        }
    }
}

inline void matcpy_diff_major(@T@ *a2, const @T1@ *a1, Long_I N2, Long_I lda2, Long_I N1, Long_I lda1)
{
    for (Long i2 = 0; i2 < N2; ++i2) {
        Long start = lda1 * i2, k2 = i2;
        for (Long k1 = start; k1 < start + N1; ++k1) {
            a2[k2] = a1[k1];
            k2 += lda2;
        }
    }
}
//%------------------------

// copy dense matrix with different majors
// lda1 is leading dimension of a1, lda2 is leading dimension of a2
// if a1 is row major and a2 is column major, N1 is number of columns, N2 is number of rows
// if a1 is column major and a2 is row major, N1 is number of rows, N2 is number of columns
// #include "matcpy_diff_major.inl"

// === container interface ===
// must use pointer version

// scalar to container
//% tem('copy', {
//%     'VecBool'; 'VecChar'; 'VecInt'; 'VecLlong'; 
//%     'VecFloat'; 'VecDoub'; 'VecLdoub'; 'VecQdoub';
//%     'VecFcomp'; 'VecComp'; 'VecLcomp'; 'VecQcomp';
//%     'SvecChar'; 'SvecInt'; 'SvecLlong';
//%     'SvecFloat'; 'SvecDoub'; 'SvecLdoub';
//%     'SvecFcomp'; 'SvecComp'; 'SvecLcomp';
//%     'MatChar'; 'MatInt'; 'MatLlong';
//%     'MatFloat'; 'MatDoub'; 'MatLdoub';
//%     'DvecFloat'; 'DvecDoub'; 'DvecLdoub';
//%     'DvecFcomp'; 'DvecComp'; 'DvecLcomp';
//%     'MatComp'; 'Mat3Doub';
//%     'CmatChar'; 'CmatInt'; 'CmatLlong';
//%     'CmatFloat'; 'CmatDoub'; 'CmatLdoub';
//%     'CmatFcomp'; 'CmatComp'; 'CmatLcomp';
//%     'ScmatChar'; 'ScmatInt'; 'ScmatLlong';
//%     'ScmatFloat'; 'ScmatDoub'; 'ScmatLdoub';
//%     'ScmatFcomp'; 'ScmatComp'; 'ScmatLcomp';
//%     'Cmat3Char'; 'Cmat3Int'; 'Cmat3Llong';
//%     'Cmat3Float'; 'Cmat3Doub'; 'Cmat3Ldoub';
//%     'Cmat3Fcomp'; 'Cmat3Comp'; 'Cmat3Lcomp';
//%     'Scmat3Char'; 'Scmat3Int'; 'Scmat3Llong';
//%     'Scmat3Float'; 'Scmat3Doub'; 'Scmat3Ldoub';
//%     'Scmat3Fcomp'; 'Scmat3Comp'; 'Scmat3Lcomp';
//%     'Cmat4Doub';
//%     'DcmatDoub'; 'DcmatComp';
//%     'Jcmat3Float'; 'Jcmat3Doub'; 'Jcmat3Ldoub';
//%     'Jcmat3Fcomp'; 'Jcmat3Comp'; 'Jcmat3Lcomp';
//% });
//%-------------------------------------
//% T = varargin{:}; Ts = value_type(T);
//% if is_Qdoub(Ts) || is_Qcomp(Ts)
#ifdef SLS_USE_QUAD_MATH
//% end
inline void copy(@T@_O v, @Ts@_I s)
{
//% if is_VecBool(T)
    Long N = v.size();
    for (Long i = 0; i < N; ++i)
        v[i] = s;
//% elseif is_dense(T)
    vecset(v.p(), s, v.size());
//% elseif is_Dvec(T)
    vecset(v.p(), s, v.size(), v.step());
//% elseif is_Dcmat(T)
    Long N1 = v.n0(), N2 = v.n1();
    for (Long j = 0; j < N2; ++j)
        vecset(&v(0, j), s, N1);
//% elseif is_Dmat(T)
    Long N1 = v.n0(), N2 = v.n1();
    for (Long i = 0; i < N1; ++i)
        vecset(&v(i, 0), s, N2);
//% elseif ndim(T) == 3
    // slow
    if (v.size() != 0)
    for (Long k = 0; k < v.n2(); ++k)
        for (Long j = 0; j < v.n1(); ++j)
            for (Long i = 0; i < v.n0(); ++i)
                v(i, j, k) = s;
//% else
//%     error('not implemented!');
//% end
}
//% if is_Qdoub(Ts) || is_Qcomp(Ts)
#endif
//% end
//%------------------------

// assign value to containers
//% tem('assign', {'vecBool'; 'vecChar'; 'vecInt'; 'vecLlong'; 'vecDoub';
//%     'Str'; 'vecStr';
//%     'VecChar'; 'VecInt'; 'VecLlong';
//%     'VecFloat'; 'VecDoub'; 'VecLdoub'; 'VecQdoub';
//%     'VecFcomp'; 'VecComp'; 'VecLcomp'; 'VecQcomp';
//%     'VecFimag'; 'VecImag'; 'VecLimag';
//%     'SvecChar'; 'SvecInt'; 'SvecLlong';
//%     'SvecFloat'; 'SvecDoub'; 'SvecLdoub'; 'SvecQdoub';
//%     'SvecFcomp'; 'SvecComp'; 'SvecLcomp'; 'SvecQcomp';
//%     'SvecFimag'; 'SvecImag'; 'SvecLimag';
//%     'DvecChar'; 'DvecInt'; 'DvecLlong';
//%     'DvecFloat'; 'DvecDoub'; 'DvecLdoub'; 'DvecQdoub';
//%     'DvecFcomp'; 'DvecComp'; 'DvecLcomp'; 'DvecQcomp';
//%     'CmatChar'; 'CmatInt'; 'CmatLlong';
//%     'CmatFloat'; 'CmatDoub'; 'CmatLdoub'; 'CmatQdoub';
//%     'CmatFcomp'; 'CmatComp'; 'CmatLcomp'; 'CmatQcomp';
//%     'CmatFimag'; 'CmatImag'; 'CmatLimag';
//%     'ScmatChar'; 'ScmatInt'; 'ScmatLlong';
//%     'ScmatFloat'; 'ScmatDoub'; 'ScmatLdoub'; 'ScmatQdoub';
//%     'ScmatFcomp'; 'ScmatComp'; 'ScmatLcomp'; 'ScmatQcomp';
//%     'ScmatFimag'; 'ScmatImag'; 'ScmatLimag';
//%     'DcmatChar'; 'DcmatInt'; 'DcmatLlong';
//%     'DcmatFloat'; 'DcmatDoub'; 'DcmatLdoub'; 'DcmatQdoub';
//%     'DcmatFcomp'; 'DcmatComp'; 'DcmatLcomp'; 'DcmatQcomp';
//%     'Cmat3Char'; 'Cmat3Int'; 'Cmat3Llong';
//%     'Cmat3Float'; 'Cmat3Doub'; 'Cmat3Ldoub'; 'Cmat3Qdoub';
//%     'Cmat3Fcomp'; 'Cmat3Comp'; 'Cmat3Lcomp'; 'Cmat3Qcomp';
//%     'Cmat3Fimag'; 'Cmat3Imag'; 'Cmat3Limag';});
//%--------------------------
//% T = varargin{:}; Ts = value_type(T);
//% if is_Bool(Ts) || is_Char(Ts)
//%     Ts = 'Int'; % ... will promote these types, might give warning
//% elseif is_Float(Ts)
//%     Ts = 'Doub'; % ... will promote these types, might give warning
//% end
//% if is_Qdoub(Ts) || is_Qcomp(Ts)
#ifdef SLS_USE_QUAD_MATH
//% end
inline void assign(@T@_O v, ...)
{
    va_list args;
    va_start(args, v);
    Long N = v.size();
    for (Long i = 0; i < N; ++i)
        v[i] = va_arg(args, @Ts@);
    va_end(args);
}

inline void assign2(@T@_IO v, Long_I ind, Long_I N, ...)
{
    va_list args;
    va_start(args, N);
    for (Long i = ind; i < ind+N; ++i)
        v[i] = va_arg(args, @Ts@);
    va_end(args);
}
//% if is_Qdoub(Ts) || is_Qcomp(Ts)
#endif
//% end
//%-------------------------

// container to container
//% tem('copy_vv', {
//%     'VecBool', 'VecBool';
//%     'VecChar', 'VecChar';
//%     'VecInt', 'VecInt';
//%     'VecInt', 'SvecInt';
//%     'VecInt', 'DvecInt';
//%     'VecLlong', 'VecLlong';
//%     'VecDoub', 'VecDoub';
//%     'VecQdoub', 'VecQdoub';
//%     'VecDoub', 'SvecDoub';
//%     'VecComp', 'VecComp';
//%     'SvecDoub', 'SvecDoub';
//%     'SvecDoub', 'VecDoub';
//%     'SvecDoub', 'DvecDoub';
//%     'SvecComp', 'SvecDoub';
//%     'SvecComp', 'SvecComp';
//%     'SvecComp', 'DvecComp';
//%     'VecComp', 'DvecComp';
//%     'DvecInt', 'DvecInt';
//%     'DvecLlong', 'DvecLlong';
//%     'DvecDoub', 'DvecDoub';
//%     'DvecComp', 'VecComp';
//%     'DvecComp', 'SvecComp';
//%     'MatLlong', 'MatLlong';
//%     'MatDoub', 'MatDoub';
//%     'MatDoub', 'CmatDoub';
//%     'MatComp', 'MatComp';
//%     'Mat3Doub', 'Mat3Doub';
//%     'Mat3Comp', 'Mat3Comp';
//%     'Mat3Comp', 'Mat3Doub';
//%     'CmatLlong', 'CmatLlong';
//%     'CmatLlong', 'ScmatLlong';
//%     'ScmatLlong', 'CmatLlong';
//%     'CmatDoub', 'CmatDoub';
//%     'CmatDoub', 'ScmatDoub';
//%     'CmatDoub', 'DcmatDoub';
//%     'CmatComp', 'CmatComp';
//%     'CmatComp', 'ScmatComp';
//%     'CmatComp', 'DcmatComp';
//%     'CmatDoub', 'MatDoub';
//%     'Cmat3Int', 'Cmat3Int';
//%     'Cmat3Doub', 'Cmat3Doub';
//%     'Cmat3Comp', 'Cmat3Doub';
//%     'Cmat3Comp', 'Cmat3Comp';
//%     'ScmatInt', 'ScmatInt';
//%     'ScmatLlong', 'ScmatLlong';
//%     'ScmatDoub', 'CmatDoub';
//%     'ScmatDoub', 'ScmatDoub';
//%     'ScmatComp', 'CmatComp';
//%     'ScmatComp', 'ScmatComp';
//%     'DcmatChar', 'DcmatChar';
//%     'DcmatInt', 'CmatInt';
//%     'DcmatInt', 'DcmatInt';
//%     'DcmatLlong', 'DcmatLlong';
//%     'DcmatFloat', 'DcmatFloat';
//%     'DcmatDoub', 'CmatDoub';
//%     'DcmatDoub', 'DcmatDoub';
//%     'DcmatLdoub', 'DcmatLdoub';
//%     'DcmatComp', 'CmatComp';
//%     'DcmatComp', 'DcmatComp';
//%     'Jcmat3Float', 'Jcmat3Float';
//%     'Jcmat3Doub', 'Jcmat3Doub';
//%     'Jcmat3Ldoub', 'Jcmat3Ldoub';
//%     'Jcmat3Fcomp', 'Jcmat3Fcomp';
//%     'Jcmat3Comp', 'Jcmat3Comp';
//%     'Jcmat3Lcomp', 'Jcmat3Lcomp';
//% });
//%---------------------------
//% [T, T1] = varargin{:};
//% if ~is_promo(value_type(T), value_type(T1))
//%     error('illegal types');
//% end
//% Ts = value_type(T);
//% if is_Qdoub(Ts) || is_Qcomp(Ts)
#ifdef SLS_USE_QUAD_MATH
//% end
inline void copy(@T@_O v, @T1@_I v1)
{
    assert_same_shape@ndim(T)@@ndim(T1)@(v, v1);
    if (v.size() == 0)
        return;
//% if is_VecBool(T) || is_VecBool(T1)
    Long N = v.size();
    for (Long i = 0; i < N; ++i)
        v[i] = v1[i];
//% elseif is_dense(T) && is_dense(T1) && is_same_major(T, T1)
    veccpy(v.p(), v1.p(), v.size());
//% elseif is_Dvec(T) && is_Dvec(T1)
    veccpy(v.p(), v.step(), v1.p(), v1.step(), v.size());
//% elseif is_dense_vec(T) && is_Dvec(T1)
    veccpy(v.p(), v1.p(), v1.step(), v1.size());
//% elseif is_Dvec(T) && is_dense_vec(T1)
    veccpy(v.p(), v.step(), v1.p(), v1.size());
//% elseif is_dense_mat(T) && is_dense_mat(T1) && is_diff_major(T, T1)
//%     if is_cmajor(T)
    matcpy_diff_major(v.p(), v1.p(), v.n0(), v.n1());
//%     else
    matcpy_diff_major(v.p(), v1.p(), v.n1(), v.n0());
//%     end
//% elseif is_Dcmat(T) && is_Dcmat(T1)
    matcpy(v.p(), v.lda(), v1.p(), v1.lda(), v.n0(), v.n1());
//% elseif is_Dmat(T) && is_Dmat(T1)
    matcpy(v.p(), v.lda(), v1.p(), v1.lda(), v.n1(), v.n0());
//% elseif is_Cmat(T) && is_Dcmat(T1)
    matcpy(v.p(), v.n0(), v1.p(), v1.lda(), v.n0(), v.n1());
//% elseif is_Dcmat(T) && is_Cmat(T1)
    matcpy(v.p(), v.lda(), v1.p(), v.n0(), v.n0(), v.n1());
//% elseif ndim(T) == 3 && ndim(T1) == 3
    // slow
    if (v1.size() != 0)
    for (Long k = 0; k < v.n2(); ++k)
        for (Long j = 0; j < v.n1(); ++j)
            for (Long i = 0; i < v.n0(); ++i)
                v(i, j, k) = v1(i, j, k);
//% else
//%     disp(['T = ', T]);
//%     disp(['T1 = ', T1]);
//%     error('not implemented!!');
//% end
}
//% if is_Qdoub(Ts) || is_Qcomp(Ts)
#endif
//% end
//%------------------------

// for sparse containers
//% tem('copy_mcoo', {
//%     'Doub', 'Doub';
//%     'Comp', 'Comp';
//%     'Comp', 'Doub';
//% });
//%----------------------------
//% [T, T1] = varargin{:};
//% McooT = ['Mcoo', T]; McooT1 = ['Mcoo', T1];
inline void copy(@McooT@_O v, @McooT1@_I v1)
{
#ifdef SLS_CHECK_SHAPES
    if (!shape_cmp22(v, v1))
        SLS_ERR("wrong shape!");
    if (v.capacity() < v1.nnz())
        SLS_ERR("not enough capacity!");
#endif
    if (v1.nnz() == 0)
        return;
//% if is_same(T, T1)
    if (v.p() == v1.p())
        SLS_ERR("self assignment is forbidden!");
//% end
    Long Nnz = v1.nnz();
    v.resize(Nnz);
    veccpy(v.p(), v1.p(), Nnz);
    veccpy(v.row_p(), v1.row_p(), Nnz);
    veccpy(v.col_p(), v1.col_p(), Nnz);
}
//%------------------------

// copy dense matrix to Mcoo matrix
// abs(s) < tol is considered 0

//% tem('copy_mcoo2', {
//%     'McooDoub', 'CmatDoub';
//%     'McooDoub', 'ScmatDoub';
//%     'McooComp', 'CmatComp';
//%     'McooComp', 'ScmatComp';
//% });
//%----------------------------
//% [Tcoo, Tcmat] = varargin{:};
//% Ts1 = value_type(Tcmat);
inline void copy(@Tcoo@_O v, @Tcmat@_I v1, Doub_I tol = 0)
{
    assert_same_shape@ndim(Tcoo)@@ndim(Tcmat)@(v, v1);
    for (Long j = 0; j < v1.n1(); ++j) {
        for (Long i = 0; i < v1.n0(); ++i) {
            @Ts1@ val = v1(i, j);
            if (abs(val) > tol)
                v.push(val, i, j);
        }
    }
}
//%------------------------

//% tem('copy_vs', {
//%     'CmatDoub', 'Doub';
//%     'ScmatDoub', 'Doub';
//%     'CmatComp', 'Comp';
//% });
//%----------------------------
//% [Tmat, Ts] = varargin{:};
//% if ~((is_dense_mat(Tmat) || is_Dmat(Tmat) || is_Jmat(Tmat)) && is_scalar(Ts))
//%     error('illegal types');
//% end
//% McooTs = ['Mcoo', Ts]; McoohTs = ['Mcooh', Ts];
inline void copy(@Tmat@_O lhs, @McooTs@_I rhs)
{
    assert_same_shape@ndim(Tmat)@@ndim(McooTs)@(lhs, rhs);
    copy(lhs, 0);
    for (Long i = 0; i < rhs.nnz(); ++i) {
        lhs(rhs.row(i), rhs.col(i)) = rhs[i];
    }
}
//%-------------------

//% tem('copy_Cmobd', {
//%     'CmobdInt', 'CmobdInt';
//%     'CmobdDoub', 'CmobdDoub';
//%     'CmobdComp', 'CmobdDoub';
//% });
//%-----------------------
//% [T, T1] = varargin{:};
inline void copy(@T@_O lhs, @T1@_I rhs)
{
    copy(lhs.cmat3(), rhs.cmat3());
}
//%-------------------

//% tem('copy_cmob_mcoo', {
//%     'CmobdInt', 'McooInt';
//%     'CmobdDoub', 'McooDoub';
//%     'CmobdComp', 'McooDoub';
//% });
//%-----------------------
//% [T, T1] = varargin{:};
//% Cmat3T = ['Cmat3' value_type(T)];
inline void copy(@T@_O lhs, @T1@_I rhs)
{
    assert_same_shape@ndim(T)@@ndim(T1)@(lhs, rhs);
    @Cmat3T@ &c3 = lhs.cmat3();
    copy(c3, 0);
    for (Long k = 0; k < rhs.nnz(); ++k) {
        Long i = rhs.row(k), j = rhs.col(k);
        lhs.ref(i, j) = rhs[k];
    }
}
//%--------------------

// not optimized
//% tem('copy_cmat_obd', {
//%     'CmatDoub', 'CmobdDoub';
//% });
//%-----------------------
//% [T, T1] = varargin{:};
inline void copy(@T@_O lhs, @T1@_I rhs)
{
    assert_same_shape@ndim(T)@@ndim(T1)@(lhs, rhs);
    for (Long j = 0; j < lhs.n1(); ++j)
        for (Long i = 0; i < lhs.n0(); ++i)
            lhs(i, j) = rhs(i, j);
}
//%--------------------

// inline void cooh2dense(@Tmat@_O lhs, @McoohTs@_I rhs)
// {
// #ifdef SLS_CHECK_SHAPES
//     if (!shape_cmp22(lhs, rhs))
//         SLS_ERR("wrong shape!");
// #endif
//     copy(lhs, 0);
//     for (Long i = 0; i < rhs.nnz(); ++i) {
//         Long r = rhs.row(i), c = rhs.col(i);
//         if (r == c)
//             lhs(r, r) = rhs(i);
//         else {
//             lhs(r, c) = rhs(i);
//             lhs(c, r) = conj(rhs(i));
//         }
//     }
// }

// from MatCoo and MatCooH to dense matrix
// #include "matrix_coo2dense.inl"

// template <class T, class T1, SLS_IF(is_promo<T, T1>())>
// void copy(MatCoo<T> &v, const CmatObd<T1> &v1)
// {
// #ifdef SLS_CHECK_SHAPES
//     if (!shape_cmp22(v, v1))
//         SLS_ERR("wrong shape!");
//     if (v.capacity() < v1.nnz())
//         SLS_ERR("not enough capacity!");
// #endif
//     if (v1.nnz() == 0)
//         return;
//     Long N0 = v1.n0(), N1 = N0 - 1;
//     Long N = v1.n0();
//     Long k = 0;
//     for (Long blk = 0; blk < v1.nblk(); ++blk) {
//         for (Long j = 0; j < N0; ++j) {
//             for (Long i = 0; i < N0; ++i) {
//                 Long shift = blk * N1 - 1;
//                 Long ii = shift + i, jj = shift + j;
//                 if (!((i == N1 && j == N1) || ii < 0 || jj < 0 || ii == N || jj == N))
//                     v.push(v1(k), ii, jj);
//                 ++k;
//             }
//         }
//     }
// }

//% tem('copy_band', {
//%     'CbandDoub'; 'CbandComp';
//% });
//%------------------------------
//% T = varargin{:}; Ts = value_type(T);
//% DcmatTs = ['Dcmat' Ts];
@DcmatTs@ band(@T@_IO);
@DcmatTs@_c band(@T@_I);

inline void copy(@T@_O a, @Ts@_I s)
{
    copy(band(a), s);
}
//%------------------------------

//% tem('copy_cband', {
//%     'CbandDoub' 'CbandDoub';
//%     'CbandComp' 'CbandComp';
//% });
//%------------------------------
//% [T, T1] = varargin{:};
inline void copy(@T@_O a, @T@_I b)
{
#ifdef SLS_CHECK_SHAPES
    if (a.idiag() < b.nup() || a.lda() - a.idiag() - 1 < b.nlow())
        SLS_ERR("wrong shape!");
#endif
    a.reshape(b.n0(), b.nup(), b.nlow());
    copy(band(a), band(b));
}
//%------------------------------

//% tem('copy_cmat', {
//%     'CbandDoub', 'CmatDoub';
//%     'CmatDoub', 'CbandDoub';
//%     'CbandDoub', 'ScmatDoub';
//%     'ScmatDoub', 'CbandDoub';
//%     'CbandComp', 'CmatComp';
//%     'CmatComp', 'CbandComp';
//%     'CbandComp', 'ScmatComp';
//%     'ScmatComp', 'CbandComp';
//%     'CbandComp', 'ScmatDoub';
//%     'ScmatComp', 'CbandDoub';
//% });
//%------------------------------
//% [T1, T2] = varargin{:};
//% Ts1 = value_type(T1); Ts2 = value_type(T2);
//% SvecTs1 = ['Svec' Ts1]; SvecTs2 = ['Svec' Ts2];
//% if is_Cband(T1)
inline void copy(@T1@_O b, @T2@_I a)
{
    assert_same_shape@ndim(T1)@@ndim(T2)@(a, b);
    Long N1 = a.n0(), N2 = a.n1();
    for (Long j = 0; j < N2; ++j) {
        @SvecTs1@ cut_b = cut0(b.cmat(), j);
        @SvecTs2@_c cut_a = cut0(a, j);
        Long k = b.idiag() - j;
        Long i_beg = max(Long(0), j - b.nup()), i_end = min(N1, j + b.nlow() + 1);
        for (Long i = i_beg; i < i_end; ++i)
            cut_b[k + i] = cut_a[i];
    }
}
//% else
inline void copy(@T1@_O a, @T2@_I b)
{
    assert_same_shape@ndim(T1)@@ndim(T2)@(a, b);
    Long N1 = a.n0(), N2 = a.n1();
    for (Long j = 0; j < N2; ++j) {
        Long k = b.idiag() - j;
        Long i_beg = max(Long(0), j - b.nup()), i_end = min(N1, j + b.nlow() + 1);
        @SvecTs1@ cut_a = cut0(a, j);
        @SvecTs2@_c cut_b = cut0(b.cmat(), j);
        for (Long i = 0; i < i_beg; ++i)
            cut_a[i] = 0;
        for (Long i = i_beg; i < i_end; i++)
            cut_a[i] = cut_b[k + i];
        for (Long i = i_end; i < N1; ++i)
            cut_a[i] = 0;
    }
}
//% end
//%------------------------------

// void copy(Matrix<T> &b, const Matrix<T> &a, Long_I Nup, Long_I Nlow)
// {
//     Long N1 = a.n0(), N2 = a.n1();
//     for (Long i = 0; i < N1; i++) {
//         Long k = Nlow - i;
//         for (Long j = max(Long(0), i - Nlow); j < MIN(N2, i + Nup + 1); j++) {
//             b(i, k + j) = a(i, j);
//         }
//     }
// }

// template <class T, SLS_IF0(is_scalar<T>())>
// void copy(Matrix<T> &a, const Matrix<T> &b, Long_I Nup, Long_I Nlow)
// {
//     Long N1 = a.n0(), N2 = a.n1();
//     for (Long i = 0; i < N1; i++) {
//         Long k = Nlow - i;
//         for (Long j = max(Long(0), i - Nlow); j < MIN(N2, i + Nup + 1); j++) {
//             a(i, j) = b(i, k + j);
//         }
//     }
// }

// copy initializer list to containers

//% tem('copy_ms', {
//%     'VecInt', 'Int';
//%     'VecLlong', 'Llong';
//%     'VecDoub', 'Doub';
//%     'VecComp', 'Comp';
//%     'SvecInt', 'Int';
//%     'SvecLlong', 'Llong';
//%     'SvecDoub', 'Doub';
//%     'SvecComp', 'Comp';
//%     'CmatInt', 'Int';
//%     'CmatLlong', 'Llong';
//%     'CmatDoub', 'Doub';
//%     'CmatComp', 'Comp';
//%     'ScmatInt', 'Int';
//%     'ScmatLlong', 'Llong';
//%     'ScmatDoub', 'Doub';
//%     'ScmatComp', 'Comp';
//% });
//%------------------------------
//% [T, Ts1] = varargin{:};
//% Ts = value_type(T);
inline void copy(@T@_O v, const std::initializer_list<@Ts1@> &v1)
{
    const @Ts1@ *p1 = v1.begin();
    Long N = v1.size();
#ifdef SLS_CHECK_SHAPES
    if (v.size() != N)
        SLS_ERR("wrong shape!");
#endif
    for (Long i = 0; i < N; ++i)
        v[i] = p1[i];
}
//%------------------------------

} // namespace slisc
