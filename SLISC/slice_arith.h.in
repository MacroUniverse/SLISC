#pragma once
#include "Vec.h"
#include "Mat.h"
#include "Cmat.h"
#include "Cmat3.h"
#include "Cmat4.h"
#include "Svec.h"
#include "Dvec.h"
#include "Scmat.h"
#include "Dcmat.h"
#include "Jcmat3.h"

namespace slisc {
//% types = {
//%     'VecDoub'; 'VecComp';
//%     'SvecDoub'; 'SvecComp';
//%     'DvecDoub'; 'DvecComp';
//%     'CmatDoub'; 'CmatComp';
//%     'ScmatDoub'; 'ScmatComp';
//%     'DcmatInt'; 'CmatInt'; 'Cmat3Doub';
//% };
//%----------------------------
//% Tv = varargin{:};
//% T = contain_type(Tv);
//% Tsli = slice_type(Tv);
//% if ndim(Tv) == 1
inline @Tsli@ slice(@Tv@_IO v, Long_I start, Long_I N)
{
#ifdef SLS_CHECK_BOUNDS
    if (start < 0 || start + N > v.size())
        SLS_ERR("index out of bound!");
#endif
//%     if is_dense_vec(Tv)
    @Tsli@ sli(v.ptr() + start, N);
//%     elseif is_Dvec(Tv)
    @Tsli@ sli(v.ptr() + start, N, v.step());
//%     else
//%         error('not implemented (1)!');
//%     end
	return sli;
}

inline @Tsli@_c slice(@Tv@_I v, Long_I start, Long_I N)
{
#ifdef SLS_CHECK_BOUNDS
    if (start < 0 || start + N > v.size())
        SLS_ERR("index out of bound!");
#endif
//%     if is_dense_vec(Tv)
    @Tsli@_c sli(v.ptr() + start, N);
//%     elseif is_Dvec(Tv)
    @Tsli@_c sli(v.ptr() + start, N, v.step());
//%     else
//%         error('not implemented (1)!');
//%     end
	return sli;
}
//% elseif ndim(Tv) == 2
inline @Tsli@ slice(@Tv@_IO v,
	Long_I start1, Long_I N1, Long_I start2, Long_I N2)
{
#ifdef SLS_CHECK_BOUNDS
    if (start1 < 0 || start1 + N1 > v.n1() ||
			start2 < 0 || start2 + N2 > v.n2())
        SLS_ERR("index out of bound!");
#endif
//%     if is_dense_mat(Tv)
    @Tsli@ sli(&v(start1, start2), N1, N2, v.n1());
//%     elseif is_Dcmat(Tv)
    @Tsli@ sli(&v(start1, start2), N1, N2, v.lda());
//%     else
//%         error('not implemented (1)!');
//%     end
	return sli;
}

inline @Tsli@_c slice(@Tv@_I v,
	Long_I start1, Long_I N1, Long_I start2, Long_I N2)
{
#ifdef SLS_CHECK_BOUNDS
    if (start1 < 0 || start1 + N1 > v.n1() ||
			start2 < 0 || start2 + N2 > v.n2())
        SLS_ERR("index out of bound!");
#endif
//%     if is_dense_mat(Tv)
    @Tsli@_c sli(&v(start1, start2), N1, N2, v.n1());
//%     elseif is_Dcmat(Tv)
    @Tsli@_c sli(&v(start1, start2), N1, N2, v.lda());
//%     else
//%         error('not implemented (1)!');
//%     end
	return sli;
}
//%     if is_Cmat(Tv)
//%         ScmatT = ['Scmat' T];
inline @ScmatT@ slice(@Tv@_IO v, Long_I start2, Long_I N2)
{
#ifdef SLS_CHECK_BOUNDS
    if (start2 < 0 || start2 + N2 > v.n2())
        SLS_ERR("index out of bound!");
#endif
	@ScmatT@ sli(v.ptr() + v.n1()*start2, v.n1(), N2);
	return sli;
}

inline @ScmatT@_c slice(@Tv@_I v, Long_I start2, Long_I N2)
{
#ifdef SLS_CHECK_BOUNDS
    if (start2 < 0 || start2 + N2 > v.n2())
        SLS_ERR("index out of bound!");
#endif
	@ScmatT@_c sli(v.ptr() + v.n1()*start2, v.n1(), N2);
	return sli;
}
//%     end
//% elseif ndim(Tv) == 3
//%     if is_Cmat3(Tv)
inline @Tsli@ slice(@Tv@_IO v, Long_I start1, Long_I N1, Long_I start2, Long_I N2, Long_I start3, Long_I N3)
{
#ifdef SLS_CHECK_BOUNDS
    if (start1 < 0 || start1 + N1 > v.n1() || start2 < 0 || start2 + N2 > v.n2() || start3 < 0 || start3 + N3 > v.n3())
        SLS_ERR("index out of bound!");
#endif
	@Tsli@ sli(&v(start1, start2, start3), N1, N2, N3, 1, v.n1(), v.n1()*v.n2());
	return sli;
}

inline @Tsli@_c slice(@Tv@_I v, Long_I start1, Long_I N1, Long_I start2, Long_I N2, Long_I start3, Long_I N3)
{
#ifdef SLS_CHECK_BOUNDS
    if (start1 < 0 || start1 + N1 > v.n1() || start2 < 0 || start2 + N2 > v.n2() || start3 < 0 || start3 + N3 > v.n3())
        SLS_ERR("index out of bound!");
#endif
	@Tsli@_c sli(&v(start1, start2, start3), N1, N2, N3, 1, v.n1(), v.n1()*v.n2());
	return sli;
}
//%     end
//% else
//%     error('not implemented!');
//% end
//%------------------------

//% types = {
//%     'MatInt'; 'MatDoub'; 'MatComp';
//%     'CmatInt'; 'CmatDoub'; 'CmatComp';
//%     'ScmatDoub'; 'ScmatComp';
//% };
//%----------------------------
//% Tv = varargin{:};
//% T = contain_type(Tv);
//% Tsli = slice1_type(Tv);
//% if is_Cmat(Tv) || is_Scmat(Tv)
inline @Tsli@ slice1(@Tv@_IO v, Long_I j)
{
#ifdef SLS_CHECK_BOUNDS
    if (j < 0 || j >= v.n2())
        SLS_ERR("index out of bound!");
#endif
	@Tsli@ sli(v.ptr() + v.n1() * j, v.n1());
	return sli;
}

inline @Tsli@_c slice1(@Tv@_I v, Long_I j)
{
#ifdef SLS_CHECK_BOUNDS
    if (j < 0 || j >= v.n2())
        SLS_ERR("index out of bound!");
#endif
	@Tsli@_c sli(v.ptr() + v.n1() * j, v.n1());
	return sli;
}
//% elseif is_Dcmat(Tv)
inline @Tsli@ slice1(@Tv@_IO v, Long_I j)
{
#ifdef SLS_CHECK_BOUNDS
    if (j < 0 || j >= v.n2())
        SLS_ERR("index out of bound!");
#endif
	@Tsli@ sli(v.ptr() + v.lda() * j, v.n1());
	return sli;
}

inline @Tsli@_c slice1(@Tv@_I v, Long_I j)
{
#ifdef SLS_CHECK_BOUNDS
    if (j < 0 || j >= v.n2())
        SLS_ERR("index out of bound!");
#endif
	@Tsli@_c sli(v.ptr() + v.lda() * j, v.n1());
	return sli;
}
//% elseif is_Mat(Tv)
inline @Tsli@ slice1(@Tv@_IO v, Long_I j)
{
#ifdef SLS_CHECK_BOUNDS
    if (j < 0 || j >= v.n2())
        SLS_ERR("index out of bound!");
#endif
	@Tsli@ sli(v.ptr() + j, v.n1(), v.n2());
	return sli;
}

inline @Tsli@_c slice1(@Tv@_I v, Long_I j)
{
#ifdef SLS_CHECK_BOUNDS
    if (j < 0 || j >= v.n2())
        SLS_ERR("index out of bound!");
#endif
	@Tsli@_c sli(v.ptr() + j, v.n1(), v.n2());
	return sli;
}
//% else
//%     error('not implemented!');
//% end
//%------------------------

//% types = {
//%     'CmatInt'; 'CmatLlong'; 'CmatDoub'; 'CmatComp';
//%     'ScmatDoub'; 'ScmatComp'; 'MatInt'; 'MatDoub'; 'MatComp';
//% };
//%----------------------------
//% Tv = varargin{:};
//% T = contain_type(Tv);
//% Tsli = slice2_type(Tv);
//% if is_Cmat(Tv) || is_Scmat(Tv)
inline @Tsli@ slice2(@Tv@_IO v, Long_I i)
{
#ifdef SLS_CHECK_BOUNDS
    if (i < 0 || i >= v.n1())
        SLS_ERR("index out of bound!");
#endif
	@Tsli@ sli(v.ptr() + i, v.n2(), v.n1());
	return sli;
}

inline @Tsli@_c slice2(@Tv@_I v, Long_I i)
{
#ifdef SLS_CHECK_BOUNDS
    if (i < 0 || i >= v.n1())
        SLS_ERR("index out of bound!");
#endif
	@Tsli@_c sli(v.ptr() + i, v.n2(), v.n1());
	return sli;
}
//% elseif is_Dcmat(Tv)
inline @Tsli@ slice2(@Tv@_IO v, Long_I i)
{
#ifdef SLS_CHECK_BOUNDS
    if (i < 0 || i >= v.n1())
        SLS_ERR("index out of bound!");
#endif
	@Tsli@ sli(v.ptr() + i, v.n2(), v.lda());
	return sli;
}

inline @Tsli@_c slice2(@Tv@_I v, Long_I i)
{
#ifdef SLS_CHECK_BOUNDS
    if (i < 0 || i >= v.n1())
        SLS_ERR("index out of bound!");
#endif
	@Tsli@_c sli(v.ptr() + i, v.n2(), v.lda());
	return sli;
}

//% elseif is_Mat(Tv)
inline @Tsli@ slice2(@Tv@_IO v, Long_I i)
{
#ifdef SLS_CHECK_BOUNDS
    if (i < 0 || i >= v.n1())
        SLS_ERR("index out of bound!");
#endif
	@Tsli@ sli(v.ptr() + i*v.n2(), v.n2());
	return sli;
}

inline @Tsli@_c slice2(@Tv@_I v, Long_I i)
{
#ifdef SLS_CHECK_BOUNDS
    if (i < 0 || i >= v.n1())
        SLS_ERR("index out of bound!");
#endif
	@Tsli@_c sli(v.ptr() + i*v.n2(), v.n2());
	return sli;
}
//% else
//%     error('not implemented!');
//% end
//%------------------------

//% types = {
//%     'Cmat4Int'; 'Cmat4Llong'; 'Cmat4Doub'; 'Cmat4Comp';
//% };
//%----------------------------
//% Tv = varargin{:};
//% Tsli = slice12_type(Tv);
//% if is_Cmat3(Tv)
inline @Tsli@ slice12(@Tv@_IO v, Long_I k)
{
#ifdef SLS_CHECK_BOUNDS
    if (k < 0 || k >= v.n3())
        SLS_ERR("index out of bound!");
#endif
	@Tsli@ sli(v.ptr() + v.n1()*v.n2()*k, v.n1(), v.n2());
	return sli;
}

inline @Tsli@_c slice12(@Tv@_I v, Long_I k)
{
#ifdef SLS_CHECK_BOUNDS
    if (k < 0 || k >= v.n3())
        SLS_ERR("index out of bound!");
#endif
	@Tsli@_c sli(v.ptr() + v.n1()*v.n2()*k, v.n1(), v.n2());
	return sli;
}
//% elseif is_Cmat4(Tv)
inline @Tsli@ slice12(@Tv@_IO v, Long_I k, Long_I l)
{
#ifdef SLS_CHECK_BOUNDS
    if (k < 0 || k >= v.n3() || l < 0 || l >= v.n4())
        SLS_ERR("index out of bound!");
#endif
	Long N1N2 = v.n1() * v.n2();
	@Tsli@ sli(v.ptr() + N1N2*k + N1N2*v.n3()*l, v.n1(), v.n2());
	return sli;
}

inline @Tsli@_c slice12(@Tv@_I v, Long_I k, Long_I l)
{
#ifdef SLS_CHECK_BOUNDS
    if (k < 0 || k >= v.n3() || l < 0 || l >= v.n4())
        SLS_ERR("index out of bound!");
#endif
	Long N1N2 = v.n1() * v.n2();
	@Tsli@_c sli(v.ptr() + N1N2*k + N1N2*v.n3()*l, v.n1(), v.n2());
	return sli;
}
//% else
//%     error('not implemented!');
//% end
//%------------------------
} // namespace slisc
