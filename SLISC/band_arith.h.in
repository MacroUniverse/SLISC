#pragma once
#include "arithmetic.h"
#include "slice_arith.h"
#include "Cband.h"

namespace slisc {

// conversion between full matrix and band diagonal matrix
// Nup and Nlow are the number of upper diagonals and lower diagonals
// ref: cBLAS gbmv() routine
// https://software.intel.com/en-us/node/834918#DAEC7CD0-620A-4696-9612-C295F8211646

//% types = {
//%     'CbandDoub'; 'CbandComp';
//% };
//%------------------------------
//% T = varargin{:}; Ts = contain_type(T);
void copy(@T@_O a, @Ts@_I s)
{
	copy(a.cmat(), s);
}
//%------------------------------

//% types = {
//%     'CbandDoub', 'CmatDoub';
//%     'CbandComp', 'CmatComp';
//% };
//%------------------------------
//% [BandT, CmatT] = varargin{:};
//% Ts = contain_type(CmatT);
//% SvecT = ['Svec' Ts];
void copy(@BandT@_O b, @CmatT@_I a)
{
#ifdef SLS_CHECK_SHAPE
	if (!shape_cmp(a, b))
		SLS_ERR("wrong shape!");
#endif
    Long N1 = a.n1(), N2 = a.n2();
    for (Long j = 0; j < N2; ++j) {
		@SvecT@ sli_b = slice1(b.cmat(), j);
		@SvecT@_c sli_a = slice1(a, j);
        Long k = b.nup() - j;
		Long i_beg = max(Long(0), j - b.nup()), i_end = min(N1, j + b.nlow() + 1);
        for (Long i = i_beg; i < i_end; ++i)
            sli_b[k + i] = sli_a[i];
    }
}

void copy(@CmatT@_O a, @BandT@_I b)
{
#ifdef SLS_CHECK_SHAPE
	if (!shape_cmp(a, b))
		SLS_ERR("wrong shape!");
#endif
    Long N1 = a.n1(), N2 = a.n2();
    for (Long j = 0; j < N2; ++j) {
        Long k = b.nup() - j;
		Long i_beg = max(Long(0), j - b.nup()), i_end = min(N1, j + b.nlow() + 1);
		@SvecT@ sli_a = slice1(a, j);
		@SvecT@_c sli_b = slice1(b.cmat(), j);
		for (Long i = 0; i < i_beg; ++i)
			sli_a[i] = 0;
        for (Long i = i_beg; i < i_end; i++)
            sli_a[i] = sli_b[k + i];
		for (Long i = i_end; i < N1; ++i)
			sli_a[i] = 0;
    }
}
//%------------------------------

// void mat2band(Matrix<T> &b, const Matrix<T> &a, Long_I Nup, Long_I Nlow)
// {
//     Long N1 = a.n1(), N2 = a.n2();
//     for (Long i = 0; i < N1; i++) {
//         Long k = Nlow - i;
//         for (Long j = max(Long(0), i - Nlow); j < MIN(N2, i + Nup + 1); j++) {
//             b(i, k + j) = a(i, j);
//         }
//     }
// }

// template <class T, SLS_IF0(is_scalar<T>())>
// void band2mat(Matrix<T> &a, const Matrix<T> &b, Long_I Nup, Long_I Nlow)
// {
//     Long N1 = a.n1(), N2 = a.n2();
//     for (Long i = 0; i < N1; i++) {
//         Long k = Nlow - i;
//         for (Long j = max(Long(0), i - Nlow); j < MIN(N2, i + Nup + 1); j++) {
//             a(i, j) = b(i, k + j);
//         }
//     }
// }

// matrix-vector multiplication for band matrix

// matrix-vector multiplication for band matrix
void mul(VecDoub_O y, CbandDoub_I a, VecDoub_I x)
{
    Doub alpha = 1, beta = 0;
    Long lda = a.nlow() + a.nup() + 1;
    Long incx = 1, incy = 1;
    cblas_dgbmv(CblasColMajor, CblasNoTrans, a.n1(), a.n2(), a.nlow(), a.nup(),
        alpha, a.ptr(), lda, x.ptr(), incx, beta, y.ptr(), incy);
}

void mul(VecComp_O y, CbandComp_I a, VecComp_I x)
{
    Comp alpha(1, 0), beta(0, 0);
    Long lda = a.nlow() + a.nup() + 1;
    Long incx = 1, incy = 1;
    cblas_zgbmv(CblasColMajor, CblasNoTrans, a.n1(), a.n2(), a.nlow(), a.nup(),
        &alpha, a.ptr(), lda, x.ptr(), incx, &beta, y.ptr(), incy);
}

} // namespace slisc
