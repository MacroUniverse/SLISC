// binary version of matt.h
// always use Llong when reading and writing index in matb file

#pragma once
#include "../file/matt.h"
#include "../util/bit.h"
#include "../prec/quad_math.h"

#if !(defined(__MINGW32__) || defined(__MINGW64__) || defined(__CYGWIN__) || defined(__MSYS__))

namespace slisc {

// all non-data intergers in file are Llong
class Matb {
public:
	Matb();
	Matb(Str_I fname, Str_I rw, Bool_I replace = false);
	Str m_rw; // "r" for read "w" for write
	ifstream m_in; // read file
	ofstream m_out; // write file
	Llong m_filesize; // file size
	Str m_fname; // name of the opened file
	vecStr m_name; // variable names
	vecStr m_data; // data cache, only useful in "m" mode
	vecLong m_type; // variable types
	vector<vecLong> m_size; // variable dimensions
	vecLlong m_ind; // variable positions (from the first byte of file)

	// open a file
	void open(Str_I fname, Str_I rw, Bool_I replace = false);

	// check if file is open
	bool isopen();

	// read all data into cache
	void read_data();
	void write_data(Str_I fname);

	// close a file, if not called, will be called in destructor
	void close();

	// ===== internal functions =====

	// get var names and positions from the end of the file
	Long size() const;
	Long data_size(Long_I i) const;
	void get_profile();
	Long data_pos(Long_I var_ind) const; // find position of the ind-th variable, i.e. seekg() of the first element

	// search a variable by name, return index to m_name[i]
	// return -1 if not found
	Long search(Str_I name);

	~Matb();
};

typedef const Matb &Matb_I;
typedef Matb &Matb_O, &Matb_IO;

struct Matb_file_not_complete : sls_err {};

// read the last Llong
// pointer will be moved to the beginning of the last Llong
inline Llong lastLlong(ifstream &fin)
{
	Llong p = Llong(fin.tellg()) - 8;
	Llong num;
	fin.seekg(p);
	read(fin, num);
	fin.seekg(p);
	return num;
}

inline Long Matb::size() const
{
	return m_ind.size();
}

inline void Matb::get_profile()
{
	Str name;
	ifstream &fin = m_in;

	// read number of variables and their positions
	fin.seekg(0, fin.end);
	m_filesize = fin.tellg();
	// check end of file mark
	fin.seekg(m_filesize-strlen("Matb_End_of_File"));
	Str mark; mark.resize(strlen("Matb_End_of_File"));
	read(fin, mark);
	if (mark != "Matb_End_of_File")
		throw Matb_file_not_complete();
	fin.seekg(m_filesize-strlen("Matb_End_of_File"));
	Long Nvar = lastLlong(fin);
	if (Nvar < 1)
		SLS_ERR("unknown!");
	m_ind.resize(Nvar);
	for (Long i = 0; i < Nvar; ++i) {
		m_ind[i] = lastLlong(fin);
		if (m_ind[i] >= m_filesize || m_ind[i] < 0)
			SLS_ERR("unknown!");
		if (i > 0 && m_ind[i] <= m_ind[i-1])
			SLS_ERR("unknown!");
	}

	// loop through each variable
	m_size.resize(Nvar);
	for (Long i = 0; i < Nvar; ++i) {
		fin.seekg(m_ind[i]);
		// read var name
		Llong n;
		read(fin, n);
		name.resize(n);
		read(fin, name);
		m_name.push_back(name);
		// read var type
		read(fin, n);
		if (n < 0)
			SLS_ERR("unknown!");
		m_type.push_back(n);
		// read var dim
		read(fin, n);
		if (n < 0)
			SLS_ERR("unknown!");
		m_size[i].resize(n);
		for (Long j = 0; j < n; ++j) {
			Llong tmp;
			read(fin, tmp); m_size[i][j] = tmp;
			if (m_size[i][j] < 0)
				SLS_ERR("unknown!");
		}
	}
}

inline Long Matb::data_pos(Long_I i) const
{
#ifdef SLS_CHECK_BOUNDS
	if (i <0 || i >= size())
		SLS_ERR("out of bound!");
#endif
	return m_ind[i] + 8 + m_name[i].size() + 8 + 8 + (Long)m_size[i].size() * 8;
}

// search variable in file by name
// return index of m_name, return -1 if not found
inline Long Matb::search(Str_I name)
{
	for (Long i = 0; i < size(); ++i)
		if (name == m_name[i])
			return i;
	return -1;
}

inline Matb::Matb() {}

inline Matb::Matb(Str_I fname, Str_I rw, Bool_I replace)
{ open(fname, rw, replace); }

inline void Matb::open(Str_I fname, Str_I rw, Bool_I replace)
{
	if (!little_endian())
		SLS_ERR("only support little endian for now!");
	if (isopen())
		close();
	if (fname.substr(fname.size()-5) != ".matb")
		SLS_ERR("file must have \".matb\" extension!");
	m_rw = rw;
	m_fname = fname;
	if (rw == "w") {
#ifndef SLS_MATB_REPLACE
		if (!replace && file_exist(m_fname)) {
			while (true) {
				if (file_exist(m_fname)) {
					SLS_WARN("\n\nfile [" + m_fname + "] already exist! delete file to continue...\n"
						"  (define SLS_MATB_REPLACE to replace file by default)\n\n");
				}
				else {
					break;
				}
				pause(10);
			}
		}
#endif
		open_bin(m_out, m_fname);
		if (!m_out.good())
			SLS_ERR("error: file not created (does directory exist?): " + m_fname);
	}
	else if (rw == "r" || "m") {
		open_bin(m_in, m_fname);
		if (!m_in.good())
			SLS_ERR("error: file not found: " + m_fname);
		get_profile(); // get var names
	}
	else
		SLS_ERR("illegal mode!");
}

inline Long Matb::data_size(Long_I i) const
{
	Long len;
	if (i+1 < size())
		len = m_ind[i+1] - data_pos(i);
	else {
		Long end = m_filesize - strlen("Matb_End_of_File") - 8*(size() + 1);
		len = end - data_pos(i);
	}
	return len;
}

inline bool Matb::isopen()
{
	return m_in.is_open() != m_out.is_open();
}

inline void Matb::read_data()
{
	if (m_rw != "m")
		SLS_ERR("read_data() can only be used in \"m\" mode!");
	for (Long i = 0; i < size(); ++i) {
		m_data.push_back(Str()); m_data[i].resize(data_size(i));
		m_in.seekg(data_pos(i));
		read(m_in, m_data[i]);
		if (Long(m_data[i].size()) != data_size(i))
			SLS_ERR("unknown!");
	}
}

inline void Matb::write_data(Str_I fname)
{
	if (m_rw != "m")
		SLS_ERR("write_data() can only be used in \"m\" mode!");
	m_in.close();
	open_bin(m_out, fname);
	m_out.seekp(0, std::ios::beg);
	for (Long i = 0; i < size(); ++i) {
		// debug
		if (m_ind[i] != m_out.tellp())
			SLS_ERR("unknown!");
		write(m_out, (Llong)m_name[i].size());
		write(m_out, m_name[i]); // name
		write(m_out, (Llong)m_type[i]);
		Long Ndim = m_size[i].size();
		write(m_out, (Llong)Ndim); // dim
		for (Long j = 0; j < Ndim; ++j)
			write(m_out, (Llong)m_size[i][j]);
		write(m_out, m_data[i]);
	}
	// write position of variables
	for (Long i = size() - 1; i >= 0; --i)
		write(m_out, m_ind[i]);
	// write number of variables
	write(m_out, (Llong)size());
	// mark end-of-file
	write(m_out, "Matb_End_of_File");
	m_out.close();
	open_bin(m_in, m_fname);
}

inline void Matb::close()
{
	if (m_rw == "w") {
		// write position of variables
		for (Long i = m_ind.size() - 1; i >= 0; --i)
			write(m_out, m_ind[i]);
		// write number of variables
		write(m_out, (Llong)size());
		// mark end-of-file
		write(m_out, "Matb_End_of_File");
		m_out.close();
	}
	else {
		m_in.close();
	}
	m_rw = '\0';
	m_name.clear();
	m_type.clear();
	m_size.clear();
	m_ind.clear();
}

inline Matb::~Matb()
{
	if (isopen())
		close();
	else if (m_in.is_open() && m_out.is_open()) {
		// cannot throw inside destructor!
		printf("unknown!" SLS_WHERE "\n"); exit(1);
	}
}

// save() functions

// save() for scalar
//% tem('save', {'Char'; 'Int'; 'Llong'; 'Doub'; 'Qdoub';
//%   'Comp'; 'Qcomp'; });
//%--------------------
//% T = varargin{:};
inline void save(@T@_I s, Str_I varname, Matb_IO matb)
{
	if (matb.search(varname) >= 0)
		SLS_ERR("variable already exist: " + varname);
	ofstream &fout = matb.m_out;
	if (!fout.is_open())
		SLS_ERR("matb file not open: " + matb.m_fname);
	matb.m_name.push_back(varname);
	matb.m_ind.push_back(fout.tellp());
	// write variable name info
	write(fout, Llong(varname.size()));
	write(fout, varname);
	// write data type info
//% tmp = num2str(type_num(T));
	write(fout, Llong(@tmp@));
	// write dimension info
	write(fout, Llong(0));
	// write matrix data
	write(fout, s);
}

inline void save_matb(@T@_I s, Str_I varname, Str_I matb_file, Bool_I replace = false)
{
	Matb matb(matb_file, "w", replace);
	save(s, varname, matb);
	matb.close();
}
//%----------------------

// save() for containers
//% tem('save1', {
//%     'SvecChar'; 'SvecInt'; 'SvecLlong'; 'SvecDoub'; 'SvecQdoub';
//%     'SvecComp'; 'SvecQcomp';
//%     'vecInt'; 'vecLlong'; 'vecDoub'; 'vecQdoub';
//%     'vecComp'; 'vecQcomp';
//%     'DvecLlong'; 'DvecDoub'; 'DvecQdoub'; 'DvecComp'; 'DvecQcomp';
//%     'ScmatChar'; 'ScmatInt'; 'ScmatLlong'; 'ScmatDoub'; 'ScmatQdoub';
//%     'ScmatComp'; 'ScmatQcomp'; 'MatChar'; 'MatInt';
//%     'MatLlong'; 'MatDoub'; 'MatComp'; 'ScmatInt';
//%     'DcmatInt'; 'DcmatLlong'; 'DcmatDoub'; 'DcmatQdoub'; 'DcmatComp'; 'DcmatQcomp';
//%     'CmobdDoub'; 'CmobdQdoub'; 'CmobdComp'; 'CmobdQcomp'; % not optimized
//%     'McooDoub'; 'McooQdoub'; 'McooComp'; 'McooQcomp'; % not optimized
//%     'Scmat3Int'; 'Scmat3Llong'; 'Scmat3Doub'; 'Scmat3Qdoub'; 'Scmat3Comp'; 'Scmat3Qcomp';
//%     'Mat3Int'; 'Mat3Llong'; 'Mat3Doub'; 'Mat3Comp';
//%     'Scmat4Doub'; 'Scmat4Qdoub'; 'Scmat4Comp'; 'Scmat4Qcomp';
//% });
//%--------------------
//% Tv = varargin{:};
//% Ts = val_t(Tv);
//% Ndim = num2str(ndim(Tv));
//% numT = num2str(type_num(Ts));
inline void save(@Tv@_I v, Str_I varname, Matb_IO matb)
{
	if (matb.search(varname) >= 0)
		SLS_ERR("variable already exist: " + varname);
	ofstream &fout = matb.m_out;
	if (!fout.is_open())
		SLS_ERR("matb file not open!");
	// record position
	matb.m_name.push_back(varname);
	matb.m_ind.push_back(fout.tellp());
	// write variable name info
	write(fout, (Llong)varname.size()); write(fout, varname);
	// write data type info
	write(fout, Llong(@numT@));
	// write shape info
	write(fout, Llong(@Ndim@));
	// write matrix data
//% if Ndim == '1'
	write(fout, (Llong)v.size());
	for (Long i = 0; i < (Long)v.size(); ++i)
		write(fout, v[i]);
//% elseif Ndim == '2'
	write(fout, (Llong)v.n0()); write(fout, (Llong)v.n1());
	for (Long j = 0; j < v.n1(); ++j)
		for (Long i = 0; i < v.n0(); ++i)
			write(fout, v(i, j));
//% elseif Ndim == '3'
	write(fout, (Llong)v.n0()); write(fout, (Llong)v.n1()); write(fout, (Llong)v.n2());
	for (Long k = 0; k < v.n2(); ++k)
		for (Long j = 0; j < v.n1(); ++j)
			for (Long i = 0; i < v.n0(); ++i)
				write(fout, v(i, j, k));
//% elseif Ndim == '4'
	write(fout, (Llong)v.n0()); write(fout, (Llong)v.n1());
	write(fout, (Llong)v.n2()); write(fout, (Llong)v.n3());
	for (Long l = 0; l < v.n3(); ++l)
		for (Long k = 0; k < v.n2(); ++k)
			for (Long j = 0; j < v.n1(); ++j)
				for (Long i = 0; i < v.n0(); ++i)
					write(fout, v(i, j, k, l));
//% end
}

inline void save_matb(@Tv@_I v, Str_I varname, Str_I matb_file, Bool_I replace = false)
{
	Matb matb(matb_file, "w", replace);
	save(v, varname, matb);
	matb.close();
}
//%----------------------

// save string as SvecChar
inline void save(Str_I str, Str_I varname, Matb_IO matb)
{
	if (matb.search(varname) >= 0)
		SLS_ERR("variable already exist: " + varname);
	SvecCharC sli; sli.set((Char*)str.data(), str.size());
	save(sli, varname, matb);
}


// read matb files
// return 0 if successful, -1 if variable not found
//% tem('load', {'Char'; 'Int'; 'Llong'; 'Doub'; 'Qdoub'; 'Comp'; 'Qcomp';
//%    'vecDoub'; 'vecQdoub'; 'vecComp'; 'vecQcomp';
//%    'VecChar'; 'VecInt'; 'VecLlong'; 'VecDoub'; 'VecQdoub'; 'VecComp'; 'VecQcomp';
//%    'MatInt'; 'MatLlong'; 'MatDoub'; 'MatComp'; 'Mat3Doub'; 'Mat3Comp';
//%    'CmatInt'; 'CmatLlong'; 'CmatDoub'; 'CmatQdoub'; 'CmatComp'; 'CmatQcomp';
//%    'Cmat3Int'; 'Cmat3Llong'; 'Cmat3Doub'; 'Cmat3Qdoub'; 'Cmat3Comp'; 'Cmat3Qcomp';
//%    'Cmat4Doub'; 'Cmat4Qdoub'; 'Cmat4Comp'; 'Cmat4Qcomp';
//% });
//%---------------------
//% T = varargin{:};
//% Ts = val_t(T);
//% numTs = num2str(type_num(Ts));
//% if ~(is_Char(Ts) || is_Int(Ts) || is_Llong(Ts) || is_Doub(Ts) || is_Qdoub(Ts) || is_Comp(Ts) || is_Qcomp(Ts))
//%     error('not implemented (421)!');
//% end
//% if is_scalar(T)
inline void load(@T@_O s, Str_I varname, Matb_IO matb)
{
	ifstream &fin = matb.m_in;
	Long i = matb.search(varname);
	if (i < 0)
		throw sls_err("variable not found: " + varname + " in " + matb.m_fname);
	fin.seekg(matb.data_pos(i));

	if (@numTs@ != matb.m_type[i])
		SLS_ERR("wrong type!");
	if (matb.m_size[i].size() != 0)
		SLS_ERR("wrong dimension!");

	read(fin, s);
}
//% elseif is_Vec(T) || is_vec(T)
inline void load(@T@_O v, Str_I varname, Matb_IO matb)
{
	ifstream &fin = matb.m_in;
	Long i = matb.search(varname);
	if (i < 0)
		throw sls_err("variable not found: " + varname + " in " + matb.m_fname);
	fin.seekg(matb.data_pos(i));

	if (@numTs@ != matb.m_type[i])
		SLS_ERR("wrong type!");
	if (matb.m_size[i].size() != 1)
		SLS_ERR("wrong dimension!");

	Long n = matb.m_size[i][0]; v.resize(n);
	// read var data
	for (Long i = 0; i < n; ++i)
		read(fin, v[i]);
}
//% elseif is_Mat(T) || is_Cmat(T)
inline void load(@T@_O a, Str_I varname, Matb_IO matb)
{
	Long i, j, m, n;
	ifstream &fin = matb.m_in;
	i = matb.search(varname);
	if (i < 0)
		throw sls_err("variable not found: " + varname + " in " + matb.m_fname);
	fin.seekg(matb.data_pos(i));

	if (@numTs@ != matb.m_type[i])
		SLS_ERR("wrong type!");
	if (matb.m_size[i].size() != 2)
		SLS_ERR("wrong dimension!");

	m = matb.m_size[i][0]; n = matb.m_size[i][1]; a.resize(m, n);
	// read var data
	for (j = 0; j < n; ++j)
		for (i = 0; i < m; ++i)
			read(fin, a(i, j));
}
//% elseif is_Mat3(T) || is_Cmat3(T)
inline void load(@T@_O a, Str_I varname, Matb_IO matb)
{
	Long i, j, k, m, n, q;
	ifstream &fin = matb.m_in;
	i = matb.search(varname);
	if (i < 0)
		throw sls_err("variable not found: " + varname + " in " + matb.m_fname);
	fin.seekg(matb.data_pos(i));

	if (@numTs@ != matb.m_type[i])
		SLS_ERR("wrong type!");
	if (matb.m_size[i].size() != 3)
		SLS_ERR("wrong dimension!");
	
	m = matb.m_size[i][0]; n = matb.m_size[i][1]; q = matb.m_size[i][2];
	a.resize(m, n, q);
	// read var data
	for (k = 0; k < q; ++k)
		for (j = 0; j < n; ++j)
			for (i = 0; i < m; ++i)
				read(fin, a(i, j, k));
}
//% elseif is_Cmat4(T)
inline void load(@T@_O a, Str_I varname, Matb_IO matb)
{
	Long i, j, k, l, N1, N2, N3, N4;
	ifstream &fin = matb.m_in;
	i = matb.search(varname);
	if (i < 0)
		throw sls_err("variable not found: " + varname + " in " + matb.m_fname);
	fin.seekg(matb.data_pos(i));

	if (@numTs@ != matb.m_type[i])
		SLS_ERR("wrong type!");
	if (matb.m_size[i].size() != 4)
		SLS_ERR("wrong dimension!");
	
	N1 = matb.m_size[i][0]; N2 = matb.m_size[i][1]; N3 = matb.m_size[i][2]; N4 = matb.m_size[i][3];
	a.resize(N1, N2, N3, N4);
	// read var data
	for (l = 0; l < N4; ++l)
		for (k = 0; k < N3; ++k)
			for (j = 0; j < N2; ++j)
				for (i = 0; i < N1; ++i)
					read(fin, a(i, j, k, l));
}
//% else
//%     disp(T); error('not implemented!');
//% end

//% % read one var from one file
inline void load_matb(@T@_O var, Str_I varname, Str_I matb_file)
{
	Matb matb(matb_file, "r");
	load(var, varname, matb);
	matb.close();
}
//%------------------------

// convert a single .matb file to .matt file
// if replace = false and destination exists, then nothing will be done
// return 0 if successful, -1 if skipped
inline Long matb2matt(Str_I matb_name, Bool_I replace = false)
{
	Long N = matb_name.size();
	Str matt_name;
	if (matb_name.substr(N-5, 5) != ".matb")
		SLS_ERR(matb_name + " : file does not have .matb extension!");
	matt_name = matb_name.substr(0, N - 1) + "t";
	if (file_exist(matt_name)) {
		if (replace)
			file_remove(matt_name);
		else
			return -1;
	}

	Matb matb(matb_name, "r");
	Matt matt(matt_name, "w");
	Long Nvar = matb.m_name.size();
	for (Long i = 0; i < Nvar; ++i) {
		const Long &type = matb.m_type[i];
		const Str &name = matb.m_name[i];
		const Long Ndim = matb.m_size[i].size();
		if (Ndim == 0) {
// scalars
//% tem('matb2matt', {
//%     'Char'; 'Int'; 'Llong'; 'Doub'; 'Comp';
//% });
//%----------------------
//% T = varargin{:};
//% numT = num2str(type_num(T));
			if (type == @numT@) {
				@T@ s;
				load(s, name, matb); save(s, name, matt);
				continue;
			}
//%---------------------
			SLS_ERR("not implemented!");
		}

// containers
//% tem('matb2matt2', {
//%     'VecChar'; 'VecInt'; 'VecLlong'; 'VecDoub'; 'VecComp';
//%     'CmatInt'; 'CmatLlong'; 'CmatDoub'; 'CmatComp';
//%     'Cmat3Int'; 'Cmat3Llong'; 'Cmat3Doub'; 'Cmat3Comp';
//%     'Cmat4Doub'; 'Cmat4Comp';
//% });
//%----------------------
//% T = varargin{:};
//% Ndim = num2str(ndim(T));
//% Ts = val_t(T);
//% numTs = num2str(type_num(Ts));
		if (type == @numTs@ && Ndim == @Ndim@) {
			@T@ v;
			load(v, name, matb); save(v, name, matt);
			continue;
		}
//%--------------------
	}
	matb.close(); matt.close();
	return 0;
}

// convert a single .matb file to .matt file
// if replace = false and destination exists, then nothing will be done
// return 0 if successful, -1 if skipped
inline Long matt2matb(Str_I matt_name, Bool_I replace = false)
{
	Long N = matt_name.size();
	Str matb_name;
	if (matt_name.substr(N-5, 5) != ".matt")
		SLS_ERR(matt_name + " : file does not have .matt extension!");
	matb_name = matt_name.substr(0, N - 1) + "b";
	if (file_exist(matb_name)) {
		if (replace)
			file_remove(matb_name);
		else
			return -1;
	}
	Matt matt(matt_name, "r");
	Matb matb(matb_name, "w");
	Long Nvar = matt.m_name.size();
	for (Long i = 0; i < Nvar; ++i) {
		const Long &type = matt.m_type[i];
		const Str &name = matt.m_name[i];
		const Long Ndim = matt.m_size[i].size();
		if (Ndim == 0) {
// scalars
//% tem('matt2matb', {
//%     'Char'; 'Int'; 'Llong'; 'Doub'; 'Comp';
//% });
//%----------------------
//% T = varargin{:};
//% numT = num2str(type_num(T));
			if (type == @numT@) {
				@T@ s{};
				load(s, name, matt); save(s, name, matb);
				continue;
			}
//%---------------------
			SLS_ERR("not implemented!");
		}

// containers
//% tem('matt2matb2', {
//%     'VecChar'; 'VecInt'; 'VecLlong'; 'VecDoub'; 'VecComp';
//%     'CmatInt'; 'CmatLlong'; 'CmatDoub'; 'CmatComp';
//%     'Cmat3Int'; 'Cmat3Llong'; 'Cmat3Doub'; 'Cmat3Comp';
//%     'Cmat4Doub'; 'Cmat4Comp';
//% });
//%----------------------
//% T = varargin{:};
//% Ndim = num2str(ndim(T));
//% Ts = val_t(T);
//% numTs = num2str(type_num(Ts));
		if (type == @numTs@ && Ndim == @Ndim@) {
			@T@ v;
			load(v, name, matt); save(v, name, matb);
			continue;
		}
//%--------------------
	}
	matt.close(); matb.close();
	return 0;
}

#ifdef SLS_USE_QUAD_MATH
// convert Qdoub and Qcomp types in .matb files to Doub and Comp
// if `replace = false`, `q2d-` will be prepend to filename
// return 0 if successful, -1 if skipped due to `replace = false`
inline Long matb_q2d(Str_I matb_name, Bool_I replace = false)
{
	Long N = matb_name.size();
	Str new_matb_name;
	if (matb_name.substr(N-5, 5) != ".matb")
		SLS_ERR(matb_name + " : file does not have .matb extension!");
	new_matb_name = "q2d-" + matb_name;
	if (file_exist(new_matb_name)) {
		if (replace)
			file_remove(new_matb_name);
		else
			return -1;
	}

	Matb matb(matb_name, "r");
	Matb new_matb(new_matb_name, "w");
	Long Nvar = matb.m_name.size();
	for (Long i = 0; i < Nvar; ++i) {
		const Long &type = matb.m_type[i];
		const Str &name = matb.m_name[i];
		const Long Ndim = matb.m_size[i].size();
		if (Ndim == 0) {
// scalars
//% tem('matb_q2d', {
//%     'Char'; 'Int'; 'Llong'; 'Doub'; 'Comp';
//% });
//%----------------------
//% T = varargin{:};
//% numT = num2str(type_num(T));
			if (type == @numT@) {
				@T@ s;
				load(s, name, matb); save(s, name, new_matb);
				continue;
			}
//%---------------------

			if (type == 23) { // Qdoub
				Qdoub s;
				load(s, name, matb); save(Doub(s), name, new_matb);
				continue;
			}

			if (type == 43) { // Qcomp
				Qcomp s;
				load(s, name, matb);
				save(Comp(s.real(), s.imag()), name, new_matb);
				continue;
			}

			SLS_ERR("not implemented!");
		}

// containers
//% tem('matb_q2d2', {'VecChar'; 'VecInt'; 'VecLlong'; 'VecDoub';
//%   'VecComp'; 'CmatInt'; 'CmatLlong'; 'CmatDoub'; 'CmatComp';
//%   'Cmat3Int'; 'Cmat3Llong'; 'Cmat3Doub'; 'Cmat3Comp'; 'Cmat4Doub'; 'Cmat4Comp';});
//%----------------------
//% T = varargin{:};
//% Ndim = num2str(ndim(T));
//% Ts = val_t(T);
//% numTs = num2str(type_num(Ts));
		if (type == @numTs@ && Ndim == @Ndim@) {
			@T@ v;
			load(v, name, matb); save(v, name, new_matb);
			continue;
		}
//%--------------------

// quad precision containers
//% tem('matb_q2d3', {
//%     'VecQdoub' 'VecDoub'; 'CmatQdoub' 'CmatDoub';
//%     'Cmat3Qdoub' 'Cmat3Doub'; 'Cmat4Qdoub' 'Cmat4Doub';
//%     'VecQcomp' 'VecComp'; 'CmatQcomp' 'CmatComp';
//%     'Cmat3Qcomp' 'Cmat3Comp'; 'Cmat4Qcomp' 'Cmat4Comp';
//% });
//%----------------------
//% [T, T1] = varargin{:};
//% Ndim = num2str(ndim(T));
//% [Ts, Ts1] = val_t(T, T1);
//% numTs = num2str(type_num(Ts));
		if (type == @numTs@ && Ndim == @Ndim@) {
			@T@ v; @T1@ v1;
			load(v, name, matb);
//% if Ndim == '1'
			v1.resize(v.size());
//% elseif Ndim == '2'
			v1.resize(v.n0(), v.n1());
//% elseif Ndim == '3'
			v1.resize(v.n0(), v.n1(), v.n2());
//% elseif Ndim == '4'
			v1.resize(v.n0(), v.n1(), v.n2(), v.n3());
//% else
//%         error('not implemented!');
//% end
			for (Long i = 0; i < v.size(); ++i) {
//% if is_Qcomp(Ts)
				v1[i] = Comp(v[i].real(), v[i].imag());
//% else
				v1[i] = v[i];
//% end
			}
			save(v1, name, new_matb);
			continue;
		}
//%--------------------
	}
	matb.close(); new_matb.close();
	return 0;
}
#endif

} // namespace slisc
#endif
