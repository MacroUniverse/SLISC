// save SLISC containers to Matlab ".mat" files.
// see README.txt for details

#pragma once
#include "../arith/arith1.h"
#include "../file/file.h"
#include "../util/time.h"
#ifdef SLS_USE_MATFILE
#include <mat.h>

namespace slisc {

struct Mat
{
	MATFile *m_p;
	Mat(): m_p(NULL) {};
	Mat(Str_I fname, Str_I rw, Bool_I replace = false);
	void open(Str_I fname, Str_I rw, Bool_I replace = false);
	bool isopen();
	void close();
};

inline Mat::Mat(Str_I fname, Str_I rw, Bool_I replace): m_p(NULL) {
	open(fname, rw, replace);
}

inline void Mat::open(Str_I fname, Str_I rw, Bool_I replace) {
	if (isopen()) close();
	if (rw == "w" && file_exist(fname)) {
		if (!replace) {
#ifdef SLS_MAT_REPLACE
			file_remove(fname);
#else
			while (true) {
				if (file_exist(fname)) {
					SLS_WARN("\n\nfile [" + fname + "] already exist! delete file to continue...\n"
						"  (define SLS_MAT_REPLACE to replace file by default)\n\n");
				}
				else
					break;
				pause(10);
			}
#endif
		}
		else
			file_remove(fname);
	}
	m_p = matOpen(fname.c_str(), rw.c_str());
}

inline bool Mat::isopen() {
	return m_p != NULL;
}

inline void Mat::close() {
	if (isopen()) {
		matClose(m_p); m_p = NULL;
	}
}

//% tem('matsave(s)', {'Char'; 'Uchar'; 'Int'; 'Llong'; 'Doub'; 'Comp';});
//%---------------------
//% Ts = varargin{:};
inline void save(@Ts@_I s, Str_I varname, Mat mat)
{
	mxArray *ps;
//% if is_Char(Ts)
	ps = mxCreateNumericMatrix(1, 1, mxCHAR_CLASS, mxREAL);
//% elseif is_Uchar(Ts)
	ps = mxCreateNumericMatrix(1, 1, mxUINT8_CLASS, mxREAL);
//% elseif is_Int(Ts)
	ps = mxCreateNumericMatrix(1, 1, mxINT32_CLASS, mxREAL);
//% elseif is_Llong(Ts)
	ps = mxCreateNumericMatrix(1, 1, mxINT64_CLASS, mxREAL);
//% elseif is_Doub(Ts)
	ps = mxCreateDoubleMatrix(1, 1, mxREAL);
//% elseif is_Comp(Ts)
	ps = mxCreateDoubleMatrix(1, 1, mxCOMPLEX);
//% end
//% if is_Comp(Ts)
	Doub *pps = mxGetPr(ps);
	pps[0] = real(s);
	pps = mxGetPi(ps);
	pps[0] = imag(s);
//% else
	@Ts@ *pps = (@Ts@*)mxGetPr(ps);
	pps[0] = s;
//% end
	matPutVariable(mat.m_p, varname.c_str(), ps);
	mxDestroyArray(ps);
}
//%---------------------


//% tem('matsave(v)', {'VecChar'; 'VecUchar'; 'VecInt'; 'VecLlong'; 'VecDoub'; 'VecComp';
//%    'SvecChar'; 'SvecUchar'; 'SvecInt'; 'SvecLlong'; 'SvecDoub'; 'SvecComp';
//%    'DvecChar'; 'DvecUchar'; 'DvecInt'; 'DvecLlong'; 'DvecDoub'; 'DvecComp';});
//%---------------------
//% T = varargin{:}; Ts = val_t(T);
inline void save(@T@_I v, Str_I varname, Mat mat)
{
	Long i, n = v.size();
	mxArray *pv;
//% if is_Char(Ts)
	pv = mxCreateUninitNumericMatrix(1, n, mxCHAR_CLASS, mxREAL);
//% elseif is_Uchar(Ts)
	pv = mxCreateUninitNumericMatrix(1, n, mxUINT8_CLASS, mxREAL);
//% elseif is_Int(Ts)
	pv = mxCreateUninitNumericMatrix(1, n, mxINT32_CLASS, mxREAL);
//% elseif is_Llong(Ts)
	pv = mxCreateUninitNumericMatrix(1, n, mxINT64_CLASS, mxREAL);
//% elseif is_Doub(Ts)
	pv = mxCreateUninitNumericMatrix(1, n, mxDOUBLE_CLASS, mxREAL);
//% elseif is_Comp(Ts)
	pv = mxCreateUninitNumericMatrix(1, n, mxDOUBLE_CLASS, mxCOMPLEX);
//% end
//% if is_Comp(Ts)
	auto ppvr = mxGetPr(pv);
	auto ppvi = mxGetPi(pv);
	for (i = 0; i < n; ++i) {
		ppvr[i] = real(v[i]); ppvi[i] = imag(v[i]);
	}
//% else
	@Ts@ *ppv = (@Ts@*)mxGetPr(pv);
	for (i = 0; i < n; ++i)
		ppv[i] = v[i];
//% end
	matPutVariable(mat.m_p, varname.c_str(), pv);
	mxDestroyArray(pv);
}
//%---------------------

//% tem('matsave(m2)', {
//%    'CmatChar'; 'CmatUchar'; 'CmatInt'; 'CmatLlong'; 'CmatDoub'; 'CmatComp';
//%    'ScmatInt'; 'ScmatLlong'; 'ScmatDoub'; 'ScmatComp';
//%    'DcmatInt'; 'DcmatLlong'; 'DcmatDoub'; 'DcmatComp';});
//%---------------------
//% T = varargin{:}; Ts = val_t(T);
inline void save(@T@_I a, Str_I varname, Mat mat)
{
	Long i, j, m, n;
	mxArray *pa;
	m = a.n0(); n = a.n1();
//% if is_Char(Ts)
	pa = mxCreateUninitNumericMatrix(1, n, mxCHAR_CLASS, mxREAL);
//% elseif is_Uchar(Ts)
	pa = mxCreateUninitNumericMatrix(m, n, mxUINT8_CLASS, mxREAL);
//% elseif is_Int(Ts)
	pa = mxCreateUninitNumericMatrix(m, n, mxINT32_CLASS, mxREAL);
//% elseif is_Llong(Ts)
	pa = mxCreateUninitNumericMatrix(m, n, mxINT64_CLASS, mxREAL);
//% elseif is_Doub(Ts)
	pa = mxCreateUninitNumericMatrix(m, n, mxDOUBLE_CLASS, mxREAL);
//% elseif is_Comp(Ts)
	pa = mxCreateUninitNumericMatrix(m, n, mxDOUBLE_CLASS, mxCOMPLEX);
//% end
//% if is_Comp(Ts)
	Doub *ppar = mxGetPr(pa), *ppai = mxGetPi(pa);
	for (i = 0; i < m; ++i) {
		for (j = 0; j < n; ++j) {
			Long ind = i + m * j; const Comp &c = a(i,j);
			ppar[ind] = real(c);
			ppai[ind] = imag(c);
		}
	}
//% else
	@Ts@ *ppa = (@Ts@*)mxGetPr(pa);
		for (i = 0; i < m; ++i)
			for (j = 0; j < n; ++j)
				ppa[i + m * j] = a(i,j);
//% end
	matPutVariable(mat.m_p, varname.c_str(), pa);
	mxDestroyArray(pa);
}
//%---------------------

//% tem('matsave(m3)', {
//%   'Cmat3Llong'; 'Cmat3Doub'; 'Cmat3Comp'; });
//%---------------------
//% T = varargin{:}; Ts = val_t(T);
inline void save(@T@_I a, Str_I varname, Mat mat)
{
	Long i, j, k, m, n, q, mn;
	mxArray *pa;
	m = a.n0(); n = a.n1(); q = a.n2(); mn = m * n;
	size_t sz[3]{ size_t(m), size_t(n), size_t(q) };
//% if is_Char(Ts)
	pa = mxCreateUninitNumericArray(3, sz, mxCHAR_CLASS, mxREAL);
//% elseif is_Int(Ts)
	pa = mxCreateUninitNumericArray(3, sz, mxINT32_CLASS, mxREAL);
//% elseif is_Llong(Ts)
	pa = mxCreateUninitNumericArray(3, sz, mxINT64_CLASS, mxREAL);
//% elseif is_Doub(Ts)
	pa = mxCreateUninitNumericArray(3, sz, mxDOUBLE_CLASS, mxREAL);
//% elseif is_Comp(Ts)
	pa = mxCreateUninitNumericArray(3, sz, mxDOUBLE_CLASS, mxCOMPLEX);
//% end
//% if is_Comp(Ts)
	Doub *ppar = mxGetPr(pa), *ppai = mxGetPi(pa);
	for (i = 0; i < m; ++i) {
		for (j = 0; j < n; ++j) {
			for (k = 0; k < q; ++k) {
				Long ind = i + m * j + mn * k;
				const Comp &c = a(i,j,k);
				ppar[ind] = real(c); ppai[ind] = imag(c);
			}
		}
	}
//% else
	@Ts@ *ppa = (@Ts@*)mxGetPr(pa);
		for (i = 0; i < m; ++i)
			for (j = 0; j < n; ++j)
				for (k = 0; k < q; ++k)
					ppa[i + m*j + mn*k] = a(i,j,k);
//% end
	matPutVariable(mat.m_p, varname.c_str(), pa);
	mxDestroyArray(pa);
}
//%---------------------

//% tem('matload(s)', {'Char'; 'Uchar'; 'Int'; 'Llong'; 'Doub'; 'Comp'});
//%---------------------
//% Ts = varargin{:};
inline void load(@Ts@_O s, Str_I varname, Mat mat)
{
	mxArray *ps;
	ps = matGetVariable(mat.m_p, varname.c_str());
//% if is_Char(Ts)
	if (!mxIsChar(ps))
//% elseif is_Uchar(Ts)
	if (!mxIsUint8(ps))
//% elseif is_Int(Ts)
	if (!mxIsInt32(ps))
//% elseif is_Llong(Ts)
	if (!mxIsInt64(ps))
//% elseif is_Doub(Ts)
	if (!mxIsDouble(ps) || mxIsComplex(ps))
//% elseif is_Comp(Ts)
	if (!mxIsDouble(ps))
//% end
		SLS_ERR("'matfile: load(): wrong type!");
//% if is_Comp(Ts)
	Doub *ppsr = mxGetPr(ps), *ppsi = mxGetPi(ps);
	s = ppsi ? Comp(ppsr[0], ppsi[0]) : ppsr[0];
//% else
	@Ts@ *pps = (@Ts@ *)mxGetPr(ps);
	s = pps[0];
//% end
	mxDestroyArray(ps);
}
//%---------------------

//% tem('matload(v)', {'VecChar'; 'VecUchar'; 'VecInt'; 'VecLlong'; 'VecDoub'; 'VecComp';
//%     'SvecChar'; 'SvecUchar'; 'SvecInt'; 'SvecLlong'; 'SvecDoub'; 'SvecComp';
//%     'DvecChar'; 'DvecUchar'; 'DvecInt'; 'DvecLlong'; 'DvecDoub'; 'DvecComp'; });
//%---------------------
//% T = varargin{:}; Ts = val_t(T);
inline void load(@T@_O v, Str_I varname, Mat mat)
{
	Long i, n;
	mxArray *pv;
	pv = matGetVariable(mat.m_p, varname.c_str());
//% if is_Char(Ts)
	if (!mxIsChar(pv))
//% elseif is_Uchar(Ts)
	if (!mxIsUint8(pv))
//% elseif is_Int(Ts)
	if (!mxIsInt32(pv))
//% elseif is_Llong(Ts)
	if (!mxIsInt64(pv))
//% elseif is_Doub(Ts)
	if (!mxIsDouble(pv) || mxIsComplex(pv))
//% elseif is_Comp(Ts)
	if (!mxIsDouble(pv))
//% end
		SLS_ERR("'matfile: load(): wrong type!");
	n = mxGetDimensions(pv)[1];
//% if is_Vec(T)
	v.resize(n);
//% else
	if (v.size() != n) SLS_ERR("wrong size!");
//% end
//% if is_Comp(Ts)
	Doub *ppvr = mxGetPr(pv), *ppvi = mxGetPi(pv);
	if (ppvi)
		for (i = 0; i < n; ++i)
			v[i] = Comp(ppvr[i], ppvi[i]);
	else
		for (i = 0; i < n; ++i)
			v[i] = ppvr[i];
//% else
	@Ts@ *ppv = (@Ts@ *)mxGetPr(pv);
	for (i = 0; i < n; ++i)
		v[i] = ppv[i];
//% end
	mxDestroyArray(pv);
}
//%---------------------

//% tem('matload(a2)', {'CmatChar'; 'CmatUchar'; 'CmatInt'; 'CmatLlong'; 'CmatDoub'; 'CmatComp';
//%   'ScmatInt'; 'ScmatLlong'; 'ScmatDoub'; 'ScmatComp';
//%   'DcmatInt'; 'DcmatLlong'; 'DcmatDoub'; 'DcmatComp'; });
//%---------------------
//% T = varargin{:}; Ts = val_t(T);
inline void load(@T@_O a, Str_I varname, Mat mat)
{
	Long i, j, m, n;
	mxArray *pa = matGetVariable(mat.m_p, varname.c_str());
//% if is_Char(Ts)
	if (!mxIsChar(pa))
//% elseif is_Uchar(Ts)
	if (!mxIsUint8(pa))
//% elseif is_Int(Ts)
	if (!mxIsInt32(pa))
//% elseif is_Llong(Ts)
	if (!mxIsInt64(pa))
//% elseif is_Doub(Ts)
	if (!mxIsDouble(pa) || mxIsComplex(pa))
//% elseif is_Comp(Ts)
	if (!mxIsDouble(pa))
//% end
		SLS_ERR("'matfile: load(): wrong type!");
	const mwSize *sz = mxGetDimensions(pa);
	m = sz[0]; n = sz[1];
//% if is_Cmat(T) || is_Mat(T)
	a.resize(m, n);
//% else
	if (a.n0() != m || a.n1() != n) SLS_ERR("wrong size!");
//% end
//% if is_Comp(Ts)
	Doub *ppar = mxGetPr(pa), *ppai = mxGetPi(pa);
	if (ppai)
		for (i = 0; i < m; ++i)
			for (j = 0; j < n; ++j){
				Long ind = i + m * j;
				a(i,j) = Comp(ppar[ind], ppai[ind]);
			}
	else
		for (i = 0; i < m; ++i)
			for (j = 0; j < n; ++j)
				a(i,j) = ppar[i + m*j];
//% else
	@Ts@ *ppa = (@Ts@ *)mxGetPr(pa);
	for (i = 0; i < m; ++i)
		for (j = 0; j < n; ++j)
			a(i,j) = ppa[m*j + i];
//% end
	mxDestroyArray(pa);
}
//%---------------------

//% tem('matload(a3)', {'Cmat3Llong'; 'Cmat3Doub'; 'Cmat3Comp'});
//%---------------------
//% T = varargin{:}; Ts = val_t(T);
inline void load(@T@_O a, Str_I varname, Mat mat)
{
	Long i, j, k, m, n, q, mn;
	mxArray *pa = matGetVariable(mat.m_p, varname.c_str());
//% if is_Llong(Ts)
	if (!mxIsInt64(pa))
//% elseif is_Doub(Ts)
	if (!mxIsDouble(pa) || mxIsComplex(pa))
//% elseif is_Comp(Ts)
	if (!mxIsDouble(pa))
//% end
		SLS_ERR("'matfile: load(): wrong type!");
	const mwSize *sz = mxGetDimensions(pa);
	m = sz[0]; n = sz[1]; q = sz[2]; mn = m*n;
//% if is_Cmat3(T) || is_Mat3(T)
	a.resize(m, n, q);
//% else
	if (a.n0() != m || a.n1() != n || a.n3() != q) SLS_ERR("wrong size!");
//% end
//% if is_Comp(Ts)
	Doub *ppar = mxGetPr(pa), *ppai = mxGetPi(pa);
	if (ppai)
		for (i = 0; i < m; ++i)
			for (j = 0; j < n; ++j)
				for (k = 0; k < q; ++k){
					Long ind = i + m*j + mn*k;
					a(i,j,k) = Comp(ppar[ind], ppai[ind]);
		}
	else
		for (i = 0; i < m; ++i)
			for (j = 0; j < n; ++j)
				for (k = 0; k < q; ++k)
					a(i,j,k) = ppar[i + m*j + mn*k];
//% else
	@Ts@ *ppa = (@Ts@ *)mxGetPr(pa);
	for (i = 0; i < m; ++i)
		for (j = 0; j < n; ++j)
			for (k = 0; k < q; ++k)
				a(i,j,k) = ppa[i + m*j + mn*k];
//% end
	mxDestroyArray(pa);
}
//%---------------------

} // namespace slisc
#endif
