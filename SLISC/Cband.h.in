// band diagonal matrix class
#include "cmat.h"

namespace slisc {

//% types = {'Int'; 'Doub'; 'Comp'};
//%---------------------
//% T = varargin{:};
//% CmatT = ['Cmat' T];
//% CbandT = ['CbandT' T];
class @CbandT@
{
public:
    Long m_N1;
    Long m_N2;
    Long m_Nup;
    Long m_Nlow;
    @CmatT@ m_a;

    @CbandT@(Long_I N1, Long_I N2, Long_I Nup, Long_I Nlow);

    @T@ * ptr();
    const @T@ * ptr() const;
    Long n1() const;
    Long n2() const;
    Long nup() const;
    Long nlow() const;
	@CmatT@ &cmat();
};

inline @CbandT@::@CbandT@(Long_I N1, Long_I N2, Long_I Nup, Long_I Nlow):
    m_N1(N1), m_N2(N2), m_Nup(Nup), m_Nlow(Nlow), m_a(Nup+Nlow+1, N2)
{}

inline @T@ * @CbandT@::ptr()
{
    return m_a.ptr();
}

inline const @T@ * @CbandT@::ptr() const
{
    return m_a.ptr();
}

inline Long @CbandT@::n1() const
{
    return m_N1;
}

inline Long @CbandT@::n2() const
{
    return m_N2;
}

inline Long @CbandT@::nup() const
{
    return m_Nup;
}

inline Long @CbandT@::nlow() const
{
    return m_Nlow;
}

inline @CmatT@ &cmat()
{
	return m_a;
}

typedef const @CbandT@ & @CbandT@_I;
typedef @CbandT@ & @CbandT@_O, & @CbandT@_IO;
//%-----------------------
} // namespace slisc
