// Cmat container
#pragma once
#include "Vbase.h"

namespace slisc {
//% types = {'Int'; 'Llong'; 'Doub'; 'Comp';};
//%----------------------------------------
//% T = varargin{:};
//% Cmat4T = ['Cmat4' T];
//% VbaseT = ['Vbase' T];
class @Cmat4T@ : public @VbaseT@
{
protected:
    typedef @VbaseT@ Base;
    using Base::m_p;
    using Base::m_N;
    Long m_N1, m_N2, m_N3, m_N4;
public:
    typedef @T@ value_type;
    using Base::operator();
    using Base::ptr;
    @Cmat4T@(): m_N1(0), m_N2(0), m_N3(0), m_N4(0) {};
    @Cmat4T@(Long_I N1, Long_I N2, Long_I N3, Long_I N4);
    @Cmat4T@(const @Cmat4T@ &rhs) = delete;   // Copy constructor
    void operator<<(@Cmat4T@ &rhs); // move data and rhs.resize(0, 0, 0)
    void resize(Long_I N1, Long_I N2, Long_I N3, Long_I N4);
    @T@ & operator()(Long_I i, Long_I j, Long_I k, Long_I l);
    const @T@ & operator()(Long_I i, Long_I j, Long_I k, Long_I l) const;
    Long n1() const;
    Long n2() const;
    Long n3() const;
    Long n4() const;
};

inline @Cmat4T@::@Cmat4T@(Long_I N1, Long_I N2, Long_I N3, Long_I N4)
    : Base(N1*N2*N3*N4), m_N1(N1), m_N2(N2), m_N3(N3), m_N4(N4) {}

inline void @Cmat4T@::operator<<(@Cmat4T@ &rhs)
{
    m_N1 = rhs.m_N1; m_N2 = rhs.m_N2; m_N3 = rhs.m_N3;
    rhs.m_N1 = rhs.m_N2 = rhs.m_N3 = 0;
    Base::operator<<(rhs);
}

inline void @Cmat4T@::resize(Long_I N1, Long_I N2, Long_I N3, Long_I N4)
{
    if (N1 != m_N1 || N2 != m_N2 || N3 != m_N3 || N4 != m_N4) {
        Base::resize(N1*N2*N3*N4);
        m_N1 = N1; m_N2 = N2; m_N3 = N3; m_N4 = N4;
    }
}

inline @T@ & @Cmat4T@::operator()(Long_I i, Long_I j, Long_I k, Long_I l)
{
#ifdef SLS_CHECK_BOUNDS
    if (i < 0 || i >= m_N1 || j < 0 || j >= m_N2 ||
        k < 0 || k >= m_N3 || l < 0 || l >= m_N4)
        SLS_ERR("Matrix subscript out of bounds");
#endif
    Long N1N2 = m_N1 * m_N2;
    return m_p[i + m_N1*j + N1N2 *k + N1N2 *m_N3*l];
}

inline const @T@ & @Cmat4T@::operator()(Long_I i, Long_I j, Long_I k, Long_I l) const
{
#ifdef SLS_CHECK_BOUNDS
    if (i < 0 || i >= m_N1 || j < 0 || j >= m_N2 ||
        k < 0 || k >= m_N3 || l < 0 || l >= m_N4)
        SLS_ERR("Matrix subscript out of bounds");
#endif
    Long N1N2 = m_N1 * m_N2;
    return m_p[i + m_N1 * j + N1N2 * k + N1N2 * m_N3*l];
}

inline Long @Cmat4T@::n1() const {
    return m_N1;
}

inline Long @Cmat4T@::n2() const {
    return m_N2;
}

inline Long @Cmat4T@::n3() const {
    return m_N3;
}

inline Long @Cmat4T@::n4() const {
    return m_N4;
}

//% if is_Long(T)
#ifdef SLS_USE_INT_AS_LONG
typedef Cmat4Int Cmat4Long;
#else
typedef Cmat4Llong Cmat4Long;
#endif
//% else
typedef const @Cmat4T@ & @Cmat4T@_I;
typedef @Cmat4T@ & @Cmat4T@_O, & @Cmat4T@_IO;
//% end
//%-----------------------------
} // namespace slisc
