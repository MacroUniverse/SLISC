// binary version of matt.h

#pragma once
#include "matt.h"
#include "Bit.h"

namespace slisc {

// all non-data intergers in file are Llong
class Matb {
public:
    Matb();
    Matb(Str_I fname, Char_I rw);
    Char m_rw; // 'r' for read 'w' for write
    ifstream m_in; // read file
    ofstream m_out; // write file
    Llong m_n; // variable numbers
    Str fname; // name of the opened file
    vecStr m_name; // variable names
    vecLlong m_type; // variable types
    vector<vecLlong> m_size; // variable dimensions
    vecLlong m_ind; // variable positions (from the first byte of file)

    // open a file
    void open(Str_I fname, Char_I rw);

    // check if file is open
    Bool isopen();

    // close a file, if not called, will be called in destructor
    void close();

    // ===== internal functions =====

    // get var names and positions from the end of the file
    void get_profile();
    Long data_pos(Long_I var_ind); // find position of the ind-th variable, i.e. seekg() of the first element

    // search a variable by name, return index to m_name[i]
    // return -1 if not found
    Long search(Str_I name);

    ~Matb();
};

typedef const Matb &Matb_I;
typedef Matb &Matb_O, &Matb_IO;

struct Matb_file_not_complete {};

// read the last Llong
// pointer will be moved to the beginning of the last Llong
Llong lastLlong(ifstream &fin)
{
    Llong p = Llong(fin.tellg()) - 8;
    Llong num;
    fin.seekg(p);
    read(fin, num);
    fin.seekg(p);
    return num;
}

inline void Matb::get_profile()
{
    vecLlong size;
    Str name;
    ifstream &fin = m_in;

    // read number of variables and their positions
    fin.seekg(0, fin.end);
    Long gmax = fin.tellg();
    // check end of file mark
    fin.seekg(gmax-strlen("Matb_End_of_File"));
    Str mark; mark.resize(strlen("Matb_End_of_File"));
    read(fin, mark);
    if (mark != "Matb_End_of_File")
        throw Matb_file_not_complete();
    fin.seekg(gmax-strlen("Matb_End_of_File"));
    m_n = lastLlong(fin);
    if (m_n < 1)
        SLS_ERR("unknown!");
    m_ind.resize(m_n);
    for (Long i = 0; i < m_n; ++i) {
        m_ind[i] = lastLlong(fin);
        if (m_ind[i] >= gmax || m_ind[i] < 0)
            SLS_ERR("unknown!");
        if (i > 0 && m_ind[i] <= m_ind[i-1])
            SLS_ERR("unknown!");
    }

    // loop through each variable
    m_size.resize(m_n);
    for (Long i = 0; i < m_n; ++i) {
        fin.seekg(m_ind[i]);
        // read var name
        Llong n;
        read(fin, n);
        name.resize(n);
        read(fin, name);
        m_name.push_back(name);
        // read var type
        read(fin, n);
        if (n < 0)
            SLS_ERR("unknown!");
        m_type.push_back(n);
        // read var dim
        read(fin, n);
        if (n < 0)
            SLS_ERR("unknown!");
        size.resize(n);
        for (Long j = 0; j < n; ++j) {
            Llong temp;
            read(fin, temp);
            if (temp < 0)
                SLS_ERR("unknown!");
            size[j] = temp;
        }
        m_size[i] = size;
    }
}

inline Long Matb::data_pos(Long_I i)
{
    if (m_rw != 'r')
        SLS_ERR("not implemented!");
    m_in.seekg(m_ind[i]);
    // skip var name
    Llong n; read(m_in, n);
    m_in.seekg(Long(m_in.tellg()) + n);
    // skip var type
    m_in.seekg(Long(m_in.tellg()) + 8);
    // skip var dim
    read(m_in, n);
    return Long(m_in.tellg()) + 8*n;
}

// search variable in file by name
// return index of m_name, return -1 if not found
inline Long Matb::search(Str_I name)
{
    for (Long i = 0; i < m_n; ++i)
        if (name == m_name[i])
            return i;
    return -1;
}

inline Matb::Matb() {}

inline Matb::Matb(Str_I fname, Char_I rw)
{ open(fname, rw); }

inline void Matb::open(Str_I fname, Char_I rw)
{
    if (!little_endian())
        SLS_ERR("only support little endian for now!");
    if (isopen())
        close();
    this->fname = fname;
    if (rw == 'w') {
#ifndef SLS_MATB_REPLACE
        if (file_exist(fname)) {
            while (true) {
                if (file_exist(fname)) {
                    SLS_WARN("\n\nfile [" + fname + "] already exist! delete file to continue...\n"
                        "  (define SLS_MATB_REPLACE to replace file by default)\n\n");
                }
                else {
                    break;
                }
                pause(10);
            }
        }
#endif
        m_rw = 'w';
        m_n = 0;
        open_bin(m_out, fname);
        if (!m_out.good())
            SLS_ERR("error: file not created (does directory exist?): " + fname);
    }
    else {
        m_rw = 'r';
        open_bin(m_in, fname);
        if (!m_in.good())
            SLS_ERR("error: file not found: " + fname);
        get_profile(); // get var names
    }
}

inline Bool Matb::isopen()
{
    return m_in.is_open() != m_out.is_open();
}

inline void Matb::close()
{
    if (m_rw == 'w') {
        // write position of variables
        for (Long i = m_ind.size() - 1; i >= 0; --i)
            write(m_out, m_ind[i]);
        // write number of variables
        write(m_out, m_n);
        // mark end-of-file
        write(m_out, "Matb_End_of_File");
        m_out.close();
    }
    else {
        m_in.close();
    }
    m_rw = '\0';
    m_n = 0;
    m_name.clear();
    m_type.clear();
    m_size.clear();
    m_ind.clear();
}

inline Matb::~Matb()
{
    if (isopen())
        close();
    else if (m_in.is_open() && m_out.is_open())
        SLS_ERR("unknown!");
}

// save() functions

// save() for scalar
//% types = {'Char'; 'Int'; 'Llong'; 'Doub'; 'Comp'};
//%--------------------
//% T = varargin{:};
inline void save(@T@_I s, Str_I varname, Matb_IO matb)
{
    if (matb.search(varname) >= 0)
        SLS_ERR("variable already exist: " + varname);
    ofstream &fout = matb.m_out;
    if (!fout.is_open())
        SLS_ERR("matb file not open: " + matb.fname);
    matb.m_name.push_back(varname);
    ++matb.m_n; matb.m_ind.push_back(fout.tellp());
    // write variable name info
    write(fout, size(varname));
    write(fout, varname);
    // write data type info
//% tmp = num2str(type_num(T));
    write(fout, Llong(@tmp@));
    // write dimension info
    write(fout, Llong(0));
    // write matrix data
    write(fout, s);
}

inline void save_matb(@T@_I s, Str_I varname, Str_I matb_file)
{
    Matb matb(matb_file, 'w');
    save(s, varname, matb);
    matb.close();
}
//%----------------------

// save() for containers
//% types = {'VecChar'; 'VecInt'; 'VecLlong'; 'VecDoub'; 'VecComp';
//%     'SvecChar'; 'SvecLlong'; 'SvecDoub'; 'SvecComp';
//%     'DvecLlong'; 'DvecDoub'; 'DvecComp'; 'CmatChar'; 'CmatInt';
//%     'CmatLlong'; 'CmatDoub'; 'CmatComp'; 'MatChar'; 'MatInt';
//%     'MatLlong'; 'MatDoub'; 'MatComp'; 'ScmatInt';
//%     'ScmatLlong'; 'ScmatDoub'; 'ScmatComp'; 'DcmatInt';
//%     'DcmatLlong'; 'DcmatDoub'; 'DcmatComp';
//%     'Cmat3Int'; 'Cmat3Llong'; 'Cmat3Doub'; 'Cmat3Comp';
//%     'Mat3Int'; 'Mat3Llong'; 'Mat3Doub'; 'Mat3Comp';
//%     'Cmat4Doub'; 'Cmat4Comp';
//% };
//%--------------------
//% Tv = varargin{:};
//% Ts = value_type(Tv);
//% Ndim = num2str(ndim(Tv));
//% numT = num2str(type_num(Ts));
inline void save(@Tv@_I v, Str_I varname, Matb_IO matb)
{
    if (matb.search(varname) >= 0)
        SLS_ERR("variable already exist: " + varname);
    ofstream &fout = matb.m_out;
    if (!fout.is_open())
        SLS_ERR("matb file not open!");
    // record position
    matb.m_name.push_back(varname);
    ++matb.m_n; matb.m_ind.push_back(fout.tellp());
    // write variable name info
    write(fout, size(varname)); write(fout, varname);
    // write data type info
    write(fout, Llong(@numT@));
    // write shape info
    write(fout, Llong(@Ndim@));
    // write matrix data
//% if Ndim == '1'
    write(fout, v.size());
    for (Long i = 0; i < v.size(); ++i)
        write(fout, v[i]);
//% elseif Ndim == '2'
    write(fout, v.n1()); write(fout, v.n2());
    for (Long j = 0; j < v.n2(); ++j)
        for (Long i = 0; i < v.n1(); ++i)
            write(fout, v(i, j));
//% elseif Ndim == '3'
    write(fout, v.n1()); write(fout, v.n2()); write(fout, v.n3());
    for (Long k = 0; k < v.n3(); ++k)
        for (Long j = 0; j < v.n2(); ++j)
            for (Long i = 0; i < v.n1(); ++i)
                write(fout, v(i, j, k));
//% elseif Ndim == '4'
    write(fout, v.n1()); write(fout, v.n2());
    write(fout, v.n3()); write(fout, v.n4());
    for (Long l = 0; l < v.n4(); ++l)
        for (Long k = 0; k < v.n3(); ++k)
            for (Long j = 0; j < v.n2(); ++j)
                for (Long i = 0; i < v.n1(); ++i)
                    write(fout, v(i, j, k, l));
//% end
}

inline void save_matb(@Tv@_I v, Str_I varname, Str_I matb_file)
{
    Matb matb(matb_file, 'w');
    save(v, varname, matb);
    matb.close();
}
//%----------------------

// save string as VecChar
inline void save(Str_I str, Str_I varname, Matb_IO matb)
{
    if (matb.search(varname) >= 0)
        SLS_ERR("variable already exist: " + varname);
    SvecChar_c sli; sli.set(str.data(), str.size());
    save(sli, varname, matb);
}


// read matb files
// return 0 if successful, -1 if variable not found
//% types = {'Char'; 'Int'; 'Llong'; 'Doub'; 'Comp';
//%         'VecChar'; 'VecInt'; 'VecLlong'; 'VecDoub'; 'VecComp';
//%         'MatInt'; 'MatLlong'; 'MatDoub'; 'MatComp';
//%         'CmatInt'; 'CmatLlong'; 'CmatDoub'; 'CmatComp';
//%         'Cmat3Int'; 'Cmat3Llong'; 'Cmat3Doub'; 'Cmat3Comp';
//%         'Cmat4Doub'; 'Cmat4Comp';
//% };
//%---------------------
//% T = varargin{:};
//% Ts = value_type(T);
//% numTs = num2str(type_num(Ts));
//% if ~(is_Char(Ts) || is_Int(Ts) || is_Llong(Ts) || is_Doub(Ts) || is_Comp(Ts))
//%     error('not implemented!');
//% end
//% if is_scalar(T)
inline void load(@T@_O s, Str_I varname, Matb_IO matb)
{
    ifstream &fin = matb.m_in;
    Long i = matb.search(varname);
    if (i < 0)
        throw Str("variable not found!");
    fin.seekg(matb.data_pos(i));

    if (@numTs@ < matb.m_type[i])
        SLS_ERR("wrong type!");
    if (matb.m_size[i].size() != 0)
        SLS_ERR("wrong dimension!");

    read(fin, s);
}
//% elseif is_Vec(T) == 1
inline void load(@T@_O v, Str_I varname, Matb_IO matb)
{
    ifstream &fin = matb.m_in;
    Long i = matb.search(varname);
    if (i < 0)
        throw Str("variable not found!");
    fin.seekg(matb.data_pos(i));

    if (@numTs@ < matb.m_type[i])
        SLS_ERR("wrong type!");
    if (matb.m_size[i].size() != 1)
        SLS_ERR("wrong dimension!");

    Long n = matb.m_size[i][0]; v.resize(n);
    // read var data
    for (Long i = 0; i < n; ++i)
        read(fin, v[i]);
}
//% elseif is_Mat(T) || is_Cmat(T)
inline void load(@T@_O a, Str_I varname, Matb_IO matb)
{
    Long i, j, m, n;
    ifstream &fin = matb.m_in;
    i = matb.search(varname);
    if (i < 0)
        throw Str("variable not found!");
    fin.seekg(matb.data_pos(i));

    if (@numTs@ < matb.m_type[i])
        SLS_ERR("wrong type!");
    if (matb.m_size[i].size() != 2)
        SLS_ERR("wrong dimension!");

    m = matb.m_size[i][0]; n = matb.m_size[i][1]; a.resize(m, n);
    // read var data
    for (j = 0; j < n; ++j)
        for (i = 0; i < m; ++i)
            read(fin, a(i, j));
}
//% elseif is_Mat3(T) || is_Cmat3(T)
inline void load(@T@_O a, Str_I varname, Matb_IO matb)
{
    Long i, j, k, m, n, q;
    ifstream &fin = matb.m_in;
    i = matb.search(varname);
    if (i < 0)
        throw Str("variable not found!");
    fin.seekg(matb.data_pos(i));

    if (@numTs@ < matb.m_type[i])
        SLS_ERR("wrong type!");
    if (matb.m_size[i].size() != 3)
        SLS_ERR("wrong dimension!");
    
    m = matb.m_size[i][0]; n = matb.m_size[i][1]; q = matb.m_size[i][2];
    a.resize(m, n, q);
    // read var data
    for (k = 0; k < q; ++k)
        for (j = 0; j < n; ++j)
            for (i = 0; i < m; ++i)
                read(fin, a(i, j, k));
}
//% elseif is_Cmat4(T)
inline void load(@T@_O a, Str_I varname, Matb_IO matb)
{
    Long i, j, k, l, N1, N2, N3, N4;
    ifstream &fin = matb.m_in;
    i = matb.search(varname);
    if (i < 0)
        throw Str("variable not found!");
    fin.seekg(matb.data_pos(i));

    if (@numTs@ < matb.m_type[i])
        SLS_ERR("wrong type!");
    if (matb.m_size[i].size() != 4)
        SLS_ERR("wrong dimension!");
    
    N1 = matb.m_size[i][0]; N2 = matb.m_size[i][1]; N3 = matb.m_size[i][2]; N4 = matb.m_size[i][3];
    a.resize(N1, N2, N3, N4);
    // read var data
    for (l = 0; l < N4; ++l)
        for (k = 0; k < N3; ++k)
            for (j = 0; j < N2; ++j)
                for (i = 0; i < N1; ++i)
                    read(fin, a(i, j, k, l));
}
//% else
//%     disp(T); error('not implemented!');
//% end

//% % read one var from one file
inline void load_matb(@T@_O var, Str_I varname, Str_I matb_file)
{
    Matb matb(matb_file, 'r');
    load(var, varname, matb);
    matb.close();
}
//%------------------------

// convert a single .matb file to .matt file
// if replace = false and destination exists, then nothing will be done
// return 0 if successful, -1 if skipped
inline Long matb2matt(Str_I matb_name, Bool_I replace = false)
{
    Long N = matb_name.size();
    Str matt_name;
    if (matb_name.substr(N-5, 5) != ".matb")
        SLS_ERR(matb_name + " : file does not have .matb extension!");
    matt_name = matb_name.substr(0, N - 1) + "t";
    if (file_exist(matt_name)) {
        if (replace)
            file_remove(matt_name);
        else
            return -1;
    }

    Matb matb(matb_name, 'r');
    Matt matt(matt_name, "w");
    Long Nvar = matb.m_name.size();
    for (Long i = 0; i < Nvar; ++i) {
        const Long &type = matb.m_type[i];
        const Str &name = matb.m_name[i];
        const Long Ndim = matb.m_size[i].size();
        if (Ndim == 0) {
// scalars
//% types = {
//%     'Char'; 'Int'; 'Llong'; 'Doub'; 'Comp';
//% };
//%----------------------
//% T = varargin{:};
//% numT = num2str(type_num(T));
            if (type == @numT@) {
                @T@ s;
                load(s, name, matb); save(s, name, matt);
                continue;
            }
//%---------------------
            SLS_ERR("not implemented!");
        }

// containers
//% types = {
//%     'VecChar'; 'VecInt'; 'VecLlong'; 'VecDoub'; 'VecComp';
//%     'CmatInt'; 'CmatLlong'; 'CmatDoub'; 'CmatComp';
//%     'Cmat3Int'; 'Cmat3Llong'; 'Cmat3Doub'; 'Cmat3Comp';
//%     'Cmat4Doub'; 'Cmat4Comp';
//% };
//%----------------------
//% T = varargin{:};
//% Ndim = num2str(ndim(T));
//% Ts = value_type(T);
//% numTs = num2str(type_num(Ts));
        if (type == @numTs@ && Ndim == @Ndim@) {
//% if Ndim == '1'
            @T@ v(0);
//% elseif Ndim == '2'
            @T@ v(0, 0);
//% elseif Ndim == '3'
            @T@ v(0, 0, 0);
//% elseif Ndim == '4'
            @T@ v(0, 0, 0, 0);
//% else
//%         error('not implemented!');
//% end
            load(v, name, matb); save(v, name, matt);
            continue;
        }
//%--------------------
    }
    matb.close(); matt.close();
    return 0;
}

// convert a single .matb file to .matt file
// if replace = false and destination exists, then nothing will be done
// return 0 if successful, -1 if skipped
inline Long matt2matb(Str_I matt_name, Bool_I replace = false)
{
    Long N = matt_name.size();
    Str matb_name;
    if (matt_name.substr(N-5, 5) != ".matt")
        SLS_ERR(matt_name + " : file does not have .matt extension!");
    matb_name = matt_name.substr(0, N - 1) + "b";
    if (file_exist(matb_name)) {
        if (replace)
            file_remove(matb_name);
        else
            return -1;
    }
    Matt matt(matt_name, "r");
    Matb matb(matb_name, 'w');
    Long Nvar = matt.m_name.size();
    for (Long i = 0; i < Nvar; ++i) {
        const Long &type = matt.m_type[i];
        const Str &name = matt.m_name[i];
        const Long Ndim = matt.m_size[i].size();
        if (Ndim == 0) {
// scalars
//% types = {
//%     'Char'; 'Int'; 'Llong'; 'Doub'; 'Comp';
//% };
//%----------------------
//% T = varargin{:};
//% numT = num2str(type_num(T));
            if (type == @numT@) {
                @T@ s{};
                load(s, name, matt); save(s, name, matb);
                continue;
            }
//%---------------------
            SLS_ERR("not implemented!");
        }

// containers
//% types = {
//%     'VecChar'; 'VecInt'; 'VecLlong'; 'VecDoub'; 'VecComp';
//%     'CmatInt'; 'CmatLlong'; 'CmatDoub'; 'CmatComp';
//%     'Cmat3Int'; 'Cmat3Llong'; 'Cmat3Doub'; 'Cmat3Comp';
//%     'Cmat4Doub'; 'Cmat4Comp';
//% };
//%----------------------
//% T = varargin{:};
//% Ndim = num2str(ndim(T));
//% Ts = value_type(T);
//% numTs = num2str(type_num(Ts));
        if (type == @numTs@ && Ndim == @Ndim@) {
//% if Ndim == '1'
            @T@ v(0);
//% elseif Ndim == '2'
            @T@ v(0, 0);
//% elseif Ndim == '3'
            @T@ v(0, 0, 0);
//% elseif Ndim == '4'
            @T@ v(0, 0, 0, 0);
//% else
//%         error('not implemented!');
//% end
            load(v, name, matt); save(v, name, matb);
            continue;
        }
//%--------------------
    }
    matt.close(); matb.close();
    return 0;
}

} // namespace slisc
