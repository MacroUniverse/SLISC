#pragma once
#include "compare.h"
#include "band_arith.h"

#ifdef SLS_USE_LAPACKE
namespace slisc {
//not the most accurate, see also ?gerfs
//% tem('inv_mat', {'CmatDoub'; 'ScmatDoub';});
//%---------------------------------
//% T = varargin{:};
//% Ts = val_t(T);
inline void inv_mat(@T@_IO A)
{
#ifdef SLS_CHECK_SHAPES
	if (A.n0() != A.n1())
	    SLS_ERR("wrong shape!");
#endif
	Long N = A.n0();
	VecLong ipiv(N);
//% if is_dense_mat(T) && is_Doub(Ts)
	LAPACKE_dgetrf(LAPACK_COL_MAJOR, N, N, A.p(), N, ipiv.p());
	LAPACKE_dgetri(LAPACK_COL_MAJOR, N, A.p(), N, ipiv.p());
//% elseif is_dense_mat(T) && is_Comp(Ts)
	LAPACKE_zgetrf(LAPACK_COL_MAJOR, N, N, A.p(), N, ipiv.p());
	LAPACKE_zgetri(LAPACK_COL_MAJOR, N, (double _Complex*)A.p(), N, (double _Complex*)ipiv.p());
//% else
//%     error('not implemented (1)!');
//% end
}
//%------------------------ 

// solution to linear system with general coefficient matrix A and multiple right-hand sides.
// ####### Not Thread Safe ######
//% tem('lin_eq', {
//% 'CmatDoub' 'CmatDoub';
//% 'ScmatDoub' 'CmatDoub';
//% 'ScmatDoub' 'ScmatDoub';
//% 'VecDoub' 'CmatDoub';
//% 'SvecDoub' 'CmatDoub';
//% 'VecComp' 'CmatComp';
//% 'SvecComp' 'ScmatComp';
//% });
//%---------------------
//% [Tx, Ta] = varargin{:};
//% Tsx = val_t(Tx); Tsa = val_t(Ta);
//% CmatTsa = ['Cmat' Tsa];
inline void lin_eq(@Tx@_IO x, @Ta@_I a)
{
#ifdef SLS_CHECK_SHAPES
//% if is_dense_vec(Tx)
	if (a.n0() != a.n1() || a.n1() != x.size())
//% else
	if (a.n0() != a.n1() || a.n1() != x.n0())
//% end
	    SLS_ERR("wrong shape!");
#endif
	static @CmatTsa@ a1(a.n0(), a.n1());
	static VecLong ipiv(a.n0());
//%     req('shape_cmp', {CmatTsa Ta});
	if (!shape_cmp(a1, a))
	    a1.resize(a.n0(), a.n1());
//% req('copy(v,v)', {CmatTsa Ta});
	copy(a1, a);
	if (a.n0() > ipiv.size())
	    ipiv.resize(a.n0());
	Long lda = a1.n0();
//% if is_Cmat(Tx) || is_Scmat(Tx)
	Long ldx = x.n0(), nrhs = x.n1();
//% elseif is_Dcmat(Tx)
	Long ldx = x.lda(), nrhs = x.n1();
//% elseif is_dense_vec(Tx)
	Long ldx = x.size(), nrhs = 1;
//% end

//% if is_Doub(Tsa) && is_Doub(Tsx)
	Long ret = LAPACKE_dgesv(LAPACK_COL_MAJOR, a1.n0(), nrhs, a1.p(), lda, ipiv.p(), x.p(), ldx);
//% elseif is_Comp(Tsa) && is_Comp(Tsx)
	Long ret = LAPACKE_zgesv(LAPACK_COL_MAJOR, a1.n0(), nrhs, (double _Complex*)a1.p(), lda, ipiv.p(), (double _Complex*)x.p(), ldx);
//% else
//%     disp(Tx); disp(Ta);
//%     error('not implemented (2)');
//% end
	if (ret != 0) {
	    cout << "LAPACK returned " << ret << endl;
	    SLS_ERR("something wrong!");
	}
}
//%---------------------

// solution to linear system with general coefficient matrix A and multiple right-hand sides.
// A will be changed to LU matrix
// ipiv: integer work space of size a.n0()
//% tem('lin_eq2', {
//% 'CmatDoub' 'CmatDoub' 'SvecLong';
//% 'ScmatDoub' 'CmatDoub' 'SvecLong';
//% 'ScmatDoub' 'ScmatDoub' 'SvecLong';
//% 'VecDoub' 'CmatDoub' 'SvecLong';
//% 'SvecDoub' 'CmatDoub' 'SvecLong';
//% 'VecComp' 'CmatComp' 'SvecLong';
//% 'SvecComp' 'ScmatComp' 'SvecLong';
//% });
//%---------------------
//% [Tx, Ta, Ti] = varargin{:};
//% Tsx = val_t(Tx); Tsa = val_t(Ta);
//% CmatTsa = ['Cmat' Tsa];
inline void lin_eq(@Tx@_IO x, @Ta@_IO a, @Ti@_IO ipiv)
{
#ifdef SLS_CHECK_SHAPES
//% if is_dense_vec(Tx)
	if (a.n0() != a.n1() || a.n1() != x.size())
//% else
	if (a.n0() != a.n1() || a.n1() != x.n0())
//% end
	    SLS_ERR("wrong shape!");
	if (ipiv.size() != a.n0())
	    SLS_ERR("wrong shape!");
#endif
	Long lda = a.n0();
//% if is_Cmat(Tx) || is_Scmat(Tx)
	Long ldx = x.n0(), nrhs = x.n1();
//% elseif is_Dcmat(Tx)
	Long ldx = x.lda(), nrhs = x.n1();
//% elseif is_dense_vec(Tx)
	Long ldx = x.size(), nrhs = 1;
//% end

//% if is_Doub(Tsa) && is_Doub(Tsx)
	Long ret = LAPACKE_dgesv(LAPACK_COL_MAJOR, a.n0(), nrhs, a.p(), lda, ipiv.p(), x.p(), ldx);
//% elseif is_Comp(Tsa) && is_Comp(Tsx)
	Long ret = LAPACKE_zgesv(LAPACK_COL_MAJOR, a.n0(), nrhs, (double _Complex*)a.p(), lda, ipiv.p(), (double _Complex*)x.p(), ldx);
//% else
//%     disp(Tx); disp(Ta);
//%     error('not implemented (2)');
//% end
	if (ret != 0) {
	    cout << "LAPACK returned " << ret << endl;
	    SLS_ERR("something wrong!");
	}
}
//%---------------------

// solution to linear system with band coefficient matrix A and multiple right-hand sides.
// ####### Not Thread Safe ######
//% tem('lin_eq3', {
//%     'VecDoub' 'CbandDoub';
//%     'VecComp' 'CbandComp';
//%     'SvecComp' 'CbandComp';
//% });
//%---------------------
//% [Tx, Ta] = varargin{:};
//% Tsx = val_t(Tx); Tsa = val_t(Ta);
//% CbandTsa = ['Cband' Tsa];
inline void lin_eq(@Tx@_IO x, @Ta@_I a)
{
#ifdef SLS_CHECK_SHAPES
//% if is_dense_vec(Tx)
	if (a.n0() != a.n1() || a.n1() != x.size())
//% else
	if (a.n0() != a.n1() || a.n1() != x.n0())
//% end
	    SLS_ERR("wrong shape!");
#endif
	static @CbandTsa@ a1(a.n0(), a.n1(), a.nup(), a.nlow(), a.nup() + 2*a.nlow() + 1, a.nlow() + a.nup());
	static VecLong ipiv(a.n0());
	if (a1.lda() < a.nup() + 2*a.nlow() + 1 || a1.n1() != a.n1())
	    a1.resize(a.nup() + 2*a.nlow() + 1, a.n1());
//% req('copy(band,band)', {CbandTsa Ta});
	a1.shift(a.nlow() + a.nup()); copy(a1, a);
	if (a.n0() > ipiv.size())
	    ipiv.resize(a.n0());

	Long lda = a1.lda();
//% if is_Cmat(Tx) || is_Scmat(Tx)
	Long ldx = x.n0(), nrhs = x.n1();
//% elseif is_Dcmat(Tx)
	Long ldx = x.lda(), nrhs = x.n1();
//% elseif is_dense_vec(Tx)
	Long ldx = x.size(), nrhs = 1;
//% end

//% if is_Doub(Tsx) && is_Doub(Tsa)
	Long ret = LAPACKE_dgbsv(LAPACK_COL_MAJOR, a1.n0(), a1.nlow() , a1.nup(), nrhs, a1.p(), lda, ipiv.p(), x.p(), ldx);
//% elseif is_Comp(Tsx) && is_Comp(Tsa)
	Long ret = LAPACKE_zgbsv(LAPACK_COL_MAJOR, a1.n0(), a1.nlow() , a1.nup(), nrhs, (double _Complex*)a1.p(), lda, ipiv.p(), (double _Complex*)x.p(), ldx);
//% else
//%     disp(Tx); disp(Ta);
//%     error('not implemented (2)');
//% end
	if (ret != 0) {
	    cout << "LAPACK returned " << ret << endl;
	    SLS_ERR("something wrong!");
	}
}
//%---------------------

// solution to linear system with band coefficient matrix A and multiple right-hand sides.
// matrix will be replaced with LU decomp
// use the following to generate input data
// VecLong ipiv(a.n0());
// @Ta@ a1(a.n0(), a.n1(), a.nup(), a.nlow(), a.nup() + 2*a.nlow() + 1, a.nlow() + a.nup());
// copy(a1, a);
//% tem('lin_eq4', {
//%     'VecDoub' 'CbandDoub' 'VecLong';
//%     'VecComp' 'CbandComp' 'VecLong';
//%     'SvecComp' 'CbandComp' 'SvecLong';
//%     'VecQcomp' 'CbandQcomp' 'VecLong';
//%     'SvecQcomp' 'CbandQcomp' 'SvecLong';
//%     'SvecQcomp' 'CbandQcomp' 'SvecLong';
//%     'ScmatComp' 'CbandComp' 'SvecLong';
//% });
//%---------------------
//% [Tx, Ta, Ti] = varargin{:};
//% Tsx = val_t(Tx); Tsa = val_t(Ta);
//% if is_Qcomp(Tsx) && is_Qcomp(Tsa)
#ifdef SLS_USE_MPLAPACK
//% end
inline void lin_eq(@Tx@_IO x, @Ta@_IO a1, @Ti@_IO ipiv)
{
#ifdef SLS_CHECK_SHAPES
//% if is_dense_vec(Tx)
	if (a1.n0() != a1.n1() || a1.n1() != x.size())
//% else
	if (a1.n0() != a1.n1() || a1.n1() != x.n0())
//% end
	    SLS_ERR("wrong shape!");
	if (a1.lda() < a1.nup() + 2*a1.nlow() + 1 || a1.idiag() < a1.nup() + a1.nup())
	    SLS_ERR("wrong shape: lda < nup+2nlow+1 || idiag < nup+nlow !");
#endif
	Long lda = a1.lda();
//% if is_Cmat(Tx) || is_Scmat(Tx)
	Long ldx = x.n0(), nrhs = x.n1();
//% elseif is_Dcmat(Tx)
	Long ldx = x.lda(), nrhs = x.n1();
//% elseif is_dense_vec(Tx)
	Long ldx = x.size(), nrhs = 1;
//% end
//% if is_Doub(Tsx) && is_Doub(Tsa)
	Long ret = LAPACKE_dgbsv(LAPACK_COL_MAJOR, a1.n0(), a1.nlow() , a1.nup(), nrhs, a1.p(), lda, ipiv.p(), x.p(), ldx);
//% elseif is_Comp(Tsx) && is_Comp(Tsa)
	Long ret = LAPACKE_zgbsv(LAPACK_COL_MAJOR, a1.n0(), a1.nlow() , a1.nup(), nrhs, (double _Complex*)a1.p(), lda, ipiv.p(), (double _Complex*)x.p(), ldx);
//% elseif is_Qcomp(Tsx) && is_Qcomp(Tsa)
	static_assert(sizeof(Llong)==sizeof(mplapackint), "unexpected!");
	mplapackint ret; Cgbsv(a1.n0(), a1.nlow(), a1.nup(), nrhs, a1.p(), lda, (mplapackint*)ipiv.p(), x.p(), ldx, ret);
//% else
//%     disp(Tx); disp(Ta);
//%     error('not implemented (2)');
//% end
	if (ret != 0) {
	    cout << "LAPACK returned " << ret << endl;
	    SLS_ERR("something wrong!");
	}
}
//% if is_Qcomp(Tsx) && is_Qcomp(Tsa)
#endif
//% end
//%---------------------
} // namespace slisc
#endif
