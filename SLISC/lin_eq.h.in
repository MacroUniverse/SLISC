#pragma once
#include "compare.h"
#include "band_arith.h"

#ifdef SLS_USE_LAPACKE
namespace slisc {
//not the most accurate, see also ?gerfs
//% types = {'CmatDoub'; 'ScmatDoub';};
//%---------------------------------
//% T = varargin{:};
//% Ts = value_type(T);
inline void inv_mat(@T@_IO A)
{
#ifdef SLS_CHECK_SHAPES
    if (A.n1() != A.n2())
        SLS_ERR("wrong shape!");
#endif
    Int N = (Int)A.n1();
    VecInt ipiv(N);
//% if is_dense_mat(T) && is_Doub(Ts)
    LAPACKE_dgetrf(LAPACK_COL_MAJOR, N, N, A.ptr(), N, ipiv.ptr());
    LAPACKE_dgetri(LAPACK_COL_MAJOR, N, A.ptr(), N, ipiv.ptr());
//% elseif is_dense_mat(T) && is_Comp(Ts)
    LAPACKE_zgetrf(LAPACK_COL_MAJOR, N, N, A.ptr(), N, ipiv.ptr());
    LAPACKE_zgetri(LAPACK_COL_MAJOR, N, (double _Complex*)A.ptr(), N, (double _Complex*)ipiv.ptr());
//% else
//%     error('not implemented (1)!');
//% end
}
//%------------------------ 

// solution to linear system with general coefficient matrix A and multiple right-hand sides.
// ####### Not Thread Safe ######
//% types = {
//% 'CmatDoub' 'CmatDoub';
//% 'ScmatDoub' 'CmatDoub';
//% 'ScmatDoub' 'ScmatDoub';
//% 'VecDoub' 'CmatDoub';
//% 'SvecDoub' 'CmatDoub';
//% 'VecComp' 'CmatComp';
//% 'SvecComp' 'ScmatComp';
//% };
//%---------------------
//% [Tx, Ta] = varargin{:};
//% Tsx = value_type(Tx); Tsa = value_type(Ta);
//% CmatTsa = ['Cmat' Tsa];
inline void lin_eq(@Tx@_IO x, @Ta@_I a)
{
#ifdef SLS_CHECK_SHAPES
//% if is_dense_vec(Tx)
    if (a.n1() != a.n2() || a.n2() != x.size())
//% else
    if (a.n1() != a.n2() || a.n2() != x.n1())
//% end
        SLS_ERR("wrong shape!");
#endif
    static @CmatTsa@ a1(a.n1(), a.n2());
    static VecInt ipiv(a.n1());
    if (!shape_cmp(a1, a))
        a1.resize(a.n1(), a.n2());
    copy(a1, a);
    if (a.n1() > ipiv.size())
        ipiv.resize(a.n1());
    Int lda = a1.n1();
//% if is_Cmat(Tx) || is_Scmat(Tx)
    Int ldx = x.n1(), nrhs = x.n2();
//% elseif is_Dcmat(Tx)
    Int ldx = x.lda(), nrhs = x.n2();
//% elseif is_dense_vec(Tx)
    Int ldx = x.size(), nrhs = 1;
//% end

//% if is_Doub(Tsa) && is_Doub(Tsx)
    Int ret = LAPACKE_dgesv(LAPACK_COL_MAJOR, a1.n1(), nrhs, a1.ptr(), lda, ipiv.ptr(), x.ptr(), ldx);
//% elseif is_Comp(Tsa) && is_Comp(Tsx)
    Int ret = LAPACKE_zgesv(LAPACK_COL_MAJOR, a1.n1(), nrhs, (double _Complex*)a1.ptr(), lda, ipiv.ptr(), (double _Complex*)x.ptr(), ldx);
//% else
//%     disp(Tx); disp(Ta);
//%     error('not implemented (2)');
//% end
    if (ret != 0) {
        cout << "LAPACK returned " << ret << endl;
        SLS_ERR("something wrong!");
    }
}
//%---------------------

// solution to linear system with general coefficient matrix A and multiple right-hand sides.
// A will be changed to LU matrix
// ipiv: integer work space of size a.n1()
//% types = {
//% 'CmatDoub' 'CmatDoub' 'SvecInt';
//% 'ScmatDoub' 'CmatDoub' 'SvecInt';
//% 'ScmatDoub' 'ScmatDoub' 'SvecInt';
//% 'VecDoub' 'CmatDoub' 'SvecInt';
//% 'SvecDoub' 'CmatDoub' 'SvecInt';
//% 'VecComp' 'CmatComp' 'SvecInt';
//% 'SvecComp' 'ScmatComp' 'SvecInt';
//% };
//%---------------------
//% [Tx, Ta, Ti] = varargin{:};
//% Tsx = value_type(Tx); Tsa = value_type(Ta);
//% CmatTsa = ['Cmat' Tsa];
inline void lin_eq(@Tx@_IO x, @Ta@_IO a, @Ti@_IO ipiv)
{
#ifdef SLS_CHECK_SHAPES
//% if is_dense_vec(Tx)
    if (a.n1() != a.n2() || a.n2() != x.size())
//% else
    if (a.n1() != a.n2() || a.n2() != x.n1())
//% end
        SLS_ERR("wrong shape!");
    if (ipiv.size() != a.n1())
        SLS_ERR("wrong shape!");
#endif
    Int lda = a.n1();
//% if is_Cmat(Tx) || is_Scmat(Tx)
    Int ldx = x.n1(), nrhs = x.n2();
//% elseif is_Dcmat(Tx)
    Int ldx = x.lda(), nrhs = x.n2();
//% elseif is_dense_vec(Tx)
    Int ldx = x.size(), nrhs = 1;
//% end

//% if is_Doub(Tsa) && is_Doub(Tsx)
    Int ret = LAPACKE_dgesv(LAPACK_COL_MAJOR, a.n1(), nrhs, a.ptr(), lda, ipiv.ptr(), x.ptr(), ldx);
//% elseif is_Comp(Tsa) && is_Comp(Tsx)
    Int ret = LAPACKE_zgesv(LAPACK_COL_MAJOR, a.n1(), nrhs, (double _Complex*)a.ptr(), lda, ipiv.ptr(), (double _Complex*)x.ptr(), ldx);
//% else
//%     disp(Tx); disp(Ta);
//%     error('not implemented (2)');
//% end
    if (ret != 0) {
        cout << "LAPACK returned " << ret << endl;
        SLS_ERR("something wrong!");
    }
}
//%---------------------

// solution to linear system with band coefficient matrix A and multiple right-hand sides.
// ####### Not Thread Safe ######
//% types = {
//%     'VecDoub' 'CbandDoub';
//%     'VecComp' 'CbandComp';
//%     'SvecComp' 'CbandComp';
//% };
//%---------------------
//% [Tx, Ta] = varargin{:};
//% Tsx = value_type(Tx); Tsa = value_type(Ta);
//% CbandTsa = ['Cband' Tsa];
inline void lin_eq(@Tx@_IO x, @Ta@_I a)
{
#ifdef SLS_CHECK_SHAPES
//% if is_dense_vec(Tx)
    if (a.n1() != a.n2() || a.n2() != x.size())
//% else
    if (a.n1() != a.n2() || a.n2() != x.n1())
//% end
        SLS_ERR("wrong shape!");
#endif
    static @CbandTsa@ a1(a.n1(), a.n2(), a.nup(), a.nlow(), a.nup() + 2*a.nlow() + 1, a.nlow() + a.nup());
    static VecInt ipiv(a.n1());
    if (a1.lda() < a.nup() + 2*a.nlow() + 1 || a1.n2() != a.n2())
        a1.resize(a.nup() + 2*a.nlow() + 1, a.n2());
    a1.shift(a.nlow() + a.nup()); copy(a1, a);
    if (a.n1() > ipiv.size())
        ipiv.resize(a.n1());

    Int lda = a1.lda();
//% if is_Cmat(Tx) || is_Scmat(Tx)
    Int ldx = x.n1(), nrhs = x.n2();
//% elseif is_Dcmat(Tx)
    Int ldx = x.lda(), nrhs = x.n2();
//% elseif is_dense_vec(Tx)
    Int ldx = x.size(), nrhs = 1;
//% end

//% if is_Doub(Tsx) && is_Doub(Tsa)
    Int ret = LAPACKE_dgbsv(LAPACK_COL_MAJOR, a1.n1(), a1.nlow() , a1.nup(), nrhs, a1.ptr(), lda, ipiv.ptr(), x.ptr(), ldx);
//% elseif is_Comp(Tsx) && is_Comp(Tsa)
    Int ret = LAPACKE_zgbsv(LAPACK_COL_MAJOR, a1.n1(), a1.nlow() , a1.nup(), nrhs, (double _Complex*)a1.ptr(), lda, ipiv.ptr(), (double _Complex*)x.ptr(), ldx);
//% else
//%     disp(Tx); disp(Ta);
//%     error('not implemented (2)');
//% end
    if (ret != 0) {
        cout << "LAPACK returned " << ret << endl;
        SLS_ERR("something wrong!");
    }
}
//%---------------------

// solution to linear system with band coefficient matrix A and multiple right-hand sides.
// matrix will be replaced with LU decomp
// use the following to generate input data
// VecInt ipiv(a.n1());
// @Ta@ a1(a.n1(), a.n2(), a.nup(), a.nlow(), a.nup() + 2*a.nlow() + 1, a.nlow() + a.nup());
// copy(a1, a);
//% types = {
//%     'VecDoub' 'CbandDoub' 'VecInt';
//%     'VecComp' 'CbandComp' 'VecInt';
//%     'SvecComp' 'CbandComp' 'SvecInt';
//%     'ScmatComp' 'CbandComp' 'SvecInt';
//% };
//%---------------------
//% [Tx, Ta, Ti] = varargin{:};
//% Tsx = value_type(Tx); Tsa = value_type(Ta);
inline void lin_eq(@Tx@_IO x, @Ta@_IO a1, @Ti@_IO ipiv)
{
#ifdef SLS_CHECK_SHAPES
//% if is_dense_vec(Tx)
    if (a1.n1() != a1.n2() || a1.n2() != x.size())
//% else
    if (a1.n1() != a1.n2() || a1.n2() != x.n1())
//% end
        SLS_ERR("wrong shape!");
    if (a1.lda() < a1.nup() + 2*a1.nlow() + 1 || a1.idiag() < a1.nup() + a1.nup())
        SLS_ERR("wrong shape: lda < nup+2nlow+1 || idiag < nup+nlow !");
#endif
    Int lda = a1.lda();
//% if is_Cmat(Tx) || is_Scmat(Tx)
    Int ldx = x.n1(), nrhs = x.n2();
//% elseif is_Dcmat(Tx)
    Int ldx = x.lda(), nrhs = x.n2();
//% elseif is_dense_vec(Tx)
    Int ldx = x.size(), nrhs = 1;
//% end
//% if is_Doub(Tsx) && is_Doub(Tsa)
    Int ret = LAPACKE_dgbsv(LAPACK_COL_MAJOR, a1.n1(), a1.nlow() , a1.nup(), nrhs, a1.ptr(), lda, ipiv.ptr(), x.ptr(), ldx);
//% elseif is_Comp(Tsx) && is_Comp(Tsa)
    Int ret = LAPACKE_zgbsv(LAPACK_COL_MAJOR, a1.n1(), a1.nlow() , a1.nup(), nrhs, (double _Complex*)a1.ptr(), lda, ipiv.ptr(), (double _Complex*)x.ptr(), ldx);
//% else
//%     disp(Tx); disp(Ta);
//%     error('not implemented (2)');
//% end
    if (ret != 0) {
        cout << "LAPACK returned " << ret << endl;
        SLS_ERR("something wrong!");
    }
}
//%---------------------
} // namespace slisc
#endif
