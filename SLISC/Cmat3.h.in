// Cmat container
#pragma once
#include "Vbase.h"

namespace slisc {
//% types = {'Char'; 'Int'; 'Llong'; 'Doub'; 'Comp';};
//%----------------------------------------
//% T = varargin{:};
//% Cmat3T = ['Cmat3' T];
//% VbaseT = ['Vbase' T];
class @Cmat3T@ : public @VbaseT@
{
private:
    typedef @VbaseT@ Base;
    using Base::m_p;
    using Base::m_N;
    Long m_N1;
    Long m_N2;
    Long m_N3;
public:
    typedef @T@ value_type;
    using Base::operator();
    using Base::ptr;
    @Cmat3T@(Long_I N1, Long_I N2, Long_I N3);
    @Cmat3T@(const @Cmat3T@ &rhs) = delete;
    @Cmat3T@ & operator=(const @Cmat3T@ &rhs) = delete;
    void operator<<(@Cmat3T@ &rhs); // move data and rhs.resize(0, 0, 0)
    void resize(Long_I N1, Long_I N2, Long_I N3);
    @T@ & operator()(Long_I i, Long_I j, Long_I k);    //subscripting: pointer to row i
    const @T@ & operator()(Long_I i, Long_I j, Long_I k) const;
    Long n1() const;
    Long n2() const;
    Long n3() const;
};

inline @Cmat3T@::@Cmat3T@(Long_I N1, Long_I N2, Long_I N3) : Base(N1*N2*N3), m_N1(N1), m_N2(N2), m_N3(N3) {}

inline void @Cmat3T@::operator<<(@Cmat3T@ &rhs)
{
    m_N1 = rhs.m_N1; m_N2 = rhs.m_N2; m_N3 = rhs.m_N3;
    rhs.m_N1 = rhs.m_N2 = rhs.m_N3 = 0;
    Base::operator<<(rhs);
}

inline void @Cmat3T@::resize(Long_I N1, Long_I N2, Long_I N3)
{
    if (N1 != m_N1 || N2 != m_N2 || N3 != m_N3) {
        Base::resize(N1*N2*N3);
        m_N1 = N1; m_N2 = N2; m_N3 = N3;
    }
}

inline @T@ & @Cmat3T@::operator()(Long_I i, Long_I j, Long_I k)
{
#ifdef SLS_CHECK_BOUNDS
    if (i < 0 || i >= m_N1 || j < 0 || j >= m_N2 || k < 0 || k >= m_N3)
        SLS_ERR("Matrix subscript out of bounds");
#endif
    return m_p[i + m_N1*j + m_N1*m_N2*k];
}

inline const @T@ & @Cmat3T@::operator()(Long_I i, Long_I j, Long_I k) const
{
#ifdef SLS_CHECK_BOUNDS
    if (i < 0 || i >= m_N1 || j < 0 || j >= m_N2 || k < 0 || k >= m_N3)
        SLS_ERR("Matrix subscript out of bounds");
#endif
    return m_p[i + m_N1*j + m_N1*m_N2*k];
}

inline Long @Cmat3T@::n1() const {
    return m_N1;
}

inline Long @Cmat3T@::n2() const {
    return m_N2;
}

inline Long @Cmat3T@::n3() const {
    return m_N3;
}

//% if is_Long(T)
#ifdef SLS_USE_INT_AS_LONG
typedef Cmat3Int Cmat3Long;
#else
typedef Cmat3Llong Cmat3Long;
#endif
//% else
typedef const @Cmat3T@ & @Cmat3T@_I;
typedef @Cmat3T@ & @Cmat3T@_O, & @Cmat3T@_IO;
//% end
//%--------------------------------
} // namespace slisc
