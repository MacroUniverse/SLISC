// Cmat container
#pragma once
#include "Vbase.h"

namespace slisc {
//% types = {
//%     'Char'; 'Int'; 'Llong'; 'Long';
//%     'Float'; 'Doub'; 'Ldoub';
//%     'Fcomp'; 'Comp'; 'Lcomp';
//%     'Fimag'; 'Imag'; 'Limag';};
//%----------------------------------------
//% T = varargin{:};
//% Cmat3T = ['Cmat3' T];
//% VbaseT = ['Vbase' T];
//% if is_Long(T)
#ifdef SLS_USE_INT_AS_LONG
typedef Cmat3Int Cmat3Long;
#else
typedef Cmat3Llong Cmat3Long;
#endif
//% else
class @Cmat3T@ : public @VbaseT@
{
protected:
    typedef @VbaseT@ Base;
    Long m_N1, m_N2, m_N3;
public:
    typedef @T@ value_type;
    @Cmat3T@(): m_N1(0), m_N2(0), m_N3(0) {};
    @Cmat3T@(Long_I N1, Long_I N2, Long_I N3);
    @Cmat3T@(const @Cmat3T@ &rhs); // copy constructor
    @Cmat3T@ & operator=(const @Cmat3T@ &rhs) = delete;
    void operator<<(@Cmat3T@ &rhs); // move data and rhs.resize(0, 0, 0)
    void resize(Long_I N1, Long_I N2, Long_I N3);
    void reshape(Long_I N1, Long_I N2, Long_I N3);
    @T@ & operator()(Long_I i, Long_I j, Long_I k);    //subscripting: pointer to row i
    const @T@ & operator()(Long_I i, Long_I j, Long_I k) const;
    Long n1() const;
    Long n2() const;
    Long n3() const;
};

inline @Cmat3T@::@Cmat3T@(Long_I N1, Long_I N2, Long_I N3) : Base(N1*N2*N3), m_N1(N1), m_N2(N2), m_N3(N3) {}

inline void @Cmat3T@::operator<<(@Cmat3T@ &rhs)
{
    m_N1 = rhs.m_N1; m_N2 = rhs.m_N2; m_N3 = rhs.m_N3;
    rhs.m_N1 = rhs.m_N2 = rhs.m_N3 = 0;
    Base::operator<<(rhs);
}

// copy constructor
inline @Cmat3T@::@Cmat3T@(const @Cmat3T@ &rhs): Base(rhs), m_N1(rhs.m_N1), m_N2(rhs.m_N2), m_N3(rhs.m_N3)
{
#ifdef SLS_NO_CPY_CONSTRUCTOR
    SLS_ERR("copy constructor forbidden!");
#endif
}

inline void @Cmat3T@::resize(Long_I N1, Long_I N2, Long_I N3)
{
    if (N1 != m_N1 || N2 != m_N2 || N3 != m_N3) {
        Base::resize(N1*N2*N3);
        m_N1 = N1; m_N2 = N2; m_N3 = N3;
    }
}

inline void @Cmat3T@::reshape(Long_I N1, Long_I N2, Long_I N3)
{
#ifdef SLS_CHECK_SHAPE
    if (N1 * N2 * N3 != m_N)
        SLS_ERR("@Cmat3T@ reshaping from ("+num2str(m_N1)+", "+num2str(m_N2)+", "+num2str(m_N3)
            +") to ("+num2str(N1)+", "+num2str(N2)+", "+num2str(N3)+"), element number not the same!");
#endif
    m_N1 = N1; m_N2 = N2; m_N3 = N3;
}

inline @T@ & @Cmat3T@::operator()(Long_I i, Long_I j, Long_I k)
{
#ifdef SLS_CHECK_BOUNDS
    if (i < 0 || i >= m_N1 || j < 0 || j >= m_N2 || k < 0 || k >= m_N3)
        SLS_ERR("@Cmat3T@ index ("+num2str(i)+", "+num2str(j)+", "+num2str(k)
            +") out of bounds: shape = ("+num2str(m_N1)+", "+num2str(m_N2)+", "+num2str(m_N3)+")");
#endif
    return m_p[i + m_N1*j + m_N1*m_N2*k];
}

inline const @T@ & @Cmat3T@::operator()(Long_I i, Long_I j, Long_I k) const
{
#ifdef SLS_CHECK_BOUNDS
    if (i < 0 || i >= m_N1 || j < 0 || j >= m_N2 || k < 0 || k >= m_N3)
        SLS_ERR("@Cmat3T@ index ("+num2str(i)+", "+num2str(j)+", "+num2str(k)
            +") out of bounds: shape = ("+num2str(m_N1)+", "+num2str(m_N2)+", "+num2str(m_N3)+")");
#endif
    return m_p[i + m_N1*j + m_N1*m_N2*k];
}

inline Long @Cmat3T@::n1() const {
    return m_N1;
}

inline Long @Cmat3T@::n2() const {
    return m_N2;
}

inline Long @Cmat3T@::n3() const {
    return m_N3;
}
//% end

typedef const @Cmat3T@ & @Cmat3T@_I;
typedef @Cmat3T@ & @Cmat3T@_O, & @Cmat3T@_IO;
//%--------------------------------
} // namespace slisc
