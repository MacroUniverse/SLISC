#pragma once
#include "complex_arith.h"
#include "Imag.h"

namespace slisc {

//% tem('sign', {'Char'; 'Int'; 'Llong'; 'Float'; 'Doub'; 'Ldoub'; 'Qdoub';});
//%-------------------------------
//% T = varargin{:};
constexpr @T@ sign(@T@_I s)
{ return s > @num(0,T)@ ? @num(1,T)@ : (s < @num(0,T)@ ? @num(-1,T)@ : @num(0,T)@); }
//%-------------------------------

//% tem('sign2', {'Char'; 'Int'; 'Llong'; 'Float'; 'Doub'; 'Ldoub'; 'Qdoub';});
//%-------------------------------
//% T = varargin{:};
inline @T@ sign(@T@_I a, @T@_I b)
{ return b >= 0 ? (a >= 0 ? a : -a) : (a >= 0 ? -a : a); }
//%------------------------

//% tem('isodd', {'Char'; 'Int'; 'Uint'; 'Llong'; 'Ullong';});
//%-------------------------------
//% T = varargin{:};
inline Bool isodd(@T@_I n) { return n & 1; }
//%------------------------

//% tem('ispow2', {'Char'; 'Int'; 'Llong'});
//%-------------------------------
//% T = varargin{:};
inline Bool ispow2(@T@_I n) { return (n&(n-1)) == 0; }
//%-----------------

//% tem('to_num', {'Char'; 'Int'; 'Llong'; 'Doub'; 'Ldoub'; 'Qdoub'; 'Comp'; 'Lcomp'; 'Qcomp';});
//%------------------------------
//% T = varargin{:};
//% if is_Bool(T) || is_Char(T)
inline Int to_num(@T@_I x) { return (Int)x; }
//% else
inline @T@ to_num(@T@_I x) { return x; }
//% end
//%------------------------

// modulus
// all mod variants satisfies "s = div(s,d)*d + mod(s,d)"
// however, "div" can have different truncation:
// 1. c++ operator "/" truncates towards 0, so "s = (s/d)*d + s%d", and s%d = s%abs(d)
// 2. "mod_fl()" div truncates towards negative direction
// 3. "mod_eu()" is equivalent to "mod_fl(s,abs(d))"
// d = 0 is undefined.
// when s,d > 0, all variants return the same result
// result of all variants differ by +-d
// see https://en.wikipedia.org/wiki/Modulo_operation
//% tem('mod', {
//%     'Int', 'Int';
//%     'Llong', 'Int';
//%     'Int', 'Llong';
//%     'Llong', 'Llong';
//%     'Float', 'Float';
//%     'Doub', 'Doub';
//% });
//%--------------------------
//% [T1, T2] = varargin{:};
//% T = promo_type(T1, T2);
//% if is_integral(T1) && is_integral(T2)
inline @T@ mod(@T1@_I i, @T2@_I n) { return i % n; }

inline @T@ mod_fl(@T1@_I i, @T2@_I n) { return (i % n + n) % n; }

inline @T@ mod_eu(@T1@_I i, @T2@_I n)
{
	@T@ ret = i % n;
	return ret < 0 ? ret + abs(n) : ret;
}
//% elseif is_fpt(T1) || is_fpt(T2)
inline @T@ mod(@T1@_I s, @T2@_I d)
{ return s - round(s/d) * d; }

// floating point version of "%", s = n * d + return
inline @T@ mod(Long_O n, @T1@_I s, @T2@_I d)
{
	n = round(s/d);
	return s - n * d;
}

inline @T@ mod_fl(@T1@_I s, @T2@_I d)
{ return s - floor(s/d) * d; }

// s = n * d + return
inline @T@ mod_fl(Long_O n, @T1@_I s, @T2@_I d)
{
	n = floor(s/d);
	return s - n * d;
}

inline @T@ mod_eu(@T1@_I s, @T2@_I d)
{
	Long n = s/d;
	@T@ r = s - n*d;
	return r < 0 ? r + abs(d) : r;
}

// s = n * d + return
inline @T@ mod_eu(Long_O n, @T1@_I s, @T2@_I d)
{
	n = s/d;
	@T@ r = s - n*d;
	if (r < 0) {
		r += abs(d);
		n -= sign(d);
	}
	return r;
}
//% else
//%     error('not implemented!');
//% end
//%------------------------

template <class T>
inline T sqr(const T &x) { return x * x; }

//% tem('abs2', {'Int'; 'Doub'; 'Comp'; });
//%-------------------------------
//% T = varargin{:};
//% if is_real(T)
inline @T@ abs2(@T@_I a) { return a * a; }
//% elseif is_comp(T)
//%     Tr = rm_comp(T);
inline @Tr@ abs2(@T@_I &a) { return sqr(real(a)) + sqr(imag(a)); }
//% end
//%------------------------

inline Doub factorial(Int_I n) {
	if (n > 170)
		SLS_ERR("n too large!");
	Doub ret = 1;
	for (Int i = 2; i <= n; ++i)
		ret *= i;
	return ret;
}

#ifdef SLS_USE_QUAD_MATH
inline Qdoub factorialq(Int_I n) {
	if (n > 1754)
		SLS_ERR("n too large!");
	Qdoub ret = 1;
	for (Int i = 2; i <= n; ++i)
		ret *= i;
	return ret;
}
#endif

template <class T>
inline Long size(const vector<T> &v) { return v.size(); }

template <class T>
inline Long size(const std::basic_string<T> &v) { return v.size(); }

// number of prime numbers smaller than n
// verified with leetcode 204
Long nprimes(Long_I N)
{
	if (N <= 2) return 0;
	if (N == 3) return 1;
	Long Nh = N/2;
	vector<bool> isprime(Nh, true); // isprime[i] for (2*i+1)
	for (Long i = 1; sqr(2*i+1) < N; ++i)
		if (isprime[i])
			for (Long step = 2*i+1, j = i+step; j < Nh; j += step)
				isprime[j] = false;
	Long ret = 2;
	for (Long i = 2; i < Nh; ++i)
		if (isprime[i])
			++ret;
	return ret;
}

// get all the prime numbers smaller than n
void primes(vecLong_O v, Long_I N)
{
	v.clear();
	if (N <= 2) return;
	v.push_back(2);
	if (N == 3) return;
	v.push_back(3);
	Long Nh = N/2;
	vector<bool> isprime(Nh, true); // isprime[i] for (2*i+1)
	for (Long i = 1; sqr(2*i+1) < N; ++i)
		if (isprime[i])
			for (Long step = 2*i+1, j = i+step; j < Nh; j += step)
				isprime[j] = false;
	for (Long i = 2; i < Nh; ++i)
		if (isprime[i])
			v.push_back(2*i+1);
}

//% tem('sinc', { 'Doub' });
//%---------------------
//% T = varargin{:}; if ~is_fpt(T), error('illegal type!'); end
inline @T@ sinc(@T@_I x) { return x == @num(0,T)@ ? @num(1,T)@ : sin(x) / x; }
//%---------------------

} // namespace slisc
