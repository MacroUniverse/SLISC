#pragma once
#include "arithmetic.h"
#include "unicode.h"

namespace slisc {
const Int def_disp_prec = 8;
//% types = {
//%     'vecInt'; 'vecLlong'; 'vecDoub'; 'vecComp';
//%     'VecInt'; 'VecLlong'; 'VecDoub'; 'VecComp';
//%     'MatLlong'; 'MatDoub'; 'MatComp';
//%     'CmatInt'; 'CmatLlong'; 'CmatDoub'; 'CmatComp';
//%     'Cmat3Int'; 'Cmat3Llong'; 'Cmat3Doub'; 'Cmat3Comp';
//%     'SvecLlong'; 'SvecDoub'; 'SvecComp';
//%     'DcmatInt'; 'DcmatLlong'; 'DcmatDoub'; 'DcmatComp';
//%     'CmobdInt'; 'CbandDoub'; 'CbandComp';
//%     'McooInt'; 'McooDoub'; 'McooComp';
//% };
//%-----------------------------
//% T = varargin{:};
//% if ndim(T) == 1
inline void disp(@T@_I v, Int_I precision = def_disp_prec)
{
    auto oldPrecision = cout.precision();
    cout.precision(precision);
    Long N = v.size();
    if (N == 0)
        cout << "empty";
    else
        for (Long i = 0; i < N; ++i) {
            cout << to_num(v[i]) << "   ";
        }
    cout << endl << endl;
    cout.precision(oldPrecision);
}
//% elseif ndim(T) == 2
inline void disp(@T@_I a, Int_I precision = def_disp_prec)
{
    Long i, j, m{ a.n1() }, n{ a.n2() };
    auto oldPrecision = cout.precision();
    cout.precision(precision);
    if (a.size() == 0) cout << "empty";
    else
        for (i = 0; i < m; ++i) {
            for (j = 0; j < n; ++j) {
                cout << to_num(a(i, j)) << "   ";
            }
            cout << endl;
        }
    cout << endl;
    cout.precision(oldPrecision);
}
//% elseif ndim(T) == 3
inline void disp(@T@_I a, Int_I precision = def_disp_prec) {
    Long i, j, k, m{ a.n1() }, n{ a.n2() }, q{ a.n3() };
    auto oldPrecision = cout.precision();
    cout.precision(precision);
    if (a.size() == 0) cout << "empty";
    else
        for (k = 0; k < q; ++k) {
            cout << "(:, :, " << k << ")" << endl;
            for (i = 0; i < m; ++i) {
                for (j = 0; j < n; ++j) {
                    cout << to_num(a(i, j, k)) << "   ";
                }
                cout << endl;
            }
            cout << endl;
        }
    cout.precision(oldPrecision);
}
//% elseif ndim(T) == 4
inline void disp(@T@_I a, Int_I precision = def_disp_prec) {
    Long i, j, k, l, N1 = a.n1(), N2 = a.n2(), N3 = a.n3(), N4 = a.n4();
    auto oldPrecision = cout.precision();
    cout.precision(precision);
    if (a.size() == 0)
        cout << "empty";
    else
        for (l = 0; l < N4; ++l)
        for (k = 0; k < N3; ++k) {
            cout << "(:, :, " << k << ", " << l << ")" << endl;
            for (i = 0; i < N1; ++i) {
                for (j = 0; j < N2; ++j) {
                    cout << to_num(a(i, j, k, l)) << "   ";
                }
                cout << endl;
            }
            cout << endl;
        }
    cout.precision(oldPrecision);
}
//% else
//%     error('not implemented!');
//% end
//%------------------------

// for vector of string
inline void disp(vecStr_I v)
{
    Long N = v.size();
    for (Long i = 0; i < N; ++i)
        cout << v[i] << endl;
}

inline void disp(vecStr32_I v)
{
    Long N = v.size();
    for (Long i = 0; i < N; ++i)
        cout << utf32to8(v[i]) << endl;
}
} // namespace slisc
