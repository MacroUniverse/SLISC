// row-major matrix container
#pragma once
#include "Vbase.h"

namespace slisc {
//%  types = {'Char'; 'Int'; 'Llong'; 'Long'; 'Float'; 'Doub'; 'Comp';};
//%------------------------------------
//% T = varargin{:};
//% VbaseT = ['Vbase' T];
//% MatT = ['Mat' T];
//% if is_Long(T)
#ifdef SLS_USE_INT_AS_LONG
typedef MatInt MatLong;
#else
typedef MatLlong MatLong;
#endif
//% else
class @MatT@ : public @VbaseT@
{
protected:
    typedef @VbaseT@ Base;
    using Base::m_p;
    using Base::m_N;
    Long m_N1, m_N2;
public:
    using Base::ptr;
    using Base::operator();
    @MatT@(): m_N1(0), m_N2(0) {};
    @MatT@(Long_I N1, Long_I N2);
    @MatT@(const @MatT@ &rhs);        // Copy constructor
    @MatT@ & operator=(const @MatT@ &rhs) = delete;
    void operator<<(@MatT@ &rhs); // move data and rhs.resize(0, 0)
    @T@& operator()(Long_I i, Long_I j); // double indexing
    const @T@& operator()(Long_I i, Long_I j) const;
    Long n1() const;
    Long n2() const;
    void resize(Long_I N1, Long_I N2); // resize (contents not preserved)
};

inline @MatT@::@MatT@(Long_I N1, Long_I N2) : Base(N1*N2), m_N1(N1), m_N2(N2) {}

inline @MatT@::@MatT@(const @MatT@ &rhs) : Base(0)
{
    SLS_ERR("Copy constructor or move constructor is forbidden, use reference argument for function input or output, and use \"=\" to copy!");
}

inline void @MatT@::operator<<(@MatT@ &rhs)
{
    m_N1 = rhs.m_N1; m_N2 = rhs.m_N2;
    rhs.m_N1 = rhs.m_N2 = 0;
    Base::operator<<(rhs);
}

inline @T@& @MatT@::operator()(Long_I i, Long_I j)
{
#ifdef SLS_CHECK_BOUNDS
    if (i < 0 || i >= m_N1 || j < 0 || j >= m_N2)
        SLS_ERR("@MatT@ subscript out of bounds");
#endif
    return m_p[m_N2*i+j];
}

inline const @T@ & @MatT@::operator()(Long_I i, Long_I j) const
{
#ifdef SLS_CHECK_BOUNDS
    if (i < 0 || i >= m_N1 || j < 0 || j >= m_N2)
        SLS_ERR("@MatT@ subscript out of bounds");
#endif
    return m_p[m_N2*i+j];
}

inline Long @MatT@::n1() const
{
    return m_N1;
}

inline Long @MatT@::n2() const
{
    return m_N2;
}

inline void @MatT@::resize(Long_I N1, Long_I N2)
{
    if (N1 != m_N1 || N2 != m_N2) {
        Base::resize(N1*N2);
        m_N1 = N1; m_N2 = N2;
    }
}
//% end

typedef const @MatT@ & @MatT@_I;
typedef @MatT@ & @MatT@_O, & @MatT@_IO;
//%------------------------
} // namespace slisc
