#pragma once
#include "Vec.h"
#include "Svec.h"
#ifdef SLS_USE_GSL
#include <gsl/gsl_sf_coulomb.h>
#include <gsl/gsl_errno.h>
#endif

namespace slisc {

// === coulomb phase shift ===
#ifdef SLS_USE_GSL
//% tem('hydrogen_rR', {
//%   'VecDoub' 'VecDoub';
//%   'VecDoub' 'SvecDoub';
//%   'SvecDoub' 'VecDoub';
//%   'SvecDoub' 'SvecDoub';
//% });
//%-----------------------
//% [Tv, Tv1] = varargin{:};
// scaled hydrogen bound state radial wave function, normalized
inline void hydrogen_rR(@Tv@_O rR, Int_I n, Int_I l, Doub_I Z, @Tv1@_I r)
{
    assert_same_shape@ndim(Tv)@@ndim(Tv1)@(rR, r);
	gsl_set_error_handler_off(); // turn off error for possible underflow
	for (Long i = 0; i < r.size(); ++i)
		rR[i] = r[i] * gsl_sf_hydrogenicR(n, l, Z, r[i]);
	gsl_set_error_handler(NULL);
}

// unscaled hydrogen bound state radial wave function
inline void hydrogen_R(@Tv@_O rR, Int_I n, Int_I l, Doub_I Z, @Tv1@_I r)
{
    assert_same_shape@ndim(Tv)@@ndim(Tv1)@(rR, r);
	gsl_set_error_handler_off(); // turn off error for possible underflow
	for (Long i = 0; i < r.size(); ++i)
		rR[i] = gsl_sf_hydrogenicR(n, l, Z, r[i]);
	gsl_set_error_handler(NULL);
}
//%----------------
#endif
} // namespace slisc
