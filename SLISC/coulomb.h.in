#pragma once
#include "compare.h"
#include "scalar_arith.h"
#ifdef SLS_USE_ARB
#include <gmp.h>
#include <flint/flint.h>
#include "arb_hypgeom.h" // real functions
#include "acb_hypgeom.h" // complex functions
#include "arb_extension.h"
#endif
#ifdef SLS_USE_GSL
#include <gsl/gsl_specfunc.h>
#include <gsl/gsl_sf_gamma.h>
#include <gsl/gsl_errno.h>
#endif
#include "cwfcomp/cwfcomp.h"

namespace slisc {
#ifdef SLS_USE_ARB
// Coulomb function (normalized)
//% tem('arb_coulombF', {
//%   'Doub' 'Comp' 16 80
//%   'Qdoub' 'Qcomp' 34 160});
//%---------------------------------
//% [Tr,Tc,dig,prec0] = varargin{:};
inline @Tr@ arb_coulombF(@Tr@_I l, @Tr@_I eta, @Tr@_I x)
{
	slong prec = @prec0@; // set precision bit (log10/log2 = 3.322)
	@Tr@ F = 0;
	arb_t l1, eta1, x1, F1;
	arb_init(l1); arb_init(eta1); arb_init(x1); arb_init(F1);
//% if is_Doub(Tr)
	// can use _arb_init_set_d() instead
	arb_set_d(l1, l); arb_set_d(eta1, eta); arb_set_d(x1, x);
//% else
	arb_set_q(l1, l); arb_set_q(eta1, eta); arb_set_q(x1, x);
//% end
	Int digits;
	for (Long i = 0; i < 6; ++i) {
		arb_hypgeom_coulomb(F1, NULL, l1, eta1, x1, prec);
		digits = floor(arb_rel_accuracy_bits(F1)/3.321928);
		if (digits >= @dig@)
			break;
		prec *= 2;
	}
	if (digits < @dig@)
		SLS_ERR("arb_coulombF error too large : " + num2str(digits) + " digits");
//% if is_Doub(Tr)
	F = arf_get_d(arb_midref(F1), ARF_RND_NEAR);
//% else
	F = arf_get_q(arb_midref(F1), ARF_RND_NEAR);
//% end
	arb_clear(l1); arb_clear(eta1); arb_clear(x1); arb_clear(F1);
	return F;
}

// complex version
// warning: this function differs from my Mathematica definition (FlCode.tex)
inline @Tc@ acb_coulombF(@Tc@_I l, @Tc@_I eta, @Tc@_I x)
{
	slong prec = @prec0@; // set precision bit (log10/log2 = 3.322)
	acb_t l1, eta1, x1, F1; arb_t F1_re, F1_im;
	acb_init(l1); acb_init(eta1); acb_init(x1); acb_init(F1);
	arb_init(F1_re); arb_init(F1_im);
	acb_set_d_d(l1, l.real(), l.imag());
	acb_set_d_d(eta1, eta.real(), eta.imag()); acb_set_d_d(x1, x.real(), x.imag());
	Int digits;
	for (Long i = 0; i < 6; ++i) {
		acb_hypgeom_coulomb(F1, NULL, NULL, NULL, l1, eta1, x1, prec);
		digits = acb_rel_accuracy_bits(F1)/3.321928;
		if (digits >= @dig@)
			break;
		prec *= 2;
	}
	if (digits < @dig@)
		SLS_ERR("arb_coulombF error too large : " + num2str(digits) + " digits");
	acb_get_real(F1_re, F1); acb_get_imag(F1_im, F1);
//% if is_Doub(Tr)
	Comp F(arf_get_d(arb_midref(F1_re), ARF_RND_NEAR), arf_get_d(arb_midref(F1_im), ARF_RND_NEAR));
//% else
	Qcomp F(arf_get_q(arb_midref(F1_re), ARF_RND_NEAR), arf_get_q(arb_midref(F1_im), ARF_RND_NEAR));
//% end
	acb_clear(l1); acb_clear(eta1); acb_clear(x1); acb_clear(F1);
	arb_clear(F1_re); arb_clear(F1_im);
	return F;
}
//%---------------------------------

//% tem('arb_gamma', {
//%   'Doub' 'Comp' 16 80
//%   'Qdoub' 'Qcomp' 34 160});
//%---------------------------------
//% [Tr,Tc,dig,prec0] = varargin{:};
inline @Tr@ arb_gamma(@Tr@_I x)
{
	slong prec = @prec0@; // set precision bit (log10/log2 = 3.322)
	@Tr@ res = 0;
	arb_t x1, res1;
	arb_init(x1); arb_init(res1);
	// can use _arb_init_set_d() instead
	arb_set_d(x1, x);
	Int digits;
	for (Long i = 0; i < 6; ++i) {
		arb_gamma(res1, x1, prec);
		digits = floor(arb_rel_accuracy_bits(res1)/3.321928);
		if (digits >= @dig@)
			break;
		prec *= 2;
	}
	if (digits < @dig@)
		SLS_ERR("arb_gamma error too large : " + num2str(digits) + " digits");
	res = arf_get_d(arb_midref(res1), ARF_RND_NEAR);
	arb_clear(x1); arb_clear(res1);
	return res;
}

inline @Tc@ arb_gamma(@Tc@_I z)
{
	slong prec = 80;
	@Tc@ res;
	acb_t z1, res1;
	arb_t temp1;
	Int digits;
	acb_init(z1); acb_init(res1); arb_init(temp1);
	acb_set_d_d(z1, real(z), imag(z));
	for (Long i = 0; i < 6; ++i) {
		acb_gamma(res1, z1, prec);
		digits = acb_rel_accuracy_bits(res1)/3.321928;
		if (digits >= 16)
			break;
		prec *= 2;
	}
	if (digits < 16)
		SLS_ERR("arb_gamma error too large : " + num2str(digits) + " digits");
	acb_get_real(temp1, res1);
	res.real(arf_get_d(arb_midref(temp1), ARF_RND_NEAR));
	acb_get_imag(temp1, res1);
	res.imag(arf_get_d(arb_midref(temp1), ARF_RND_NEAR));
	acb_clear(z1); acb_clear(res1); arb_clear(temp1);
	return res;
}
//%---------------------------------

//% tem('arb_lngamma', {
//%   'Doub' 'Comp' 16 80
//%   'Qdoub' 'Qcomp' 34 160});
//%---------------------------------
//% [Tr,Tc,dig,prec0] = varargin{:};
//% if is_Qdoub(Tr)
//%     q = 'q';
//% else
//%     q = '';
//% end
inline @Tr@ arb_lngamma(@Tr@_I x)
{
	slong prec = @prec0@; // set precision bit (log10/log2 = 3.322)
	@Tr@ res = 0;
	arb_t x1, res1;
	arb_init(x1); arb_init(res1);
	// can use _arb_init_set_d() instead
	arb_set_d(x1, x);
	Int digits;
	for (Long i = 0; i < 6; ++i) {
		arb_lgamma(res1, x1, prec);
		digits = floor(arb_rel_accuracy_bits(res1)/3.321928);
		if (digits >= @dig@)
			break;
		prec *= 2;
	}
	if (digits < @dig@)
		SLS_ERR("arb_gamma error too large : " + num2str(digits) + " digits");
	res = arf_get_d(arb_midref(res1), ARF_RND_NEAR);
	arb_clear(x1); arb_clear(res1);
	return res;
}

inline @Tc@ arb_lngamma(@Tc@_I z)
{
	slong prec = 80;
	@Tc@ res;
	acb_t z1, res1;
	arb_t temp1;
	Int digits;
	acb_init(z1); acb_init(res1); arb_init(temp1);
	acb_set_d_d(z1, real(z), imag(z));
	for (Long i = 0; i < 6; ++i) {
		acb_lgamma(res1, z1, prec);
		digits = acb_rel_accuracy_bits(res1)/3.321928;
		if (digits >= 16)
			break;
		prec *= 2;
	}
	if (digits < 16)
		SLS_ERR("arb_lngamma error too large : " + num2str(digits) + " digits");
	acb_get_real(temp1, res1);
	res.real(arf_get_d(arb_midref(temp1), ARF_RND_NEAR));
	acb_get_imag(temp1, res1);
	res.imag(arf_get_d(arb_midref(temp1), ARF_RND_NEAR));
	acb_clear(z1); acb_clear(res1); arb_clear(temp1);

	res.imag(mod_fl(res.imag(), 2*PI@q@));
	if (res.imag() > PI@q@)
		res.imag(res.imag() - 2*PI@q@);
	return res;
}
//%---------------------------------

//% tem('arb_coulomb_sigma', {
//%   'Doub' 'Comp'
//%   'Qdoub' 'Qcomp'});
//%---------------------------------
//% [Tr,Tc] = varargin{:};
inline @Tr@ arb_coulomb_sigma(@Tr@_I l, @Tr@_I eta)
{
	if (eta > 0)
		SLS_ERR("are you sure?");
	return imag(arb_lngamma(@Tc@(l + 1, eta)));
}
//%--------------------------------
#endif

using cwfcomp::Coulomb_wave_functions;
inline Doub coulombF(Int_I l, Doub_I k, Doub_I r, Doub_I Z = -1.)
{
	Comp F, dF;
	Doub eta = Z / k;
	cwfcomp::Coulomb_wave_functions f(true, l, eta);
	f.F_dF(k * r, F, dF);
	return real(F);
}

// cut the non-zero band
//% tem('coulombF', {
//%     'VecDoub', 'VecDoub';
//%     'VecDoub', 'SvecDoub';
//%     'SvecDoub', 'VecDoub';
//%     'SvecDoub', 'SvecDoub';
//% });
//%------------------------------
//% [Tv1, Tv2] = varargin{:};
inline void coulombF(@Tv1@_O F, Int_I l, Doub_I k, @Tv2@_I r, Doub_I Z = -1.)
{
//% req('assert_same_shape', {Tv1, Tv2});
	assert_same_shape(F, r);
	Comp F1, dF1;
	Doub eta = Z / k;
	for (Long i = 0; i < r.size(); ++i) {
		// must use a new "Coulomb_wave_functions" to keep accuracy
		// if the same object is used, the ODE solver might solve next point based on the previous point
		// constructor time is only 1/60 to 1/10 of the calculation time, so don't try to optimize this!
		cwfcomp::Coulomb_wave_functions f(true, l, eta);
		f.F_dF(k * r[i], F1, dF1);
		F[i] = real(F1);
	}
}
//%------------------------------

#ifdef SLS_USE_GSL
// === coulomb phase shift ===
inline Doub coulomb_sigma(Int_I l, Doub_I eta)
{
	if (eta > 0)
		SLS_ERR("are you sure?");
	gsl_sf_result lnr, arg;
	if (gsl_sf_lngamma_complex_e(l + 1, eta, &lnr, &arg) == GSL_ELOSS)
		SLS_ERR("arg has loss!");
	return arg.val;
}
#endif
} // namespace slisc
