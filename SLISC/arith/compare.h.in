// compare containers

#pragma once
#include "../dense/Vec.h"
#include "../dense/Mat.h"
#include "../dense/Mat3.h"
#include "../dense/Cmat.h"
#include "../dense/Cmat3.h"
#include "../dense/Cmat4.h"
#include "../sparse/Cband.h"
#include "../sparse/Mcoo.h"
#include "../sparse/Cmobd.h"
#include "../dense/Svec.h"
#include "../dense/Dvec.h"
#include "../dense/Scmat.h"
#include "../dense/Scmat3.h"
#include "../dense/Scmat4.h"
#include "../dense/Dcmat.h"
#include "../dense/Jcmat3.h"

namespace slisc {
//% tem('equals_vs', { 'Comp' 'Doub'; 'Qcomp' 'Qdoub'; });
//%------------------------
//% [T, T1] = varargin{:};
inline bool equals_vs(const @T@ *v, @T1@_I s, Long_I N)
{
	for (Long i = 0; i < N; ++i)
		if (v[i] != s)
			return false;
	return true;
}
//%------------------------

//% tem('equals_vv', { 'Int', 'Int' });
//%--------------------------------
//% [T1, T2] = varargin{:};
inline bool equals_vv(const @T1@ *v1, const @T2@ *v2, Long_I N)
{
	for (Long i = 0; i < N; ++i)
		if (v1[i] != v2[i])
			return false;
	return true;
}
//%------------------------

template <class T1, class T2>
bool shape_cmp1(const T1 &v1, const T2 &v2) {return (Long)v1.size() == (Long)v2.size();}

template <class T1, class T2>
bool shape_cmp2(const T1 &v1, const T2 &v2) {return v1.n0() == v2.n0() && v1.n1() == v2.n1();}

template <class T1, class T2>
bool shape_cmp3(const T1 &v1, const T2 &v2) {return v1.n0() == v2.n0() && v1.n1() == v2.n1() && v1.n2() == v2.n2();}

template <class T1, class T2>
bool shape_cmp4(const T1 &v1, const T2 &v2) {return v1.n0() == v2.n0() && v1.n1() == v2.n1() && v1.n2() == v2.n2() && v1.n3() == v2.n3();}

template <class T1, class T2>
void assert_same_shape1(const T1 &v1, const T2 &v2) {
#ifdef SLS_CHECK_SHAPES
	if (!shape_cmp1(v1, v2)) SLS_ERR("wrong shape!");
#endif
}

template <class T1, class T2>
void assert_same_shape2(const T1 &v1, const T2 &v2) {
#ifdef SLS_CHECK_SHAPES
	if (!shape_cmp2(v1, v2)) SLS_ERR("wrong shape!");
#endif
}

template <class T1, class T2>
void assert_same_shape3(const T1 &v1, const T2 &v2) {
#ifdef SLS_CHECK_SHAPES
	if (!shape_cmp3(v1, v2)) SLS_ERR("wrong shape!");
#endif
}

template <class T1, class T2>
void assert_same_shape4(const T1 &v1, const T2 &v2) {
#ifdef SLS_CHECK_SHAPES
	if (!shape_cmp4(v1, v2)) SLS_ERR("wrong shape!");
#endif
}

template <class T1, class T2, class T3>
void assert_same_shape1(const T1 &v1, const T2 &v2, const T3 &v3) {
#ifdef SLS_CHECK_SHAPES
	if (!shape_cmp1(v1, v2) || !shape_cmp1(v1, v3)) SLS_ERR("wrong shape!");
#endif
}

template <class T1, class T2, class T3>
void assert_same_shape2(const T1 &v1, const T2 &v2, const T3 &v3) {
#ifdef SLS_CHECK_SHAPES
	if (!shape_cmp2(v1, v2) || !shape_cmp2(v1, v3)) SLS_ERR("wrong shape!");
#endif
}

template <class T1, class T2, class T3>
void assert_same_shape3(const T1 &v1, const T2 &v2, const T3 &v3) {
#ifdef SLS_CHECK_SHAPES
	if (!shape_cmp3(v1, v2) || !shape_cmp3(v1, v3)) SLS_ERR("wrong shape!");
#endif
}

template <class T1, class T2, class T3>
void assert_same_shape4(const T1 &v1, const T2 &v2, const T3 &v3) {
#ifdef SLS_CHECK_SHAPES
	if (!shape_cmp4(v1, v2) || !shape_cmp4(v1, v3)) SLS_ERR("wrong shape!");
#endif
}



//% tem('v==v', {
//%   'SvecChar', 'SvecChar';
//%   'SvecUchar', 'SvecUchar';
//%   'SvecInt', 'SvecInt';
//%   'SvecLlong', 'SvecLlong';
//%   'SvecDoub', 'SvecDoub';
//%   'SvecQdoub', 'SvecQdoub';
//%   'SvecDoub', 'SvecComp';
//%   'SvecQdoub', 'SvecQcomp';
//%   'SvecComp', 'SvecComp';
//%   'SvecQcomp', 'SvecQcomp';
//%   'MatLlong', 'MatLlong';
//%   'MatDoub' 'MatDoub'
//%   'MatDoub' 'ScmatDoub'
//%   'MatInt' 'MatInt'
//%   'MatDoub' 'MatDoub'
//%   'MatComp', 'MatComp';
//%   'CmatInt' 'ScmatInt'
//%   'CmatLlong' 'ScmatLlong'
//%   'CmatDoub', 'ScmatDoub';
//%   'CmatQdoub', 'ScmatQdoub';
//%   'CmatComp', 'ScmatComp';
//%   'CmatQcomp', 'ScmatQcomp';
//%   'Cmat3Llong' 'Scmat3Llong'
//%   'Cmat3Doub' 'Scmat3Doub'
//%   'Cmat3Qdoub' 'Scmat3Qdoub'
//%   'Cmat3Comp' 'Scmat3Comp'
//%   'Cmat3Qcomp' 'Scmat3Qcomp'
//%   'ScmatInt' 'ScmatInt'
//%   'ScmatLlong' 'ScmatLlong'
//%   'ScmatDoub', 'ScmatDoub';
//%   'ScmatQdoub', 'ScmatQdoub';
//%   'ScmatComp', 'ScmatComp';
//%   'ScmatQcomp', 'ScmatQcomp';
//%   'Scmat3Llong' 'Scmat3Llong'
//%   'Scmat3Doub' 'Scmat3Doub'
//%   'Scmat3Qdoub' 'Scmat3Qdoub'
//%   'Scmat3Comp' 'Scmat3Comp'
//%   'Scmat3Qcomp' 'Scmat3Qcomp'
//%   'ScmatDoub', 'MatDoub';
//%   'ScmatComp', 'MatComp';
//%   'Mat3Doub' 'Mat3Doub'
//%   'Mat3Comp' 'Mat3Comp'
//%   'DcmatDoub' 'ScmatDoub'
//%   'DcmatQdoub' 'ScmatQdoub'
//%   'Jcmat3Doub' 'Scmat3Doub'
//%   'Jcmat3Qdoub' 'Scmat3Qdoub'
//% });
//%--------------------------
//% [T1, T2] = varargin{:};
//% [Ts1,Ts2] = val_t(T1,T2);
//% if ndim(T1) ~= ndim(T2)
//%     error('v==v: dimension must agree!');
//% end
//% Nd = ndim(T1);
inline bool operator==(@T1@_I v1, @T2@_I v2)
{
//% if is_dense(T1) && is_dense(T2) && is_same_major(T1, T2)
//%     req('equals_vv', {Ts1, Ts2});
	return shape_cmp@Nd@(v1, v2) &&
		equals_vv(v1.p(), v2.p(), v2.size());
//% elseif Nd == 1
	if (!shape_cmp1(v1, v2))
		return false;
	for (Long i = 0; i < v1.size(); ++i) {
		if (v1[i] != v2[i])
			return false;
	}
	return true;
//% elseif Nd == 2
	if (!shape_cmp2(v1, v2))
		return false;
	for (Long i = 0; i < v1.n0(); ++i)
		for (Long j = 0; j < v1.n1(); ++j)
			if (v1(i, j) != v2(i, j))
				return false;
	return true;
//% elseif Nd == 3
	if (!shape_cmp3(v1, v2))
		return false;
	for (Long i = 0; i < v1.n0(); ++i)
		for (Long j = 0; j < v1.n1(); ++j)
			for (Long k = 0; k < v1.n2(); ++k)
				if (v1(i, j, k) != v2(i, j, k))
					return false;
	return true;
//% else
//%     error('not implemented (2)!');
//% end
}

inline bool operator!=(@T1@_I v1, @T2@_I v2)
{ return !(v1 == v2); }
//%------------------------

inline bool operator==(VecBool_I v1, VecBool_I v2)
{
	for (Long i = 0; i < v1.size(); ++i)
		if (v1[i] != v2[i])
			return false;
	return true;
}

inline bool operator!=(VecBool_I v1, VecBool_I v2)
{ return !(v1 == v2); }

//% tem('v==s', { 'SvecInt'; 'SvecLlong';
//%  'SvecDoub'; 'SvecQdoub'; 'SvecComp'; 'SvecQcomp'; 'DvecInt';
//%  'DvecDoub'; 'DvecQdoub'; });
//%--------------------------
//% T = varargin{:}; Ts = val_t(T);
inline bool operator==(@T@_I v, @Ts@_I s)
//% if is_dense(T)
//%     req('equals_vs', {Ts Ts});
{ return equals_vs(v.p(), s, v.size()); }
//% elseif is_Dcmat(T)
{
	for (Long j = 0; j < v.n1(); ++j)
//%     req('equals_vs', {Ts Ts});
		if !equals_vs(v.p() + v.n0()*j, s, v.n0());
			return false
	return true;
}
//% else
{
	for (Long i = 0; i < v.size(); ++i)
		if (v[i] != s)
			return false;
	return true;
}
//% end

inline bool operator!=(@T@_I v, @Ts@_I s)
{ return !(v == s); }
//%------------------------
} // namespace slisc
