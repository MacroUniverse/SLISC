// copy data from one container to another
// includes container shape checking
// all `container = container` should be implemented using `copy()`

#pragma once
#include "../arith/compare.h"
#include "../dense/cut.h"

namespace slisc {
// === pointer interface ===

//% tem('vecset', { 'Doub'; 'Qdoub'; 'Comp'; 'Qcomp'; 'Imag'; 'Qimag'; });
//%-----------------------
//% T = varargin{:};
inline void vecset(@T@ *v, @T@_I val, Long_I n)
{
	for (@T@ *p = v; p < v + n; ++p)
		*p = val;
}

inline void vecset(@T@ *v, @T@_I val, Long_I n, Long_I step)
{
	for (@T@ *p = v; p < v + n*step; p += step)
		*p = val;
}
//%------------------------

template <class T>
inline void veccpy(T *v, const T *v1, Long_I n)
{
	memcpy(v, v1, sizeof(T)*n);
}

template <class T, class T1>
inline void veccpy(T *v, const T1 *v1, Long_I n)
{
	for (Long i = 0; i < n; ++i) {
		*v = *v1; ++v; ++v1;
	}
}

template <class T, class T1>
inline void veccpy(T *v, const T1 *v1, Long_I step1, Long_I n)
{
	for (T *p = v; p < v + n; ++p) {
		*p = *v1;
		v1 += step1;
	}
}

template <class T, class T1>
inline void veccpy(T *v, Long_I step, const T1 *v1, Long_I n)
{
	for (T *p = v; p < v + n*step; p += step) {
		*p = *v1;
		++v1;
	}
}

template <class T, class T1>
inline void veccpy(T *v, Long_I step, const T1 *v1, Long_I step1, Long_I n)
{
	T *end = v + n * step;
	for (; v < end; v += step) {
		*v = *v1;
		v1 += step1;
	}
}

template <class T, class T1>
inline void matcpy(T *v, Long_I lda, const T1 *v1, Long_I lda1, Long_I Nld, Long_I Nsd)
{
	for (Long j = 0; j < Nsd; ++j) {
		veccpy(v, v1, Nld);
		v += lda; v1 += lda1;
	}
}

// copy from row major matrix to column major matrix, or vise versa
// all matrix elements are contiguous
// if a1 is column major, and a2 is row major, they are N1*N2
// if a1 is row major, and a2 is column major, they are N2*N1
template <class T, class T1>
inline void matcpy_diff_major(T *a2, const T1 *a1, Long_I N2, Long_I N1)
{
	for (Long i2 = 0; i2 < N2; ++i2) {
		Long start = N1 * i2, k2 = i2;
		for (Long k1 = start; k1 < start + N1; ++k1) {
			a2[k2] = a1[k1];
			k2 += N2;
		}
	}
}

// for "dashed" matrix
template <class T, class T1>
inline void matcpy_diff_major(T *a2, const T1 *a1, Long_I N2, Long_I lda2, Long_I N1, Long_I lda1)
{
	for (Long i2 = 0; i2 < N2; ++i2) {
		Long start = lda1 * i2, k2 = i2;
		for (Long k1 = start; k1 < start + N1; ++k1) {
			a2[k2] = a1[k1];
			k2 += lda2;
		}
	}
}

// === container interface ===
// must use pointer version
// scalar to container
//% tem('copy(v,s)', {
//% 'vecBool'; 'vecInt'; 'vecLlong';
//% 'VecChar'; 'VecInt'; 'VecLlong'; 'VecDoub'; 'VecQdoub'; 'VecComp'; 'VecQcomp';
//% 'SvecInt'; 'SvecLlong'; 'SvecDoub'; 'SvecQdoub'; 'SvecComp'; 'SvecQcomp';
//% 'DvecInt'; 'DvecLlong'; 'DvecDoub'; 'DvecQdoub'; 'DvecComp'; 'DvecQcomp';
//% 'vvecBool'; 'vvecInt'; 'vvecLlong';
//% 'CmatInt'; 'CmatLlong'; 'CmatDoub'; 'CmatQdoub'; 'CmatComp'; 'CmatQcomp';
//% 'MatInt'; 'VecQdoub'; 'MatDoub'; 'ScmatDoub'; 'ScmatQdoub'; 'ScmatComp'; 'ScmatQcomp';
//% 'Cmat3Int'; 'Cmat3Llong'; 'Cmat3Doub'; 'Cmat3Qdoub'; 'Cmat3Comp'; 'Cmat3Qcomp';
//% 'Mat3Doub'; 'Cmat3Doub'; 'Cmat3Qdoub'; 'Cmat4Doub'; 'Cmat4Qdoub'; });
//%-------------------------------------
//% T = varargin{:}; Ts = val_t(T);
//% req('vecset', {Ts});
inline void copy(@T@_O v, @Ts@_I s)
{
//% if is_vec(T)
	v.assign(v.size(), s);
//% elseif is_vvec(T)
	for (auto &v1 : v) v1.assign(v1.size(), s);
//% elseif is_VecBool(T)
	Long N = v.size();
	for (Long i = 0; i < N; ++i)
		v[i] = s;
//% elseif is_dense(T)
	if (v.size() > 0) vecset(v.p(), s, v.size());
//% elseif is_Dvec(T)
	if (v.size() > 0) vecset(v.p(), s, v.size(), v.step());
//% elseif is_Dcmat(T)
	Long N1 = v.n0(), N2 = v.n1();
	for (Long j = 0; j < N2; ++j)
		vecset(&v(0, j), s, N1);
//% elseif is_Dmat(T)
	Long N1 = v.n0(), N2 = v.n1();
	for (Long i = 0; i < N1; ++i)
		vecset(&v(i, 0), s, N2);
//% elseif ndim(T) == 3
	// slow
	if (v.size() != 0)
		for (Long k = 0; k < v.n2(); ++k)
			for (Long j = 0; j < v.n1(); ++j)
				for (Long i = 0; i < v.n0(); ++i)
					v(i, j, k) = s;
//% else
//%     error('not implemented!');
//% end
}
//%------------------------

// copy value to containers
// clang compiler error: second argument to 'va_arg' is of non-POD type 'slisc::Comp'
// inline void copy(@T@_O v, ...)

// copy initializer list to containers
//% tem('copy(v,ini)', { 'VecDoub'; 'VecQdoub'; 'VecComp'; 'VecQcomp';
//%    'CmatDoub'; 'CmatQdoub'; 'CmatComp'; 'CmatQcomp'; 'CmatQdoub';
//%    'SvecDoub'; 'SvecQdoub'; 'ScmatDoub'; 'ScmatQdoub'; 'ScmatComp'; 'ScmatQcomp'; });
//%------------------------------
//% T = varargin{:}; Ts = val_t(T);
inline void copy(@T@_O v, const std::initializer_list<@Ts@> &v1)
{
	const @Ts@ *p1 = v1.begin();
	Long N = v1.size();
#ifdef SLS_CHECK_SHAPES
	if (v.size() != N)
		SLS_ERR("wrong shape!");
#endif
	for (Long i = 0; i < N; ++i)
		v[i] = p1[i];
}
//%------------------------------

// container to container
//% tem('copy(v,v)', {
//%   'VecInt', 'VecInt';
//%   'VecInt', 'DvecInt';
//%   'VecInt', 'SvecInt';
//%   'VecLlong', 'VecLlong';
//%   'VecDoub', 'VecDoub';
//%   'VecQdoub', 'VecQdoub';
//%   'VecDoub', 'SvecDoub';
//%   'VecQdoub', 'SvecQdoub';
//%   'VecComp', 'VecComp';
//%   'VecQcomp', 'VecQcomp';
//%   'VecQcomp', 'VecQcomp';
//%   'VecComp', 'SvecComp';
//%   'VecQcomp', 'SvecQcomp';
//%   'VecQcomp', 'SvecQcomp';
//%   'VecComp', 'DvecComp';
//%   'VecQcomp', 'DvecQcomp';
//%   'VecQcomp', 'DvecQcomp';
//%   'VecQdoub' 'VecQdoub'
//%   'SvecDoub', 'SvecDoub';
//%   'SvecQdoub', 'SvecQdoub';
//%   'SvecDoub', 'DvecDoub';
//%   'SvecQdoub', 'DvecQdoub';
//%   'SvecComp', 'VecComp';
//%   'SvecQcomp', 'VecQcomp';
//%   'SvecComp', 'SvecDoub';
//%   'SvecQcomp', 'SvecQdoub';
//%   'SvecComp', 'DvecComp';
//%   'SvecQcomp', 'DvecQcomp';
//%   'SvecComp' 'SvecComp'
//%   'SvecQcomp' 'SvecQcomp'
//%   'DvecComp' 'VecComp'
//%   'DvecQcomp' 'VecQcomp'
//%   'DvecComp' 'SvecComp'
//%   'DvecQcomp' 'SvecQcomp'
//%   'MatDoub' 'MatDoub'
//%   'CmatInt', 'CmatInt';
//%   'CmatLlong', 'CmatLlong';
//%   'CmatLlong', 'ScmatLlong';
//%   'CmatDoub', 'CmatDoub';
//%   'CmatQdoub', 'CmatQdoub';
//%   'CmatDoub', 'MatDoub';
//%   'ScmatComp' 'ScmatComp'
//%   'ScmatQcomp' 'ScmatQcomp'
//%   'MatDoub', 'CmatDoub';
//%   'Cmat3Int', 'Cmat3Int';
//%   'Cmat3Llong', 'Cmat3Llong';
//%   'Cmat3Doub', 'Cmat3Doub';
//%   'Cmat3Qdoub', 'Cmat3Qdoub';
//%   'Mat3Doub' 'Mat3Doub'
//% });
//%---------------------------
//% [T, T1] = varargin{:};
//% if ~is_promo(val_t(T), val_t(T1))
//%     error('illegal types');
//% end
//% [Ts,Ts1] = val_t(T,T1);
inline void copy(@T@_O v, @T1@_I v1)
{
//% req('assert_same_shape', {T,T1});
	assert_same_shape(v, v1);
	if (!v.size()) return;
//% if is_VecBool(T) || is_VecBool(T1)
	Long N = v.size();
	for (Long i = 0; i < N; ++i)
		v[i] = v1[i]; // cannot use pointer for bits
//% elseif is_dense(T) && is_dense(T1) && is_same_major(T, T1)
	if (v.size()) veccpy(v.p(), v1.p(), v.size());
//% elseif is_Dvec(T) && is_Dvec(T1)
	if (v.size()) veccpy(v.p(), v.step(), v1.p(), v1.step(), v.size());
//% elseif is_dense_vec(T) && is_Dvec(T1)
	if (v.size()) veccpy(v.p(), v1.p(), v1.step(), v1.size());
//% elseif is_Dvec(T) && is_dense_vec(T1)
	if (v.size()) veccpy(v.p(), v.step(), v1.p(), v1.size());
//% elseif is_dense_mat(T) && is_dense_mat(T1) && is_diff_major(T, T1)
//%     if is_cmajor(T)
	if (v.size()) matcpy_diff_major(v.p(), v1.p(), v.n0(), v.n1());
//%     else
	if (v.size()) matcpy_diff_major(v.p(), v1.p(), v.n1(), v.n0());
//%     end
//% elseif is_Dcmat(T) && is_Dcmat(T1)
	if (v.size()) matcpy(v.p(), v.lda(), v1.p(), v1.lda(), v.n0(), v.n1());
//% elseif is_Dmat(T) && is_Dmat(T1)
	if (v.size()) matcpy(v.p(), v.lda(), v1.p(), v1.lda(), v.n1(), v.n0());
//% elseif is_Cmat(T) && is_Dcmat(T1)
	if (v.size()) matcpy(v.p(), v.n0(), v1.p(), v1.lda(), v.n0(), v.n1());
//% elseif is_Dcmat(T) && is_Cmat(T1)
	if (v.size()) matcpy(v.p(), v.lda(), v1.p(), v.n0(), v.n0(), v.n1());
//% elseif ndim(T) == 3 && ndim(T1) == 3
	// slow
	if (v1.size() != 0)
		for (Long k = 0; k < v.n2(); ++k)
			for (Long j = 0; j < v.n1(); ++j)
				for (Long i = 0; i < v.n0(); ++i)
					v(i, j, k) = v1(i, j, k);
//% else
//%     disp(['T = ', T]);
//%     disp(['T1 = ', T1]);
//%     error('not implemented!!');
//% end
}
//%------------------------

template <class T1, class T2>
inline void copy(vector<vector<T1>> &v1, const vector<vector<T2>> &v2)
{
#ifdef SLS_CHECK_SHAPES
	Long N = v1.size();
	SLS_ASSERT(N == size(v2));
	for (Long i = 0; i < N; ++i)
		SLS_ASSERT(v1[i].size() == v2[i].size());
#endif
	Long j = 0;
	for (auto &v : v1) {
		veccpy(v.data(), v2[j].data(), v.size());
		++j;
	}
}

// for sparse containers
//% tem('copy(coo,coo)', { 'Doub', 'Doub'
//%    'Qdoub', 'Qdoub'
//%    'Comp' 'Doub'
//%    'Qcomp' 'Qdoub' });
//%----------------------------
//% [T, T1] = varargin{:};
//% McooT = ['Mcoo', T]; McooT1 = ['Mcoo', T1];
inline void copy(@McooT@_O v, @McooT1@_I v1)
{
#ifdef SLS_CHECK_SHAPES
//% req('assert_same_shape', {McooT, McooT1});
	assert_same_shape(v, v1);
	if (v.capacity() < v1.nnz())
		SLS_ERR("not enough capacity!");
#endif
	if (v1.nnz() == 0)
		return;
//% if is_same(T, T1)
	if (v.p() == v1.p())
		SLS_ERR("self copy is forbidden!");
//% end
	Long Nnz = v1.nnz();
	v.resize(Nnz);
	veccpy(v.p(), v1.p(), Nnz);
	veccpy(v.row_p(), v1.row_p(), Nnz);
	veccpy(v.col_p(), v1.col_p(), Nnz);
}
//%------------------------

// copy dense matrix to Mcoo matrix
// abs(s) < tol is considered 0
//% tem('copy(coo,mat)', {
//% 'McooDoub' 'ScmatDoub'
//% 'McooQdoub' 'ScmatQdoub'
//% 'McooComp', 'CmatComp'
//% 'McooQcomp', 'CmatQcomp' });
//%----------------------------
//% [Tcoo, Tcmat] = varargin{:};
//% Ts1 = val_t(Tcmat);
inline void copy(@Tcoo@_O v, @Tcmat@_I v1, Doub_I tol = 0)
{
//% req('assert_same_shape', {Tcoo,Tcmat});
	assert_same_shape(v, v1);
	if (v.p() == v1.p())
		SLS_ERR("self copy is forbidden!");
	
	for (Long j = 0; j < v1.n1(); ++j) {
		for (Long i = 0; i < v1.n0(); ++i) {
			@Ts1@ val = v1(i, j);
			if (abs(val) > tol)
				v.push(val, i, j);
		}
	}
}
//%------------------------

//% tem('copy(mat,coo)', {
//%   'CmatInt', 'Int'
//%   'CmatDoub', 'Doub'
//%   'CmatQdoub', 'Qdoub' });
//%----------------------------
//% [Tmat, Ts] = varargin{:};
//% if ~((is_dense_mat(Tmat) || is_Dcmat(Tmat) || is_Jcmat(Tmat)) && is_scalar(Ts))
//%     error('illegal types');
//% end
//% McooTs = ['Mcoo', Ts]; McoohTs = ['Mcooh', Ts];
inline void copy(@Tmat@_O lhs, @McooTs@_I rhs)
{
//% req('assert_same_shape', {Tmat, McooTs});
	assert_same_shape(lhs, rhs);
//% req('copy(v,s)', {Tmat});
	copy(lhs, 0);
	for (Long i = 0; i < rhs.nnz(); ++i) {
		lhs(rhs.row(i), rhs.col(i)) += rhs[i];
	}
}
//%-------------------

//% tem('copy(obd,obd)', { 'CmobdDoub', 'CmobdDoub'
//% 'CmobdQdoub', 'CmobdQdoub'
//% 'CmobdComp' 'CmobdComp'
//% 'CmobdQcomp' 'CmobdQcomp'
//% 'CmobdComp' 'CmobdDoub'
//% 'CmobdQcomp' 'CmobdQdoub' });
//%-----------------------
//% [T, T1] = varargin{:}; [Ts,Ts1] = val_t(T,T1);
//% req('copy(v,v)', {['Cmat3' Ts], ['Cmat3' Ts1]});
inline void copy(@T@_O lhs, @T1@_I rhs)
{ copy(lhs.cmat3(), rhs.cmat3()); }
//%-------------------

//% tem('copy(obd,coo)', { 'CmobdDoub', 'McooDoub';
//%   'CmobdQdoub', 'McooQdoub';
//%   'CmobdInt', 'McooInt' });
//%-----------------------
//% [T, T1] = varargin{:};
//% Cmat3T = ['Cmat3' val_t(T)];
inline void copy(@T@_O lhs, @T1@_I rhs)
{
//% req('assert_same_shape', {T, T1});
	assert_same_shape(lhs, rhs);
	@Cmat3T@ &c3 = lhs.cmat3();
//% req('copy(v,s)', {Cmat3T});
	copy(c3, 0);
	for (Long k = 0; k < rhs.nnz(); ++k) {
		Long i = rhs.row(k), j = rhs.col(k);
		lhs.ref(i, j) = rhs[k];
	}
}
//%--------------------

// not optimized
//% tem('copy(cmat,obd)', { 'CmatDoub', 'CmobdDoub'
//%      'CmatQdoub', 'CmobdQdoub' });
//%-----------------------
//% [T, T1] = varargin{:};
inline void copy(@T@_O lhs, @T1@_I rhs)
{
//% req('assert_same_shape', {T, T1});
	assert_same_shape(lhs, rhs);
	for (Long j = 0; j < lhs.n1(); ++j)
		for (Long i = 0; i < lhs.n0(); ++i)
			lhs(i, j) = rhs(i, j);
}
//%--------------------

// inline void cooh2dense(@Tmat@_O lhs, @McoohTs@_I rhs)
// {
// #ifdef SLS_CHECK_SHAPES
//     if (!shape_cmp(lhs, rhs))
//         SLS_ERR("wrong shape!");
// #endif
//     copy(lhs, 0);
//     for (Long i = 0; i < rhs.nnz(); ++i) {
//         Long r = rhs.row(i), c = rhs.col(i);
//         if (r == c)
//             lhs(r, r) = rhs(i);
//         else {
//             lhs(r, c) = rhs(i);
//             lhs(c, r) = conj(rhs(i));
//         }
//     }
// }

// from MatCoo and MatCooH to dense matrix
// #include "matrix_coo2dense.inl"

// template <class T, class T1, SLS_IF(is_promo<T, T1>())>
// void copy(MatCoo<T> &v, const CmatObd<T1> &v1)
// {
// #ifdef SLS_CHECK_SHAPES
//     if (!shape_cmp(v, v1))
//         SLS_ERR("wrong shape!");
//     if (v.capacity() < v1.nnz())
//         SLS_ERR("not enough capacity!");
// #endif
//     if (v1.nnz() == 0)
//         return;
//     Long N0 = v1.n0(), N1 = N0 - 1;
//     Long N = v1.n0();
//     Long k = 0;
//     for (Long blk = 0; blk < v1.nblk(); ++blk) {
//         for (Long j = 0; j < N0; ++j) {
//             for (Long i = 0; i < N0; ++i) {
//                 Long shift = blk * N1 - 1;
//                 Long ii = shift + i, jj = shift + j;
//                 if (!((i == N1 && j == N1) || ii < 0 || jj < 0 || ii == N || jj == N))
//                     v.push(v1(k), ii, jj);
//                 ++k;
//             }
//         }
//     }
// }

//% tem('copy(band,s)', { 'CbandDoub'; 'CbandQdoub' });
//%------------------------------
//% T = varargin{:}; Ts = val_t(T);
//% DcmatTs = ['Dcmat' Ts];
@DcmatTs@ band(@T@_IO);
@DcmatTs@C band(@T@_I);
//% req('copy(v,s)', {DcmatTs});
inline void copy(@T@_O a, @Ts@_I s)
{ copy(band(a), s); }
//%------------------------------

//% tem('copy(band,band)', { 'CbandDoub', 'CbandDoub'
//%   'CbandQdoub', 'CbandQdoub'
//%   'CbandComp', 'CbandComp'
//%   'CbandQcomp', 'CbandQcomp' });
//%------------------------------
//% [T, T1] = varargin{:}; [Ts,Ts1] = val_t(T,T1);
inline void copy(@T@_O a, @T@_I b)
{
#ifdef SLS_CHECK_SHAPES
	if (a.idiag() < b.nup() || a.lda() - a.idiag() - 1 < b.nlow())
		SLS_ERR("wrong shape!");
#endif
	a.reshape(b.n0(), b.nup(), b.nlow());
//% req('copy(v,v)', {['Dcmat' Ts],['Dcmat' Ts1]});
	copy(band(a), band(b));
}
//%------------------------------

//% tem('copy(mat,band)', {
//%     'CmatDoub', 'CbandDoub';
//%     'CmatQdoub', 'CbandQdoub';
//%    'CmatComp' 'CbandComp'
//%    'CmatQcomp' 'CbandQcomp'
//%    'CbandComp' 'CmatComp'
//%    'CbandQcomp' 'CmatQcomp'
//%     'CbandDoub', 'CmatDoub';
//%     'CbandQdoub', 'CmatQdoub';
//% });
//%------------------------------
//% [T1, T2] = varargin{:};
//% [Ts1,Ts2] = val_t(T1,T2);
//% SvecTs1 = ['Svec' Ts1]; SvecTs2 = ['Svec' Ts2];
//% if is_Cband(T1)
inline void copy(@T1@_O b, @T2@_I a)
{
//% req('assert_same_shape', {T1, T2});
	assert_same_shape(a, b);
	Long N1 = a.n0(), N2 = a.n1();
	for (Long j = 0; j < N2; ++j) {
//% req('cut0', {['Cmat' val_t(T1)]; T2});
		@SvecTs1@ cut_b = cut0(b.cmat(), j);
		@SvecTs2@C cut_a = cut0(a, j);
		Long k = b.idiag() - j;
		Long i_beg = max(Long(0), j - b.nup()), i_end = min(N1, j + b.nlow() + 1);
		for (Long i = i_beg; i < i_end; ++i)
			cut_b[k + i] = cut_a[i];
	}
}
//% elseif is_Cband(T2)
inline void copy(@T1@_O a, @T2@_I b)
{
//% req('assert_same_shape', {T1, T2});
	assert_same_shape(a, b);
	Long N1 = a.n0(), N2 = a.n1();
	for (Long j = 0; j < N2; ++j) {
		Long k = b.idiag() - j;
		Long i_beg = max(Long(0), j - b.nup()), i_end = min(N1, j + b.nlow() + 1);
//% req('cut0', {T1; ['Cmat' val_t(T2)]});
		@SvecTs1@ cut_a = cut0(a, j);
		@SvecTs2@C cut_b = cut0(b.cmat(), j);
		for (Long i = 0; i < i_beg; ++i)
			cut_a[i] = 0;
		for (Long i = i_beg; i < i_end; i++)
			cut_a[i] = cut_b[k + i];
		for (Long i = i_end; i < N1; ++i)
			cut_a[i] = 0;
	}
}
//% end
//%------------------------------

// concatinate std::vector
//% tem('cat_vec', {'vecInt'; 'vecLlong'; 'vecStr'; 'vecStr32';});
//%---------------------
//% T = varargin{:};
inline void cat(@T@_IO v, @T@_I v1)
{ v.insert(v.end(), v1.begin(), v1.end()); }
//%---------------------

// void copy(Matrix<T> &b, const Matrix<T> &a, Long_I Nup, Long_I Nlow)
// {
//     Long N1 = a.n0(), N2 = a.n1();
//     for (Long i = 0; i < N1; i++) {
//         Long k = Nlow - i;
//         for (Long j = max(Long(0), i - Nlow); j < MIN(N2, i + Nup + 1); j++) {
//             b(i, k + j) = a(i, j);
//         }
//     }
// }

// template <class T, SLS_IF0(is_scalar<T>())>
// void copy(Matrix<T> &a, const Matrix<T> &b, Long_I Nup, Long_I Nlow)
// {
//     Long N1 = a.n0(), N2 = a.n1();
//     for (Long i = 0; i < N1; i++) {
//         Long k = Nlow - i;
//         for (Long j = max(Long(0), i - Nlow); j < MIN(N2, i + Nup + 1); j++) {
//             a(i, j) = b(i, k + j);
//         }
//     }
// }

} // namespace slisc
