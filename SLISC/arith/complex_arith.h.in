// complex related functions

#pragma once
#include "../global.h"

namespace slisc {
//% tem('==comp', {
//%     'Char', 'Fcomp';
//%     'Char', 'Comp';
//%     'Char', 'Lcomp';
//%     'Char', 'Qcomp';
//%     'Int', 'Fcomp';
//%     'Int', 'Comp';
//%     'Int', 'Lcomp';
//%     'Int', 'Qcomp';
//%     'Float', 'Comp';
//%     'Float', 'Lcomp';
//%     'Float', 'Qcomp';
//%     'Doub', 'Fcomp';
//%     'Doub', 'Lcomp';
//%     'Ldoub', 'Fcomp';
//%     'Ldoub', 'Comp';
//%     'Ldoub', 'Qcomp';
//% %----------------------
//%     'Fcomp', 'Char';
//%     'Comp', 'Char';
//%     'Qcomp', 'Char';
//%     'Lcomp', 'Char';
//%     'Fcomp', 'Int';
//%     'Comp', 'Int';
//%     'Lcomp', 'Int';
//%     'Qcomp', 'Int';
//%     'Comp', 'Float';
//%     'Lcomp', 'Float';
//%     'Qcomp', 'Float';
//%     'Fcomp', 'Doub';
//%     'Lcomp', 'Doub';
//%     'Fcomp', 'Ldoub';
//%     'Comp', 'Ldoub';
//%     'Qcomp', 'Ldoub';
//% %----------------------
//%     'Fcomp', 'Comp';
//%     'Fcomp', 'Lcomp';
//%     'Fcomp', 'Qcomp';
//%     'Comp', 'Fcomp';
//%     'Comp', 'Lcomp';
//%     'Comp', 'Qcomp';
//%     'Lcomp', 'Fcomp';
//%     'Lcomp', 'Comp';
//%     'Lcomp', 'Qcomp';
//%     });
//%------------------------
//% [T1, T2] = varargin{1:2};
//% if is_real(T1)
inline bool operator==(@T1@_I s1, @T2@_I s2) { return real(s2) == s1 && imag(s2) == 0; }
//% elseif is_real(T2)
inline bool operator==(@T1@_I s1, @T2@_I s2) { return real(s1) == s2 && imag(s1) == 0; }
//% else
inline bool operator==(@T1@_I s1, @T2@_I s2) { return real(s1) == real(s2) && imag(s1) == imag(s2); }
//% end
inline bool operator!=(@T1@_I s1, @T2@_I s2) { return !(s1 == s2); }
//%------------------------

// reference to real/imaginary part
//% tem('real_r', {
//%    'Fcomp'; 'Comp'; 'Lcomp'; 'Qcomp';
//% });
//%----------------------------------
//% Tc = varargin{:};
//% Tr = rm_comp(Tc);
inline @Tr@ &real_r(@Tc@ &c) { return *((@Tr@*)&c); }
inline @Tr@ &imag_r(@Tc@ &c) { return *((@Tr@*)&c + 1); }

inline @Tr@ *real_p(@Tc@ &c) { return (@Tr@*)&c; }
inline const @Tr@ *real_p(const @Tc@ &c) { return (const @Tr@*)&c; }
inline @Tr@ *imag_p(@Tc@ &c) { return (@Tr@*)&c + 1; }
inline const @Tr@ *imag_p(const @Tc@ &c) { return (const @Tr@*)&c + 1; }
//%----------------------------------

//% tem('+=comp', {
//%    'Comp', 'Float';
//%    'Lcomp', 'Float';
//%    'Lcomp', 'Doub';
//% %------------------
//%    'Comp', 'Fcomp';
//%    'Lcomp', 'Fcomp';
//%    'Lcomp', 'Comp';
//% });
//%----------------------------------
//% [T1, T2] = varargin{:};
//% if ~is_promo(T1,T2)
//%     error("illegal");
//% end
//% if is_real(T2);
//%     T = rm_comp(T1);
//% else
//%     T = T1;
//% end
inline void operator+=(@T1@_O z, @T2@_I x) { z += (@T@)x; }
inline void operator-=(@T1@_O z, @T2@_I x) { z -= (@T@)x; }
inline void operator*=(@T1@_O z, @T2@_I x) { z *= (@T@)x; }
inline void operator/=(@T1@_O z, @T2@_I x) { z /= (@T@)x; }
//%------------------------

//% tem('+comp', {
//%     'Char', 'Fcomp';
//%     'Char', 'Comp';
//%     'Char', 'Lcomp';
//%     'Int', 'Fcomp';
//%     'Int', 'Comp';
//%     'Int', 'Lcomp';
//%     'Int', 'Qcomp';
//%     'Llong', 'Fcomp';
//%     'Llong', 'Comp';
//%     'Llong', 'Lcomp';
//%     'Llong', 'Qcomp';
//%     'Float', 'Comp';
//%     'Float', 'Lcomp';
//%     'Doub', 'Fcomp';
//%     'Doub', 'Lcomp';
//%     'Ldoub', 'Fcomp';
//%     'Ldoub', 'Comp';
//% %-------------------
//%     'Fcomp', 'Char';
//%     'Comp', 'Char';
//%     'Lcomp', 'Char';
//%     'Fcomp', 'Int';
//%     'Comp', 'Int';
//%     'Lcomp', 'Int';
//%     'Qcomp', 'Int';
//%     'Fcomp', 'Llong';
//%     'Comp', 'Llong';
//%     'Lcomp', 'Llong';
//%     'Qcomp', 'Llong';
//%     'Comp', 'Float';
//%     'Lcomp', 'Float';
//%     'Fcomp', 'Doub';
//%     'Lcomp', 'Doub';
//%     'Fcomp', 'Ldoub';
//%     'Comp', 'Ldoub';
//% %-------------------
//%     'Fcomp', 'Comp';
//%     'Fcomp', 'Lcomp';
//%     'Comp', 'Fcomp';
//%     'Comp', 'Lcomp';
//%     'Lcomp', 'Fcomp';
//%     'Lcomp', 'Comp';
//% });
//%-------------------------------------
//% [T1,T2] = varargin{:};
//% T = promo_type(T1,T2);
//% if is_real(T1)
inline @T@ operator+(@T1@_I s1, @T2@_I s2) { return @T@(s1 + real(s2), imag(s2)); }
//% elseif is_real(T2)
inline @T@ operator+(@T1@_I s1, @T2@_I s2) { return @T@(real(s1) + s2, imag(s1)); }
//% elseif type_num(T1) > type_num(T2)
inline @T@ operator+(@T1@_I s1, @T2@_I s2) { return s1 + (@T@)s2; }
//% elseif type_num(T2) > type_num(T1)
inline @T@ operator+(@T1@_I s1, @T2@_I s2) { return (@T@)s1 + s2; }
//% else
//%     error('not implemented!');
//% end

//% if is_real(T1)
inline @T@ operator-(@T1@_I s1, @T2@_I s2) { return @T@(s1 - real(s2), -imag(s2)); }
//% elseif is_real(T2)
inline @T@ operator-(@T1@_I s1, @T2@_I s2) { return @T@(real(s1) - s2, imag(s1)); }
//% elseif type_num(T1) > type_num(T2)
inline @T@ operator-(@T1@_I s1, @T2@_I s2) { return s1 - (@T@)s2; }
//% elseif type_num(T2) > type_num(T1)
inline @T@ operator-(@T1@_I s1, @T2@_I s2) { return (@T@)s1 - s2; }
//% else
//%     error('not implemented!');
//% end

//% if is_real(T1)
inline @T@ operator*(@T1@_I s1, @T2@_I s2) { return @T@(s1*real(s2), s1*imag(s2)); }
//% elseif is_real(T2)
inline @T@ operator*(@T1@_I s1, @T2@_I s2) { return @T@(real(s1)*s2, imag(s1)*s2); }
//% elseif type_num(T1) > type_num(T2)
inline @T@ operator*(@T1@_I s1, @T2@_I s2) { return s1 * (@T@)s2; }
//% elseif type_num(T2) > type_num(T1)
inline @T@ operator*(@T1@_I s1, @T2@_I s2) { return (@T@)s1 * s2; }
//% else
//%     error('not implemented!');
//% end

//% Tr1 = rm_comp(T1); Tr2 = rm_comp(T2);
//% numr1 = type_num(Tr1); numr2 = type_num(Tr2);
//% num1 = type_num(T1); num2 = type_num(T2);
//% if is_real(T1)
//%     if numr1 < numr2
inline @T@ operator/(@T1@_I s1, @T2@_I s2) { return (@Tr2@)s1 / s2; }
//%     elseif numr1 > numr2
//%         Tc1 = add_comp(Tr1);
inline @T@ operator/(@T1@_I s1, @T2@_I s2) { return s1 / (@Tc1@)s2; }
//%     end
//% elseif is_real(T2)
//%     if numr1 < numr2
//%         Tc2 = add_comp(Tr2);
inline @T@ operator/(@T1@_I s1, @T2@_I s2) { return (@Tc2@)s1 / s2; }
//%     elseif numr1 > numr2
inline @T@ operator/(@T1@_I s1, @T2@_I s2) { return s1 / (@Tr1@)s2; }
//%     end
//% elseif num1 > num2
//%         Tc1 = add_comp(Tr1);
inline @T@ operator/(@T1@_I s1, @T2@_I s2) { return s1 / (@Tc1@)s2; }
//% elseif num1 < num2
//%     Tc2 = add_comp(Tr2);
inline @T@ operator/(@T1@_I s1, @T2@_I s2) { return (@Tc2@)s1 / s2; }
//% else
//%     error('not implemented!');
//% end
//%------------------------
} // namespace slisc
