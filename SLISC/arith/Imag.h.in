// pure imaginary scalar type and arithmetics
// this might not be necessary due to compiler optimization, need benchmark

#pragma once
#include "../global.h"

namespace slisc {

//% tem('Imag', {'Float'; 'Doub'; 'Ldoub'; 'Qdoub'; });
//%-----------------
//% T = varargin{:};
//% Timag = add_imag(T);
//% Tcomp = add_comp(T);
class @Timag@
{
protected:
	@T@ m_s;
public:
	@Timag@() {};
	explicit @Timag@(const @T@ &val);
	operator @Tcomp@() const;
	@T@ real() const;
	@T@ imag() const;
	void imag(@T@_I val);
};

typedef const @Timag@ &@Timag@_I;
typedef @Timag@ &@Timag@_O, &@Timag@_IO;

inline @Timag@::@Timag@(const @T@ &val): m_s(val) {}

inline @Timag@::operator @Tcomp@() const { return @Tcomp@(0, m_s); }

inline @T@ @Timag@::real() const { return 0; }

inline @T@ @Timag@::imag() const { return m_s; }

inline void @Timag@::imag(@T@_I val) { m_s = val; }

inline @T@ real(@Timag@_I val) { return 0; }

inline @T@ imag(@Timag@_I val) { return val.imag(); }

inline @T@ abs(@Timag@_I val) { return val.imag(); }
//%------------------

const Imag I(1);
#ifdef SLS_USE_QUAD_MATH
const Qimag Iq(1.Q);
#endif

// imag +-*/ imag
//% tem('imag+imag', {
//%     'Float', 'Float';
//%     'Float', 'Doub';
//%     'Float', 'Ldoub';
//%     'Doub', 'Float';
//%     'Doub', 'Doub';
//%     'Doub', 'Ldoub';
//%     'Ldoub', 'Float';
//%     'Ldoub', 'Doub';
//%     'Ldoub', 'Ldoub';
//%     'Qdoub', 'Qdoub';
//% });
//%-----------------
//% [T1, T2] = varargin{:};
//% Ti1 = add_imag(T1); Ti2 = add_imag(T2);
//% Tc1 = add_comp(T1); Tc2 = add_comp(T2);
//% T = promo_type(T1, T2);
//% Ti = add_imag(T); Tc = add_comp(T);
inline @Ti@  operator+(@Ti1@_I z1, @Ti2@_I z2) { return @Ti@(imag(z1) + imag(z2)); }
inline @Ti@ operator-(@Ti1@_I z1, @Ti2@_I z2) { return @Ti@(imag(z1) - imag(z2)); }
inline @T@  operator*(@Ti1@_I z1, @Ti2@_I z2) { return -imag(z1) * imag(z2); }
inline @T@  operator/(@Ti1@_I z1, @Ti2@_I z2) { return imag(z1) / imag(z2); }
inline Bool operator==(@Ti1@_I z1, @Ti2@_I z2) { return imag(z1) == imag(z2); }
inline Bool operator!=(@Ti1@_I z1, @Ti2@_I z2) { return !(z1 == z2); }

inline @Tc@ operator+(@T1@_I x1, @Ti2@_I z2) { return @Tc@(x1, imag(z2)); }
inline @Tc@ operator-(@T1@_I x1, @Ti2@_I z2) { return @Tc@(x1, -imag(z2)); }
inline @Ti@ operator*(@T1@_I x1, @Ti2@_I z2) { return @Ti@(x1 * imag(z2)); }
inline @Ti@ operator/(@T1@_I x1, @Ti2@_I z2) { return @Ti@(-x1 / imag(z2)); }
inline Bool operator==(@T1@_I x1, @Ti2@_I z2) { return x1 == 0 && imag(z2) == 0; }
inline Bool operator!=(@T1@_I x1, @Ti2@_I z2) { return !(x1 == z2); }

inline @Tc@ operator+(@Ti1@_I z1, @T2@_I x2) { return @Tc@(x2, imag(z1)); }
inline @Tc@ operator-(@Ti1@_I z1, @T2@_I x2) { return @Tc@(-x2, imag(z1)); }
inline @Ti@ operator*(@Ti1@_I z1, @T2@_I x2) { return @Ti@(x2 * imag(z1)); }
inline @Ti@ operator/(@Ti1@_I z1, @T2@_I x2) { return @Ti@(imag(z1) / x2); }
inline Bool operator==(@Ti1@_I z1, @T2@_I x2) { return imag(z1) == 0 && x2 == 0; }
inline Bool operator!=(@Ti1@_I z1, @T2@_I x2) { return !(z1 == x2); }

inline @Tc@ operator+(@Tc1@_I z1, @Ti2@_I z2) { return @Tc@(real(z1), imag(z1) + imag(z2)); }
inline @Tc@ operator-(@Tc1@_I z1, @Ti2@_I z2) { return @Tc@(real(z1), imag(z1) - imag(z2)); }
inline @Tc@ operator*(@Tc1@_I z1, @Ti2@_I z2) { return @Tc@(-imag(z1)*imag(z2), real(z1)*imag(z2)); }
inline @Tc@ operator/(@Tc1@_I z1, @Ti2@_I z2) { return @Tc@(imag(z1)/imag(z2), -real(z1)/imag(z2)); }
inline Bool operator==(@Tc1@_I z1, @Ti2@_I z2) { return real(z1) == 0 && imag(z1) == imag(z2); }
inline Bool operator!=(@Tc1@_I z1, @Ti2@_I z2) { return !(z1 == z2); }

inline @Tc@ operator+(@Ti1@_I z1, @Tc2@_I z2) { return @Tc@(real(z2), imag(z2) + imag(z1)); }
inline @Tc@ operator-(@Ti1@_I z1, @Tc2@_I z2) { return @Tc@(-real(z2), imag(z1) - imag(z2)); }
inline @Tc@ operator*(@Ti1@_I z1, @Tc2@_I z2) { return @Tc@(-imag(z2)*imag(z1), real(z2)*imag(z1)); }
inline @Tc@ operator/(@Ti1@_I z1, @Tc2@_I z2) {
	const @T2@ &x2 = real(z2), &y2 = imag(z2);
	return @Tc@(y2, x2) * @T@(imag(z1) / (x2*x2 + y2*y2));
}
inline Bool operator==(@Ti1@_I z1, @Tc2@_I z2) { return real(z2) == 0 && imag(z1) == imag(z2); }
inline Bool operator!=(@Ti1@_I z1, @Tc2@_I z2) { return !(z1 == z2); }
//%-----------------

// operator-
inline Fimag operator-(Fimag_I z) { return Fimag(-z.imag()); }
inline Imag operator-(Imag_I z) { return Imag(-z.imag()); }
inline Limag operator-(Limag_I z) { return Limag(-z.imag()); }
#ifdef SLS_USE_QUAD_MATH
inline Qimag operator-(Qimag_I z) { return Qimag(-z.imag()); }
#endif

Doub &imag_r(Comp_IO);
inline void operator+=(Comp_IO z1, Imag_I z2) { imag_r(z1) += imag(z2); }
inline void operator-=(Comp_IO z1, Imag_I z2) { imag_r(z1) -= imag(z2); }
inline void operator*=(Comp_IO z1, Imag_I z2) { z1 = z1 * z2; }
inline void operator/=(Comp_IO z1, Imag_I z2) { z1 = z1 / z2; }

#ifdef SLS_USE_QUAD_MATH
Qdoub &imag_r(Qcomp_IO);
inline void operator+=(Qcomp_IO z1, Qimag_I z2) { imag_r(z1) += imag(z2); }
inline void operator-=(Qcomp_IO z1, Qimag_I z2) { imag_r(z1) -= imag(z2); }
inline void operator*=(Qcomp_IO z1, Qimag_I z2) { z1 = z1 * z2; }
inline void operator/=(Qcomp_IO z1, Qimag_I z2) { z1 = z1 / z2; }
#endif

// operator<<
inline std::ostream &operator<<(std::ostream &out, Imag_I num)
{
	out << num.imag() << 'i';
	return out;
}

#ifdef SLS_USE_QUAD_MATH
inline std::ostream &operator<<(std::ostream &out, Qimag_I num)
{
	out << num.imag() << 'i';
	return out;
}
#endif

} // namespace slisc
