// basic scalar arithmetic

#pragma once
#include "../arith/complex_arith.h"
#include "../arith/Imag.h"

namespace slisc {

// max, min with mixed types
//% tem('min', {'Llong' 'Int' 'Llong';});
//%-------------------------------
//% [T, T1, T2] = varargin{:};
inline @T@ max(const @T1@ &x, const @T2@ &y) { return x < y ? y : x; }
inline @T@ max(const @T2@ &x, const @T1@ &y) { return x < y ? y : x; }
inline @T@ min(const @T1@ &x, const @T2@ &y) { return x < y ? x : y; }
inline @T@ min(const @T2@ &x, const @T1@ &y) { return x < y ? x : y; }
//%-------------------------------

//% tem('sign', {'Char'; 'Int'; 'Llong'; 'Float'; 'Doub'; 'Ldoub'; 'Qdoub';});
//%-------------------------------
//% T = varargin{:};
constexpr @T@ sign(@T@_I s)
{ return s > @num(0,T)@ ? @num(1,T)@ : (s < @num(0,T)@ ? @num(-1,T)@ : @num(0,T)@); }
//%-------------------------------

//% tem('sign2', {'Char'; 'Int'; 'Llong'; 'Float'; 'Doub'; 'Ldoub'; 'Qdoub';});
//%-------------------------------
//% T = varargin{:};
inline @T@ sign(@T@_I a, @T@_I b)
{ return b >= 0 ? (a >= 0 ? a : -a) : (a >= 0 ? -a : a); }
//%------------------------

//% tem('isodd', {'Char'; 'Int'; 'Uint'; 'Llong'; 'Ullong';});
//%-------------------------------
//% T = varargin{:};
inline Bool isodd(@T@_I n) { return n & 1; }
//%------------------------

//% tem('ispow2', {'Char'; 'Int'; 'Llong'});
//%-------------------------------
//% T = varargin{:};
inline Bool ispow2(@T@_I n) { return (n&(n-1)) == 0; }
//%-----------------

//% tem('to_num', {'Char'; 'Int'; 'Llong'; 'Doub'; 'Ldoub'; 'Qdoub'; 'Comp'; 'Lcomp'; 'Qcomp';});
//%------------------------------
//% T = varargin{:};
//% if is_Bool(T) || is_Char(T)
inline Int to_num(@T@_I x) { return (Int)x; }
//% else
inline @T@ to_num(@T@_I x) { return x; }
//% end
//%------------------------

// check number of decimal digits of an integer
template<typename T>
constexpr int digits(const T &n) {
	static_assert(std::is_integral<T>::value, "T must be an integral type " SLS_WHERE);
    int count = 0;
    if (n < 0) n = -n;
    do { count++; n /= 10; } while (n != 0);
    return count;
}

// modulus
// all mod variants satisfies "s = div(s,d)*d + mod(s,d)"
// however, "div" can have different truncation:
// 1. c++ operator "/" truncates towards 0, so "s = (s/d)*d + s%d", and s%d = s%abs(d)
// 2. "mod_fl()" div truncates towards negative direction
// 3. "mod_eu()" is equivalent to "mod_fl(s,abs(d))"
// d = 0 is undefined.
// when s,d > 0, all variants return the same result
// result of all variants differ by +-d
// see https://en.wikipedia.org/wiki/Modulo_operation
//% tem('mod', {
//%     'Int', 'Int';
//%     'Llong', 'Int';
//%     'Int', 'Llong';
//%     'Llong', 'Llong';
//%     'Float', 'Float';
//%     'Doub', 'Doub';
//% });
//%--------------------------
//% [T1, T2] = varargin{:};
//% T = promo_type(T1, T2);
//% if is_integral(T1) && is_integral(T2)
inline @T@ mod(@T1@_I i, @T2@_I n) { return i % n; }

inline @T@ mod_fl(@T1@_I i, @T2@_I n) { return (i % n + n) % n; }

inline @T@ mod_eu(@T1@_I i, @T2@_I n)
{
	@T@ ret = i % n;
	return ret < 0 ? ret + abs(n) : ret;
}
//% elseif is_fpt(T1) || is_fpt(T2)
inline @T@ mod(@T1@_I s, @T2@_I d)
{ return s - round(s/d) * d; }

// floating point version of "%", s = n * d + return
inline @T@ mod(Long_O n, @T1@_I s, @T2@_I d)
{
	n = round(s/d);
	return s - n * d;
}

inline @T@ mod_fl(@T1@_I s, @T2@_I d)
{ return s - floor(s/d) * d; }

// s = n * d + return
inline @T@ mod_fl(Long_O n, @T1@_I s, @T2@_I d)
{
	n = floor(s/d);
	return s - n * d;
}

inline @T@ mod_eu(@T1@_I s, @T2@_I d)
{
	Long n = s/d;
	@T@ r = s - n*d;
	return r < 0 ? r + abs(d) : r;
}

// s = n * d + return
inline @T@ mod_eu(Long_O n, @T1@_I s, @T2@_I d)
{
	n = s/d;
	@T@ r = s - n*d;
	if (r < 0) {
		r += abs(d);
		n -= sign(d);
	}
	return r;
}
//% else
//%     error('not implemented!');
//% end
//%------------------------

template <class T>
inline T sqr(const T &x) { return x * x; }

//% tem('abs2', {'Int'; 'Doub'; 'Comp'; });
//%-------------------------------
//% T = varargin{:};
//% if is_real(T)
inline @T@ abs2(@T@_I a) { return a * a; }
//% elseif is_comp(T)
//%     Tr = rm_comp(T);
inline @Tr@ abs2(@T@_I a) { return sqr(real(a)) + sqr(imag(a)); }
//% end
//%------------------------

inline Doub factorial(Int_I n) {
	if (n > 170)
		SLS_ERR("n too large!");
	Doub ret = 1;
	for (Int i = 2; i <= n; ++i)
		ret *= i;
	return ret;
}

#ifdef SLS_USE_QUAD_MATH
inline Qdoub factorialq(Int_I n) {
	if (n > 1754)
		SLS_ERR("n too large!");
	Qdoub ret = 1;
	for (Int i = 2; i <= n; ++i)
		ret *= i;
	return ret;
}
#endif

// common api for STL and SLISC
template <class T>
inline Long size(const T &v) { return v.size(); }

// return the size of an std::tuple
template <typename... Ts>
constexpr Long size(const std::tuple<Ts...>&) {
	return (Long)sizeof...(Ts);
}

template <class T>
inline const T *p(const T &v)
{
#ifdef SLS_CHECK_BOUNDS
	SLS_ASSERT(!v.empty());
#endif
	return v.data();
}

template <class T>
inline T *p(T &v)
{
#ifdef SLS_CHECK_BOUNDS
	SLS_ASSERT(!v.empty());
#endif
	return v.data();
}

// number of prime numbers smaller than n
// verified with leetcode 204
inline Long nprimes(Long_I N)
{
	if (N <= 2) return 0;
	if (N == 3) return 1;
	Long Nh = N/2;
	vector<bool> isprime(Nh, true); // isprime[i] for (2*i+1)
	for (Long i = 1; sqr(2*i+1) < N; ++i)
		if (isprime[i])
			for (Long p = 2*i+1, j = i+p; j < Nh; j += p)
				isprime[j] = false;
	Long ret = 2;
	for (Long i = 2; i < Nh; ++i)
		if (isprime[i])
			++ret;
	return ret;
}

// get all the prime numbers smaller than n
inline void primes(vecLong_O v, Long_I N)
{
	v.clear();
	if (N <= 2) return;
	v.push_back(2);
	if (N == 3) return;
	Long i, Nh = N/2;
	vector<bool> isprime(Nh, true); // isprime[i] for (2*i+1)
	for (i = 1; sqr(2*i+1) < N; ++i) {
		if (isprime[i]) {
			v.push_back(2*i+1);
			for (Long p = 2*i+1, j = i+p; j < Nh; j += p)
				isprime[j] = false;
		}
	}
	for (; i < Nh; ++i)
		if (isprime[i])
			v.push_back(2*i+1);
}

// extend a list of ordered prime numbers to smaller than N
// v = [2,3,5,7,11....]
inline void primes_ext(vecLong_IO v, Long_I N)
{
	// N_old is even
	Long Nv = v.size(), N_old = v.back()+1;
	assert(Nv >= 5);
	assert(N > N_old);
	Long i = 0, Nb = N/2-N_old/2;
	// isprime[i] for (N_old+2*i+1)
	vector<bool> isprime(Nb, true);
	for (Long i = 1; i < Nv; ++i) {
		Long p = v[i];
		Long n = N_old/p + 1;
		if (!isodd(n)) ++n;
		Long j_beg = (n*p - N_old)/2;
		for (Long j = j_beg; j < Nb; j += p)
			isprime[j] = false;
	}
	if (N_old+1 < sqrt(N))
		for (; sqr(N_old+2*i+1) < N; ++i) {
			if (isprime[i]) {
				v.push_back(N_old+2*i+1);
				for (Long p = N_old+2*i+1, j = i+p; j < Nb; j += p)
					isprime[j] = false;
			}
		}
	for (; i < Nb; ++i)
		if (isprime[i])
			v.push_back(N_old+2*i+1);
}

// get the at least first N prime numbers
inline void primes2(vecLong_O v, Long_I Nprime)
{
	Long N = 2*Nprime;
	primes(v, N);
	while (size(v) < Nprime) {
		N = max(Long(N*1.1), N/size(v)*Nprime);
		primes_ext(v, N);
	}
}

//% tem('sinc', { 'Doub' });
//%---------------------
//% T = varargin{:};
//% if ~is_fpt(T), error('illegal type!'); end
inline @T@ sinc(@T@_I x) { return x == @num(0,T)@ ? @num(1,T)@ : sin(x) / x; }
//%---------------------

// b^n that output an integer 
//% tem('pow', { 'Int', 'Llong' });
//%---------------------
//% T = varargin{:};
inline @T@ pow(@T@ b, Uint n) {
    @T@ r = 1;
    while (n > 0) {
        if (n & 1) {
            r *= b;
        }
        b *= b; n >>= 1;
    }
    return r;
}
//%---------------------

// break a double into different parts
// d = man * 2^exp2 (exact)
// sign info if included in `man`
// flag = "-Inf", "+Inf", "qNaN" or "sNaN" if not a normal number
// assume little endian
// see also std::frexp() std::signbit
// ref: https://wuli.wiki/online/FltCpp.html
inline const char *double_parts(Bool_O neg, Llong_O man, Int_O exp2, Doub x)
{
	// split the bits:
	// 1 bit sign
	// neg = *(char*)&x+7 & 0x80;
	neg = std::signbit(x); // +0 and -0 are also signed
	// 11 bits exp
	int16_t b2;
	memcpy(&b2, (char*)&x+6, 2); 
	exp2 = (b2 >> 4);
	// 52 bit mantissa
	memcpy(&man, &x, 8);
	man &= 0xFFFFFFFFFFFFF; // 52 bits 1
	
	// interpret
	exp2 -= 1023;
	const char *flag;
	if (exp2 == 1024) { // Inf or nan
		if (man == 0) // inf
			flag = neg ? "-Inf" : "+Inf";
		else if (man & 0x8000000000000)
			flag = "qNaN"; // quiet NaN
		else
			flag = "sNaN"; // signaling NaN
		return flag;
	}
	if (exp2 == -1023) {
		exp2 = -1022 - 52;
		return NULL;
	}
	exp2 -= 1023 + 52;
	man |= 0x10000000000000; // set the 53-th bit
	return NULL;
}

// add the mantissa by ULP, n times
inline void mantissa_add(Doub_IO x, Ullong_I n = 1) {
	SLS_ERR(u8"需要考虑 mantissa 超出范围导致指数改变！");
	Ullong man;
	memcpy(&man, &x, 8);
	man &= 0xFFFFFFFFFFFFF; // 52 bits 1
	SLS_ASSERT(n > ULLONG_MAX - man);
	man += n;
}

// subtract the mantissa by n bits
inline void mantissa_sub(Doub_IO x, Ullong_I n) {
	SLS_ERR(u8"需要考虑 mantissa 超出范围导致指数改变！");
	Ullong *p = (Ullong *)&x;
	if (n > *p) SLS_ERR("overflow!");
	*p -= n;
}

// set the exp of a double (from -1023 to 1024)
// sign will be kept
inline Doub double_set_exp(Doub x, int16_t exp)
{
	Bool neg = (x < 0);
	exp += 1023;
	int16_t b2;
	memcpy(&b2, (char*)&x+6, 2);
	b2 &= (int16_t)0xF;
	b2 |= (exp << 4);
	memcpy((char*)&x+6, &b2, 2);
	if (neg) x = -x;
	return x;
}

} // namespace slisc
