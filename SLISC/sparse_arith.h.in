#pragma once
#include "arithmetic.h"
#include "Diag.h"
#include "Mcoo.h"
#include "Cmobd.h"
#include "sort.h"

namespace slisc {
//% types = {
//%        'Doub', 'Doub', 'Doub';
//%     'Comp', 'Comp', 'Doub';
//%     'Comp', 'Doub', 'Comp';
//%     'Comp', 'Comp', 'Comp';
//% };
//%------------------------------
//% [T, T1, T2] = varargin{:};
//% if ~(is_promo(T, T1) && is_promo(T, T2))
//%     error('illegal types!');
//% end
inline void mul_cmat_cmat_diag(@T@ *c, const @T1@ *a, Long_I Nr, Long_I Nc, const @T2@ *b)
{
    for (Long i = 0; i < Nc; ++i) {
        times_vvs(c, a, b[i], Nr);
        c += Nr; a += Nr;
    }
}
//%------------------------

//% types = {
//%        'Doub', 'Doub', 'Doub';
//%     'Comp', 'Doub', 'Comp';
//%     'Comp', 'Comp', 'Doub';
//%     'Comp', 'Comp', 'Comp';
//% };
//%------------------------------
//% [T, T1, T2] = varargin{:};
//% if ~(is_promo(T, T1) && is_promo(T, T2))
//%     error('illegal types!');
//% end
inline void mul_cmat_diag_cmat(@T@ *c, const @T1@ *a, const @T2@ *b, Long_I Nr, Long_I Nc)
{
    for (Long i = 0; i < Nc; ++i) {
        times_vvv(c, b, a, Nr);
        c += Nr; b += Nr;
    }
}
//%------------------------

//% types = {
//%     'Doub', 'Doub', 'Doub';
//%     'Comp', 'Doub', 'Comp';
//%     'Comp', 'Comp', 'Comp';
//% };
//%-------------------------------
//% [Ty,T,Tx] = varargin{:};
//% if ~is_promo(Ty, T) || ~is_promo(Ty, Tx)
//%     error('illegal types!');
//% end
inline void mul_v_coo_v(@Ty@ *y, const @T@ *a_ij, const Long *i, const Long *j, Long_I N1, Long_I Nnz, const @Tx@ *x)
{
    vecset(y, 0, N1);
    for (Long k = 0; k < Nnz; ++k)
        y[i[k]] += a_ij[k] * x[j[k]];
}

inline void mul_v_cooh_v(@Ty@ *y, const @T@ *a_ij, const Long *i, const Long *j, Long_I N1, Long_I Nnz, const @Tx@ *x)
{
    vecset(y, 0, N1);
    for (Long k = 0; k < Nnz; ++k) {
        Long r = i[k], c = j[k];
        if (r == c)
            y[r] += a_ij[k] * x[c];
        else {
            y[r] += a_ij[k] * x[c];
//% if is_comp(T)
            y[c] += conj(a_ij[k]) * x[r];
//% else
            y[c] += a_ij[k] * x[r];
//% end
        }
    }
}
//%------------------------

//% types = {
//%     'Int', 'Int', 'Int';
//%     'Doub', 'Doub', 'Doub';
//%     'Comp', 'Doub', 'Comp';
//%     'Comp', 'Comp', 'Comp';
//% };
//%-------------------------------
//% [Ty,T,Tx] = varargin{:};
//% if ~is_promo(Ty, T) || ~is_promo(Ty, Tx)
//%     error('illegal types!');
//% end
inline void mul_v_cmatobd_v(@Ty@ *y, const @Tx@ *x, const @T@ *a, Long_I blk_size, Long_I Nblk, Long_I N)
{
    vecset(y, 0, N);
    Long step = blk_size - 1, step2 = blk_size - 2;
    a += blk_size + 1; // move to first element

    // first block
    for (Long j = 0; j < step; ++j) {
        @Tx@ s = x[j];
        for (Long i = 0; i < step; ++i) {
            y[i] += (*a) * s;
            ++a;
        }
        ++a;
    }
    x += step2; y += step2; --a;

    // middle blocks
    for (Long blk = 1; blk < Nblk - 1; ++blk) {
        for (Long j = 0; j < blk_size; ++j) {
            @Tx@ s = x[j];
            for (Long i = 0; i < blk_size; ++i) {
                y[i] += (*a) * s;
                ++a;
            }
        }
        x += step; y += step;
    }
    
    // last block
    for (Long j = 0; j < step; ++j) {
        @Tx@ s = x[j];
        for (Long i = 0; i < step; ++i) {
            y[i] += (*a) * s;
            ++a;
        }
        ++a;
    }
}
//%-----------------------

//% types = {
//%     'VecInt', 'CmobdInt', 'VecInt';
//%     'VecDoub', 'CmobdDoub', 'VecDoub';
//%     'VecComp', 'CmobdComp', 'VecComp';
//%     'VecComp', 'CmobdDoub', 'VecComp';
//%     'VecComp', 'CmobdDoub', 'SvecComp';
//%     'SvecDoub', 'CmobdDoub', 'SvecDoub';
//%     'SvecComp', 'CmobdDoub', 'SvecComp';
//% };
//%------------------------------
//% [Ty, Ta, Tx] = varargin{:};
inline void mul(@Ty@_O y, @Ta@_I a, @Tx@_I x)
{
#ifdef SLS_CHECK_SHAPES
    if (y.size() != a.n0() || x.size() != a.n1())
        SLS_ERR("wrong shape!");
#endif
    mul_v_cmatobd_v(y.p(), x.p(), a.p(), a.nblk0(), a.nblk(), a.n0());
}
//%------------------------------

//% types = {
//%     'VecDoub', 'McooDoub', 'VecDoub';
//%     'VecComp', 'McooComp', 'VecComp';
//%     'SvecDoub', 'McooDoub', 'SvecDoub';
//%     'SvecComp', 'McooDoub', 'SvecComp';
//% };
//%------------------------------
//% [T, T1, T2] = varargin{:};
inline void mul(@T@_O y, @T1@_I a, @T2@_I x)
{
#ifdef SLS_CHECK_SHAPES
    if (a.n1() != x.size() || a.n0() != y.size())
        SLS_ERR("illegal shape!");
#endif
//% if is_dense_vec(T) && is_Mcoo(T1) && is_dense_vec(T2)
    mul_v_coo_v(y.p(), a.p(), a.row_p(), a.col_p(), a.n0(), a.nnz(), x.p());
//% elseif is_dense_vec(T) && is_Mcooh(T1) && is_dense_vec(T2)
    mul_v_cooh_v(y.p(), a.p(), a.row_p(), a.col_p(), a.n0(), a.nnz(), x.p());
//% else
//%     error('not implemented!');
//% end
}
//%------------------------

//% types = {
//%        'CmatDoub', 'CmatDoub', 'DiagDoub';
//%     'CmatComp', 'CmatComp', 'DiagDoub';
//%     'CmatComp', 'CmatComp', 'DiagComp';
//%     'CmatComp', 'CmatDoub', 'DiagComp';
//%        'CmatDoub', 'DiagDoub', 'CmatDoub';
//%     'CmatComp', 'DiagComp', 'ScmatDoub';
//%     'CmatComp', 'DiagComp', 'CmatComp';
//%     'CmatComp', 'DiagDoub', 'CmatComp';
//% };
//%------------------------------
//% [T, T1, T2] = varargin{:};
inline void mul(@T@_O y, @T1@_I a, @T2@_I x)
{
#ifdef SLS_CHECK_SHAPES
    if (a.n1() != x.n0())
        SLS_ERR("illegal shape!");
    if (y.n0() != a.n0() || y.n1() != x.n1())
        SLS_ERR("illegal shape!");
#endif
//% if is_dense(T) && is_cmajor(T) && is_dense(T1) && is_cmajor(T1) && is_Diag(T2)
    mul_cmat_cmat_diag(y.p(), a.p(), a.n0(), a.n1(), x.p());
//% elseif is_dense(T) && is_cmajor(T) && is_Diag(T1) && is_dense(T2) && is_cmajor(T2)
    mul_cmat_diag_cmat(y.p(), a.p(), x.p(), x.n0(), x.n1());
//% else
//%     error('not implemented!');
//% end
}
//%------------------------

//% types = {'Char'; 'Int'; 'Llong'; 'Doub'; 'Comp'};
//%------------------------------
//% T = varargin{:};
//% McooT = ['Mcoo' T];
//% SvecT = ['Svec' T];
inline void sort_r(@McooT@_IO a)
{
    Long Nnz = a.nnz();
    VecLong inds(Nnz), order(Nnz);
    linspace(order, 0, Nnz - 1);
    for (Long i = 0; i < Nnz; ++i)
        inds[i] = a.n1() * a.row(i) + a.col(i);
    sort(inds, order);
    @SvecT@ sli(a.p(), Nnz);
    reorder(sli, order);
    SvecLong sli1;
    sli1.set(a.row_p(), Nnz);
    reorder(sli1, order);
    sli1.set(a.col_p());
    reorder(sli1, order);
}
//%------------------------

// sort to column major and combine elements, the i-th element is moved to desk[i]-th element
// desk[i] might repeat
//% types = {'Char'; 'Int'; 'Llong'; 'Doub'; 'Comp';};
//%----------------------------
//% T = varargin{:};
//% McooT = ['Mcoo', T];
//% VbaseT = ['Vbase', T];
//% VecT = ['Vec', T];
inline Long sort_col_dry(VecLong_O dest, @McooT@_I coo)
{
#ifdef SLS_CHECK_SHAPES
    if (dest.size() != coo.nnz())
        SLS_ERR("wrong shape!");
#endif
    VecLong ind(coo.nnz()), order(coo.nnz());
    linspace(order, 0, order.size()-1);
    for (Long i = 0; i < coo.nnz(); ++i)
        ind[i] = coo.row(i) + coo.n0() * coo.col(i);
    sort(ind, order);
    Long k = 0;
    // i loop through sorted ind, k is the index for unique ind
    for (Long i = 0; i < coo.nnz()-1; ++i) {
        dest[order[i]] = k;
        if (ind[i+1] != ind[i])
            ++k;
    }
    dest[order[coo.nnz()-1]] = k;
    return k + 1;
}

inline void reorder(@McooT@_O new_coo, @McooT@_O coo, VecLong_I dest, Long_I new_Nnz)
{
    new_coo.resize(new_Nnz);
    for (Long i = 0; i < new_Nnz; ++i)
        new_coo[i] = 0;
    for (Long i = 0; i < coo.nnz(); ++i) {
        Long j = dest[i];
        new_coo[j] += coo[i];
        new_coo.row(j) = coo.row(i);
        new_coo.col(j) = coo.col(i);
    }
}
//%----------------------------

//% types = {
//%     'McooDoub', 'Doub';
//%     'McooComp', 'Doub';
//%     'McooComp', 'Imag';
//%     'McooComp', 'Comp';
//% };
//%----------------------------
//% [T, Ts] = varargin{:};
inline void operator*=(@T@_IO v, @Ts@_I s)
{
    times_equals_vs(v.p(), s, v.nnz());
}
//%------------------------

//% types = {
//%     'CmobdDoub', 'Doub';
//%     'CmobdComp', 'Doub';
//%     'CmobdComp', 'Comp';
//% };
//%----------------------------
//% [T, Ts] = varargin{:};
inline void operator*=(@T@_IO v, @Ts@_I s)
{
    v.cmat3() *= s;
}
//%------------------------

//% types = {
//%     'CmobdComp', 'CmobdDoub', 'Imag';
//% };
//%----------------------------
//% [T, T1, Ts] = varargin{:};
inline void times(@T@_O v, @T1@_I v1, @Ts@_I s)
{
    times(v.cmat3(), v1.cmat3(), s);
}
//%------------------------

//% types = {
//%     'McooComp', 'McooDoub', 'Imag';
//% };
//%----------------------------
//% [T, T1, Ts] = varargin{:};
inline void times(@T@_O v, @T1@_I v1, @Ts@_I s)
{
    times_vvs(v.p(), v1.p(), s, v1.nnz());
}
//%------------------------

// infinity norm (using maximum absolute sum of columns)
//% types = {'CmatDoub'; 'CmatComp';};
//%-----------------------------
//% T = varargin{:}; Ts = value_type(T);
//% Tr = rm_comp(Ts);
//% VecTr = ['Vec' Tr]; SvecTs_c = ['Svec' Ts '_c'];
inline @Tr@ norm_inf(@T@_I A)
{
    @VecTr@ abs_sum(A.n1()); copy(abs_sum, 0);
    for (Long j = 0; j < A.n1(); ++j)
        for (Long i = 0; i < A.n0(); ++i)
            abs_sum[j] += abs(A(i, j));
    return max(abs_sum);
}
//%-----------------------------

// infinity norm (using maximum absolute sum of columns)
//% types = {'CmobdInt'; 'CmobdDoub'; 'CmobdComp';};
//%-----------------------------
//% T = varargin{:}; Ts = value_type(T);
//% Tr = rm_comp(Ts);
//% VecTr = ['Vec' Tr]; SvecTs_c = ['Svec' Ts '_c'];
inline @Tr@ norm_inf(@T@_I A)
{
    Long N0 = A.nblk0(), N1 = N0 - 1, Nblk = A.nblk();
    @VecTr@ abs_sum(A.n1()); copy(abs_sum, 0);
    Long k = 0;
    @SvecTs_c@ sli(A.p() + N0 + 1, N1);
    // first block
    for (Long j = 1; j < N0; ++j) {
        abs_sum[k] += sum_abs(sli);
        ++k; sli.shift(N0);
    }
    --k;
    // middle blocks
    sli.set(N0); sli.shift(-1);
    for (Long blk = 1; blk < Nblk - 1; ++blk) {
        for (Long j = 0; j < N0; ++j) {
            abs_sum[k] += sum_abs(sli);
            ++k; sli.next();
        }
        --k;
    }
    // last block
    sli.set(N1);
    for (Long j = 0; j < N1; ++j) {
        abs_sum[k] += sum_abs(sli);
        ++k; sli.shift(N0);
    }
    return max(abs_sum);
}
//%---------------------

// infinity norm (using maximum absolute sum of columns)
//% types = {'McooDoub'; 'McooComp';};
//%-----------------------------
//% T = varargin{:}; Ts = value_type(T);
//% Tr = rm_comp(Ts);
//% VecTr = ['Vec' Tr];
inline @Tr@ norm_inf(@T@_I A)
{
    @VecTr@ abs_sum(A.n1()); copy(abs_sum, 0);
    for (Long i = 0; i < A.nnz(); ++i) {
        abs_sum[A.col(i)] += abs(A[i]);
    }
    return max(abs_sum);
}
//%---------------------

} // namespace slisc
