// solve eigen problem
#pragma once
#include "../arith/copy.h"

namespace slisc {
#ifdef SLS_USE_LAPACKE
// only upper triangle is needed
// eigen value in ascending order
//% tem('eig_sym', {
//% 'SvecDoub' 'ScmatDoub' 'ScmatDoub'
//% });
//%--------------------------------
//% [Tv, Tm, Tm2] = varargin{:};
//% [Tsv,Tsm,Tsm2] = val_t(Tv,Tm,Tm2);
//% if is_dense_vec(Tv) && is_dense_mat(Tm) && is_same_major(Tm, Tm2) && is_dense_mat(Tm2)
inline void eig_sym(@Tv@_O eigVal, @Tm@_O eigVec, @Tm2@_I A)
{
#ifdef SLS_CHECK_SHAPES
	if (A.n0() != A.n1() || !shape_cmp2(eigVec, A)
		|| eigVal.size() != eigVec.n0())
		SLS_ERR("wrong shape!");
#endif
//% req('copy(v,v)', {['Svec' Tsm] ['Svec' Tsm2]});
	copy(eigVec, A);
	Long N = A.n1();
	Long ret;
//% if is_Doub(Tsv) && is_Doub(Tsm2)
//%     if is_cmajor(Tm)
	ret = LAPACKE_dsyev(LAPACK_COL_MAJOR, 'V', 'U', N, eigVec.p(), N, eigVal.p());
//%     else
	ret = LAPACKE_dsyev(LAPACK_ROW_MAJOR, 'V', 'U', N, eigVec.p(), N, eigVal.p());
//%     end
//% else
//%     error('Not implemented!');
//% end
	if (ret != 0)
		SLS_ERR("failed!");
}
//% else
//%     error('Not implemented!');
//% end
//%------------------------

// only upper triangle is needed
// eigen value in ascending order
inline void eig_her(VecDoub_O eigVal, CmatComp_O eigVec, CmatComp_I A)
{
#ifdef SLS_CHECK_BOUNDS
	if (A.n0() != A.n1() || !shape_cmp2(eigVec, A)
		|| eigVal.size() != eigVec.n0())
		SLS_ERR("wrong shape!");
#endif
	copy(eigVec, A);
	Long N = A.n1();
	eigVal.resize(N);
	Long ret = LAPACKE_zheev(LAPACK_COL_MAJOR, 'V', 'U', N,
		(double _Complex*)eigVec.p(), N, eigVal.p());
	if (ret != 0)
		SLS_ERR("failed!");
}
#endif

#ifdef SLS_USE_MPLAPACK
// same as eig_sym(), for quad precision, needs workspace
//% tem('eig_sym_Q', {
//%  'SvecQdoub' 'ScmatQdoub' 'ScmatQdoub' 'SvecQdoub' });
//%--------------------------------
//% [Tv, Tm, Tm2, Twsp] = varargin{:};
//% [Tsv,Tsm,Tsm2] = val_t(Tv,Tm,Tm2);
//% if is_dense_vec(Tv) && is_dense_mat(Tm) && is_same_major(Tm, Tm2) && is_dense_mat(Tm2)
inline void eig_sym(@Tv@_O eigVal, @Tm@_O eigVec, @Tm2@_I A, @Twsp@_IO wsp_qd)
{
	Long N = A.n1();
#ifdef SLS_CHECK_SHAPES
	if (A.n0() != A.n1() || !shape_cmp2(eigVec, A)
		|| eigVal.size() != eigVec.n0())
		SLS_ERR("wrong shape!");
	if (wsp_qd.size() != 3*N) // this is gessed, Rsyev will show have error is not enough.
		SLS_ERR("wrong shape!");
#endif

//% req('copy(v,v)', {Tm,Tm2});
	copy(eigVec, A);
	Long ret;
//% if is_Qdoub(Tsv) && is_Qdoub(Tsm2) && is_cmajor(Tm)
	// Rsyev(const char *jobz, const char *uplo, mplapackint const n, _Float128 *a, mplapackint const lda, _Float128 *w, _Float128 *work, mplapackint const lwork, mplapackint &info);
	mplapackint ret0;
	Rsyev("V", "U", N, eigVec.p(), N, eigVal.p(), wsp_qd.p(), wsp_qd.size(), ret0);
	ret = ret0;
//% else
//%     error('Not implemented!');
//% end
	if (ret != 0)
		SLS_ERR("failed!");
}
//% else
//%     error('Not implemented!');
//% end
//%------------------------
#endif
} // namespace slisc
