// calculate spherical harmonics Y_{lm}(\theta,\phi) and coupled spherical harmonics
#pragma once
#include "../spec/unicode.h"
#include "legendreP.h"

namespace slisc {

// same definition with Wolfram Alpha
// see http://littleshi.cn/online/SphHar.html

//% tem('ylm_etc', {
//%     'Doub' 'Comp' '';
//%     'Qdoub' 'Qcomp' 'q';
//% });
//%--------------------------
//% [Tr,Tc,q] = varargin{:};
inline @Tc@ ylm(Long_I l, Long_I m, @Tr@_I theta, @Tr@_I phi)
{
	@Tr@ A, ret0;
	Long n;
	@Tr@ th = mod_fl(n, theta, 2 * PI@q@);
	@Tr@ ph;
	if (th > PI@q@) {
		th = 2 * PI@q@ - th;
		ph = mod_fl(n, phi + PI@q@, 2 * PI@q@);
	}
	else
		ph = mod_fl(n, phi, 2 * PI@q@);

	if (m >= 0) {
		A = sqrt((2 * l + 1)*factorial(l - m) / (4 * PI@q@ * factorial(l + m)));
		ret0 = A * legendre_Plm(l, m, cos(th));
	}
	else {
		A = pow(-1, m) * sqrt((2 * l + 1)*factorial(l + m) / (4 * PI@q@ * factorial(l - m)));
		ret0 = A * legendre_Plm(l, -m, cos(th));
	}

	if (m != 0) {
		@Tc@ ret = ret0 * exp(@Tc@(0., m*ph));
		return ret;
	}
	return ret0;
}

// generalized spherical harmonics
inline @Tc@ yl1l2LM(Long_I l1, Long_I l2, Long_I L, Long_I M,
	@Tr@_I theta1, @Tr@_I phi1, @Tr@_I theta2, @Tr@_I phi2)
{
	@Tc@ sum = 0.;
	Long Ndim, m1_max;
	cgTableDim(Ndim, m1_max, l1, l2, M);
	for (Long m1 = m1_max + 1 - Ndim; m1 <= m1_max; ++m1) {
		Long m2 = M - m1;
		sum += cleb_@Tr@(2*l1, 2*m1, 2*l2, 2*m2, 2*L, 2*M) *
			ylm(l1, m1, theta1, phi1) * ylm(l2, m2, theta2, phi2);
	}
	return sum;
}
//%--------------------------

} // namespace slisc
