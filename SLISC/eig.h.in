// solve eigen problem
#pragma once
#include "arithmetic.h"

namespace slisc {
#ifdef SLS_USE_LAPACKE
// only upper triangle is needed
// eigen value in ascending order
//% tem('eig_sym', { 'SvecDoub', 'ScmatDoub', 'CmatDoub' });
//%--------------------------------
//% [Tv, Tm, Tm2] = varargin{:};
//% [Tsv,Tsm,Tsm2] = val_t(Tv,Tm,Tm2);
//% if is_dense_vec(Tv) && is_Doub(Tsv) && is_dense_mat(Tm) && is_same_major(Tm, Tm2) && is_dense_mat(Tm2) && is_Doub(Tsm2)
inline void eig_sym(@Tv@_O eigVal, @Tm@_O eigVec, @Tm2@_I A)
{
#ifdef SLS_CHECK_BOUNDS
    if (A.n0() != A.n1() || !shape_cmp22(eigVec, A)
        || eigVal.size() != eigVec.n0())
        SLS_ERR("wrong shape!");
#endif
//% req('copy(v,v)', {Tm,Tm2});
    copy(eigVec, A);
    Int N = (Int)A.n1();
    Int ret;
//% if is_cmajor(Tm)
    ret = LAPACKE_dsyev(LAPACK_COL_MAJOR, 'V', 'U', N, eigVec.p(), N, eigVal.p());
//% else
    ret = LAPACKE_dsyev(LAPACK_ROW_MAJOR, 'V', 'U', N, eigVec.p(), N, eigVal.p());
//% end
    if (ret != 0)
        SLS_ERR("failed!");
}
//% else
//%     error('Not implemented!');
//% end
//%------------------------

// only upper triangle is needed
// eigen value in ascending order
inline void eig_her(VecDoub_O eigVal, CmatComp_O eigVec, CmatComp_I A)
{
#ifdef SLS_CHECK_BOUNDS
//% req('shape_cmp', {'CmatComp','CmatComp'});
    if (A.n0() != A.n1() || !shape_cmp(eigVec, A)
        || eigVal.size() != eigVec.n0())
        SLS_ERR("wrong shape!");
#endif
//% req('copy(v,v)', {'CmatComp','CmatComp'});
    copy(eigVec, A);
    Int N = (Int)A.n1();
    eigVal.resize(N);
    Int ret = LAPACKE_zheev(LAPACK_COL_MAJOR, 'V', 'U', N,
        (double _Complex*)eigVec.p(), N, eigVal.p());
    if (ret != 0)
        SLS_ERR("failed!");
}
#endif
} // namespace slisc
