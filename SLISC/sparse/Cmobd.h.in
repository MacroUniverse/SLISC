// overlapping block diagonal matrix (overlap by one element)
// such as the kinetic matrix for 1D FEDVR grid
// first block and last block has one less element in each dimension
// currently, first overlapping element must be zero (e.g. matrix-vector multiplication will depend on this)
// the out-of-bound elements in m_data have undefined values

#pragma once
#include "../arith/scalar_arith.h"
#include "../dense/Cmat3.h"

namespace slisc {

template <class T>
void veccpy(T *, const T *, Long_I);

//% tem('Cmobd', {'Int'; 'Llong';
//%   'Doub'; 'Comp'; 'Qdoub'; 'Qcomp';
//%   'Imag'; 'Qimag'; });
//%-----------------
//% T = varargin{:};
//% Cmat3T = ['Cmat3' T];
//% CmobdT = ['Cmobd' T];
//% req('vecset', {T});
void vecset(@T@ *, @T@_I, Long_I, Long_I);

class @CmobdT@
{
protected:
	@Cmat3T@ m_data;
	Long m_N0; // m_N0 = m_N1 = (blk_size - 1) * Nblk - 1
public:
	@CmobdT@();
	@CmobdT@(Long_I blk_size, Long_I Nblk);
	const @T@ &operator[](Long_I i) const;
	@T@ &operator[](Long_I i);
	Long find(Long_I i, Long_I j) const; // return single index to m_data, -1 if out of blocks
	const @T@ * p() const; // not the first element!
	@T@ * p();
	Long n0() const;
	Long n1() const;
	Long size() const;
	Long nnz() const;
	pair<Long,Long> blk_range(Long_I iblk) const; // the range of row/col index for each block
	const @Cmat3T@ &cmat3() const;
	@Cmat3T@ &cmat3();
	void set(@Cmat3T@_I a3); // set data from Cmat3
	Long nblk0() const; // nblk0() = m_data.n0() = m_data.n1()
	Long nblk() const; // m_data.n2()
	@T@ operator()(Long_I i, Long_I j) const;
	@T@ &ref(Long_I i, Long_I j);
	void resize(Long_I blk_size, Long_I Nblk);
};

typedef const @CmobdT@ &@CmobdT@_I;
typedef @CmobdT@ &@CmobdT@_O, &@CmobdT@_IO;

inline @CmobdT@::@CmobdT@() : @CmobdT@(0, 0) {}

inline @CmobdT@::@CmobdT@(Long_I blk_size, Long_I Nblk)
	: m_data(blk_size, blk_size, Nblk), m_N0(max(0, (blk_size-1)*Nblk-1))
{
#ifdef SLS_CHECK_SHAPES
	if (blk_size < 0 || Nblk < 0)
		SLS_ERR("blk_size < 0 or Nblk < 0!");
#endif
	Long step = sqr(nblk0());
	// set the first overlapped element to 0
	if (m_data.size() > 0)
		vecset(m_data.p() + step - 1, @T@(0), Nblk - 1, step);
}

inline const @T@ &@CmobdT@::operator[](Long_I i) const
{
	return m_data[i];
}

inline @T@ &@CmobdT@::operator[](Long_I i)
{
	return m_data[i];
}

inline Long @CmobdT@::find(Long_I i1, Long_I i2) const
{
#ifdef SLS_CHECK_BOUNDS
	if (i1 < 0 || i1 >= m_N0 || i2 < 0 || i2 >= m_N0)
		SLS_ERR("out of bound!");
#endif
	Long i = i1 + 1; Long j = i2 + 1;
	Long N = nblk0() - 1;
	Long iblk = i / N, jblk = j / N;
	Long m = i % N;
	Long step2 = nblk0(), step3 = step2 * step2;
	if (iblk == jblk) {
		if (i == j && m == 0 && iblk > 0)
			return step3 * iblk;
		return m + step2 * (j % N) + step3 * iblk;
	}
	else if (jblk == iblk - 1) {
		if (m == 0)
			return N + step2 * (j % N) + step3 * jblk;
	}
	else if (jblk == iblk + 1) {
		Long n = j % N;
		if (n == 0)
			return m + step2 * N + step3 * iblk;
	}
	return -1;
}

inline const @T@ * @CmobdT@::p() const
{
	return m_data.p();
}

inline @T@ * @CmobdT@::p()
{
	return m_data.p();
}

inline Long @CmobdT@::n0() const
{
	return m_N0;
}

inline Long @CmobdT@::n1() const
{
	return m_N0;
}

inline Long @CmobdT@::size() const
{
	return m_N0 * m_N0;
}

inline Long @CmobdT@::nnz() const
{
	Long N = nblk0(), Nblk = nblk();
	return (N*N - 1)*Nblk - 4 * N + 3;
}

inline pair<Long,Long> @CmobdT@::blk_range(Long_I iblk) const
{
	Long start, size;
	if (iblk == 0) {
		start = 0; size = nblk0()-1;
	}
	else {
		start = (nblk0()-1)*iblk-1;
		size = (iblk == nblk()-1 ? nblk0()-1 : nblk0());
	}
	return {start, size};
}

inline const @Cmat3T@& @CmobdT@::cmat3() const
{
	return m_data;
}

inline @Cmat3T@& @CmobdT@::cmat3()
{
	return m_data;
}

inline void @CmobdT@::set(@Cmat3T@_I a3)
{
	veccpy(m_data.p(), a3.p(), a3.size());
	// set the first overlapped element to 0
	Long step = sqr(nblk0());
	vecset(m_data.p() + step - 1, @T@(0), nblk() - 1, step);
}

inline Long @CmobdT@::nblk0() const
{
	return m_data.n0();
}

inline Long @CmobdT@::nblk() const
{
	return m_data.n2();
}

inline @T@ @CmobdT@::operator()(Long_I i1, Long_I i2) const
{
	Long ind0 = find(i1, i2);
	if (ind0 >= 0)
		return m_data[ind0];
	else
		return @T@(0);
}

inline @T@& @CmobdT@::ref(Long_I i, Long_I j)
{
	Long ind = find(i, j);
#ifdef SLS_CHECK_BOUNDS
	if (ind < 0)
		SLS_ERR("Cmobd: ref out of block!");
#endif
	return m_data[ind];
}

inline void @CmobdT@::resize(Long_I blk_size, Long_I Nblk)
{
	if (blk_size == nblk0() && Nblk == nblk())
		return;
	m_data.resize(blk_size, blk_size, Nblk);
	m_N0 = (blk_size - 1) * Nblk - 1;
	// set the first overlapped element to 0
	Long step = sqr(nblk0());
	vecset(m_data.p() + step - 1, @T@(0), Nblk - 1, step);
}
//%----------------------
} // namespace slisc
