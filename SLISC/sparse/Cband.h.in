// band diagonal matrix class
#pragma once
#include "../dense/Cmat.h"
#include "../dense/Dvec.h"
#include "../dense/Dcmat.h"

namespace slisc {

//% tem('Cband', {'Int'; 'Doub'; 'Comp'; 'Qdoub'; 'Qcomp'});
//%---------------------
//% T = varargin{:};
//% CmatT = ['Cmat' T];
//% CbandT = ['Cband' T];
//% DcmatT = ['Dcmat' T];
//% DvecT = ['Dvec' T];
class @CbandT@
{
public:
	Long m_N0;
	Long m_Nup;
	Long m_Nlow;
	Long m_idiag; // position of diagonal
	@CmatT@ m_a;

	@CbandT@();
	@CbandT@(Long_I N0, Long_I N1, Long_I Nup, Long_I Nlow, Long_I lda = -1, Long_I idiag = -1);

	@T@ * p();
	const @T@ * p() const;
	@T@ operator()(Long_I i, Long_I j) const;
	@T@ &ref(Long_I i, Long_I j);
	Long n0() const;
	Long n1() const;
	Long size() const;
	Long nup() const;
	Long nlow() const;
	Long lda() const;
	Long idiag() const;
	@CmatT@ &cmat();
	const @CmatT@ &cmat() const;
	@DcmatT@ band();
	@DcmatT@_c band() const;
	@DvecT@ diag();
	@DvecT@_c diag() const;
	void resize(Long_I lda, Long_I N1);
	void resize(Long_I N0, Long_I N1, Long_I Nup, Long_I Nlow, Long_I lda = -1, Long_I idiag = -1);
	void reshape(Long_I N0, Long_I Nup, Long_I Nlow, Long_I idiag = -1);
	void shift(Long_I idiag);
};

inline @CbandT@::@CbandT@(): m_N0(0), m_Nup(0), m_Nlow(0), m_idiag(0)
{}

inline @CbandT@::@CbandT@(Long_I N0, Long_I N1, Long_I Nup, Long_I Nlow, Long_I lda, Long_I idiag):
	m_N0(N0), m_Nup(Nup), m_Nlow(Nlow), m_idiag(idiag < 0 ? Nup : idiag), m_a(lda < 0? Nup + Nlow + 1 : lda, N1)
{
#ifdef SLS_CHECK_SHAPES
	if (m_idiag < m_Nup || m_a.n0() - m_idiag - 1 < m_Nlow)
	    SLS_ERR("@CbandT@: wrong shape: N0="+num2str(N0)+", N1="+num2str(N1)+
	        ", Nup="+num2str(Nup)+", Nlow="+num2str(Nlow)+
	        ", lda="+num2str(m_a.n0())+", idiag="+num2str(m_idiag));
#endif
}

inline @T@ * @CbandT@::p()
{
	return m_a.p();
}

inline const @T@ * @CbandT@::p() const
{
	return m_a.p();
}

inline @T@ @CbandT@::operator()(Long_I i, Long_I j) const
{
#ifdef SLS_CHECK_BOUNDS
	if (i < 0 || i >= m_N0 || j < 0 || j >= n1())
	    SLS_ERR("index out of bound!");
#endif
	if (i - j > m_Nlow || j - i > m_Nup)
	    return 0;
	return m_a(m_idiag + i - j, j);
}

inline @T@ &@CbandT@::ref(Long_I i, Long_I j)
{
#ifdef SLS_CHECK_BOUNDS
	if (i < 0 || i >= m_N0 || j < 0 || j >= n1())
	    SLS_ERR("index out of bound!");
#endif
	if (i - j > m_Nlow || j - i > m_Nup)
	    SLS_ERR("index out of band!");
	return m_a(m_idiag + i - j, j);
}

inline Long @CbandT@::n0() const
{
	return m_N0;
}

inline Long @CbandT@::n1() const
{
	return m_a.n1();
}

inline Long @CbandT@::size() const
{
	return n0() * n1();
}

inline Long @CbandT@::nup() const
{
	return m_Nup;
}

inline Long @CbandT@::nlow() const
{
	return m_Nlow;
}

inline Long @CbandT@::lda() const
{
	return m_a.n0();
}

inline Long @CbandT@::idiag() const
{
	return m_idiag;
}

inline @CmatT@ &@CbandT@::cmat()
{
	return m_a;
}

inline const @CmatT@ &@CbandT@::cmat() const
{
	return m_a;
}

inline @DcmatT@ @CbandT@::band()
{
	return @DcmatT@(&m_a[m_idiag - m_Nup], m_Nup + m_Nlow + 1, n1(), lda());
}

inline @DcmatT@_c @CbandT@::band() const
{
	return @DcmatT@_c(&m_a[m_idiag - m_Nup], m_Nup + m_Nlow + 1, n1(), lda());
}

inline @DvecT@ @CbandT@::diag()
{
	return @DvecT@(&m_a[m_idiag], n1(), lda());
}

inline @DvecT@_c @CbandT@::diag() const
{
	return @DvecT@_c(&m_a[m_idiag], n1(), lda());
}

inline void @CbandT@::resize(Long_I lda, Long_I N1)
{
	m_a.resize(lda, N1);
}

inline void @CbandT@::reshape(Long_I N0, Long_I Nup, Long_I Nlow, Long_I idiag)
{
	if (idiag >= 0)
	    m_idiag = idiag;
#ifdef SLS_CHECK_SHAPES
	if (m_idiag < Nup || lda() - m_idiag - 1 < Nlow) {
	    SLS_ERR("@CbandT@: wrong shape: N0="+num2str(N0)+", N1="+num2str(m_a.n1())+
	        ", Nup="+num2str(Nup)+", Nlow="+num2str(Nlow)+
	        ", lda="+num2str(m_a.n0())+", idiag="+num2str(m_idiag));
	}
#endif
	m_N0 = N0; m_Nup = Nup; m_Nlow = Nlow;
}

inline void @CbandT@::resize(Long_I N0, Long_I N1, Long_I Nup, Long_I Nlow, Long_I lda, Long_I idiag)
{
	resize(lda < 0? Nup+Nlow+1 : lda, N1);
	reshape(N0, Nup, Nlow, idiag < 0? Nup : idiag);
}

inline void @CbandT@::shift(Long_I idiag)
{
#ifdef SLS_CHECK_SHAPES
	if (idiag < m_Nup || lda() - idiag - 1 < m_Nlow)
	    SLS_ERR("@CbandT@: wrong shape: N0="+num2str(m_N0)+", N1="+num2str(m_a.n1())+
	        ", Nup="+num2str(m_Nup)+", Nlow="+num2str(m_Nlow)+
	        ", lda="+num2str(m_a.n0())+", idiag="+num2str(idiag));
#endif
	m_idiag = idiag;
}

typedef const @CbandT@ &@CbandT@_I;
typedef @CbandT@ &@CbandT@_O, &@CbandT@_IO;
//%-----------------------
} // namespace slisc
