#pragma once
#include "../arith/arith1.h"
#include "../arith/arith4.h"
#include "../arith/copy.h"
#include "../algo/sort.h"
#include "../sparse/Diag.h"
#include "../sparse/Mcoo.h"
#include "../sparse/Cmobd.h"

namespace slisc {

//% tem('obd==obd', { 'Comp' 'Comp'
//%  'Qcomp' 'Qcomp'
//%  'Comp' 'Doub'
//%  'Qcomp' 'Qdoub'
//%  'Doub' 'Doub'
//%  'Qdoub' 'Qdoub' });
//%------------------------------
//% [Ts, Ts1] = varargin{:};
inline bool operator==(Cmobd@Ts@_I a, Cmobd@Ts1@_I b)
{
//% req('v==v', {['Cmat3' Ts], ['Cmat3' Ts1]});
	return a.n0() == b.n0() && a.n1() == b.n1() && a.cmat3() == b.cmat3();
}

inline bool operator!=(Cmobd@Ts@_I a, Cmobd@Ts1@_I b) { return !(a == b); }
//%------------------------------

//% tem('mul_cmat_cmat_diag', { 'Comp', 'Doub', 'Comp';
//%    'Qcomp', 'Qdoub', 'Qcomp'; });
//%------------------------------
//% [T, T1, T2] = varargin{:};
//% if ~(is_promo(T, T1) && is_promo(T, T2))
//%     error('illegal types!');
//% end
//% req('add_vvs', {T, T1, T2});
inline void mul_cmat_cmat_diag(@T@ *c, const @T1@ *a, Long_I Nr, Long_I Nc, const @T2@ *b)
{
	for (Long i = 0; i < Nc; ++i) {
		times_vvs(c, a, b[i], Nr);
		c += Nr; a += Nr;
	}
}

//% req('add_vvv', {T, T2, T1});
inline void mul_cmat_diag_cmat(@T@ *c, const @T1@ *a, const @T2@ *b, Long_I Nr, Long_I Nc)
{
	for (Long i = 0; i < Nc; ++i) {
		times_vvv(c, b, a, Nr);
		c += Nr; b += Nr;
	}
}
//%------------------------

template <class Ty, class Ta, class Tx>
inline void mul_v_coo_v(Ty *y, const Ta *a_ij, const Long *i, const Long *j, Long_I N1, Long_I Nnz, const Tx *x)
{
	vecset(y, 0, N1);
	for (Long k = 0; k < Nnz; ++k)
		y[i[k]] += a_ij[k] * x[j[k]];
}

template <class Ty, class Ta, class Tx>
inline void mul_v_coo_v(Ty *y, const Ta *a_ij, const Long *i, const Long *j, Long_I N1, Long_I Nnz, const Tx *x, Long_I x_step)
{
	vecset(y, 0, N1);
	for (Long k = 0; k < Nnz; ++k)
		y[i[k]] += a_ij[k] * x[x_step*j[k]];
}

template <class Ty, class Ta, class Tx>
inline void mul_v_coo_v(Ty *y, const Ta *a_ij, const Long *i, const Long *j, Long_I N1, Long_I Nnz, const Tx *x,
							  Long_I y_step, Long_I x_step)
{
	vecset(y, 0, N1, y_step);
	for (Long k = 0; k < Nnz; ++k)
		y[y_step*i[k]] += a_ij[k] * x[x_step*j[k]];
}

template <class Ty, class Ta, class Tx>
inline void mul_v_coo_v_beta1(Ty *y, const Ta *a_ij, const Long *i, const Long *j, Long_I N1, Long_I Nnz, const Tx *x,
							  Long_I y_step, Long_I x_step)
{
	for (Long k = 0; k < Nnz; ++k)
		y[y_step*i[k]] += a_ij[k] * x[x_step*j[k]];
}

template <class Ty, class Ta, class Tx, class Talpha>
inline void mul_v_coo_v_beta1(Ty *y, const Ta *a_ij, const Long *i, const Long *j, Long_I N1, Long_I Nnz, const Tx *x,
							  Long_I x_step, const Talpha &alpha)
{
	for (Long k = 0; k < Nnz; ++k)
		y[i[k]] += alpha * a_ij[k] * x[x_step*j[k]];
}

template <class Ty, class Ta, class Tx, class Talpha>
inline void mul_v_coo_v_beta1(Ty *y, const Ta *a_ij, const Long *i, const Long *j, Long_I N1, Long_I Nnz, const Tx *x,
							  Long_I y_step, Long_I x_step, const Talpha &alpha)
{
	for (Long k = 0; k < Nnz; ++k)
		y[y_step*i[k]] += alpha * a_ij[k] * x[x_step*j[k]];
}

// assuming only one of the two redundant elements are stored
template <class Ty, class Ta, class Tx>
inline void mul_v_cooh_v(Ty *y, const Ta *a_ij, const Long *i, const Long *j, Long_I N1, Long_I Nnz, const Tx *x)
{
	vecset(y, 0, N1);
	for (Long k = 0; k < Nnz; ++k) {
		Long r = i[k], c = j[k];
		if (r == c)
			y[r] += a_ij[k] * x[c];
		else {
			y[r] += a_ij[k] * x[c];
			y[c] += slisc::conj(a_ij[k]) * x[r];
		}
	}
}

// TODO: we can optimize this by using BLAS/Eigen matrix-vector multiplication for each block
// or, just use Eigen sparse matrix
template <class Ty, class Tx, class Ta>
inline void mul_v_cmobd_v(Ty *y, const Tx *x, const Ta *a, Long_I blk_size, Long_I Nblk, Long_I N)
{
	vecset(y, 0, N);
	Long step = blk_size - 1, step2 = blk_size - 2;
	a += blk_size + 1; // move to first element

	// first block
	for (Long j = 0; j < step; ++j) {
		const Tx &s = x[j];
		for (Long i = 0; i < step; ++i) {
			y[i] += (*a) * s;
			++a;
		}
		++a;
	}
	x += step2; y += step2; --a;

	// middle blocks
	for (Long blk = 1; blk < Nblk - 1; ++blk) {
		for (Long j = 0; j < blk_size; ++j) {
			const Tx &s = x[j];
			for (Long i = 0; i < blk_size; ++i) {
				y[i] += (*a) * s;
				++a;
			}
		}
		x += step; y += step;
	}
	
	// last block
	for (Long j = 0; j < step; ++j) {
		const Tx &s = x[j];
		for (Long i = 0; i < step; ++i) {
			y[i] += (*a) * s;
			++a;
		}
		++a;
	}
}

// use a Cmobd submatrix to multiply a vector
template <class Ty, class Tx, class Ta>
inline void mul_v_cmobd_sub_v(Ty *y, const Tx *x, const Ta *a, Long_I blk_size, Long_I Nblk, Long_I Ny, Long_I start_blk, Long_I n_blk)
{
#ifdef SLS_CHECK_SHAPES
	SLS_ASSERT(start_blk >= 0);
	SLS_ASSERT(n_blk > 0);
	SLS_ASSERT(start_blk + n_blk <= Nblk);
	Long Ndim = Nblk * (blk_size-1) + 1;
	if (start_blk == 0) --Ndim;
	if (start_blk + n_blk == Nblk) --Ndim;
	SLS_ASSERT(Ny == Ndim);
	SLS_ASSERT(Ny == Ndim);
#endif
	vecset(y, 0, Ny);
	const Long step = blk_size - 1, step2 = blk_size - 2;
	Long blk = start_blk, nFe_mid = n_blk;
	bool has_last_blk = (start_blk + n_blk == Nblk);

	// first block
	if (start_blk == 0) {
		a += blk_size + 1; // move to first element
		for (Long j = 0; j < step; ++j) {
			const Tx &s = x[j];
			for (Long i = 0; i < step; ++i) {
				y[i] += (*a) * s;
				++a;
			}
			++a;
		}
		x += step2; y += step2; --a; ++blk; --nFe_mid;
	}
	else {
		// jump to the 1st elm of block `start_blk`
		a += blk_size * blk_size * start_blk;
	}

	// middle blocks
	if (has_last_blk) --nFe_mid;
	for (; blk < nFe_mid; ++blk) {
		for (Long j = 0; j < blk_size; ++j) {
			const Tx &s = x[j];
			for (Long i = 0; i < blk_size; ++i) {
				y[i] += (*a) * s;
				++a;
			}
		}
		x += step; y += step;
	}

	// last block
	if (has_last_blk) {
		for (Long j = 0; j < step; ++j) {
			const Tx &s = x[j];
			for (Long i = 0; i < step; ++i) {
				y[i] += (*a) * s;
				++a;
			}
			++a;
		}
	}
}

template <class Ty, class Tx, class Ta>
inline void mul_add_v_cmobd_sub_v(Ty *y, const Tx *x, const Ta *a, Long_I blk_size, Long_I Nblk, Long_I Ny,
	Long_I start_blk, Long_I n_blk, Long_I step_xy, Bool_I add_eq = false)
{
#ifdef SLS_CHECK_SHAPES
	SLS_ASSERT(start_blk >= 0);
	SLS_ASSERT(n_blk > 0);
	SLS_ASSERT(start_blk + n_blk <= Nblk);
	Long Ndim = Nblk * (blk_size-1) + 1;
	if (start_blk == 0) --Ndim;
	if (start_blk + n_blk == Nblk) --Ndim;
	SLS_ASSERT(Ny == Ndim);
	SLS_ASSERT(Ny == Ndim);
#endif
	const Long step = step_xy*(blk_size - 1), step2 = step_xy*(blk_size - 2);
	Long blk = start_blk, nFe_mid = n_blk;
	bool has_last_blk = (start_blk + n_blk == Nblk);

	if (!add_eq) vecset(y, 0, Ny);

	// first block
	if (start_blk == 0) {
		a += blk_size + 1; // move to first element
		for (Long j = 0; j < step; j+=step_xy) {
			const Tx &s = x[j];
			for (Long i = 0; i < step; i+=step_xy) {
				y[i] += (*a) * s;
				++a;
			}
			++a;
		}
		x += step2; y += step2; --a; ++blk; --nFe_mid;
	}
	else {
		// jump to the 1st elm of block `start_blk`
		a += blk_size * blk_size * start_blk;
	}

	// middle blocks
	if (has_last_blk) --nFe_mid;
	for (; blk < nFe_mid; ++blk) {
		for (Long j = 0; j < blk_size; j+=step_xy) {
			const Tx &s = x[j];
			for (Long i = 0; i < blk_size; i+=step_xy) {
				y[i] += (*a) * s;
				++a;
			}
		}
		x += step; y += step;
	}

	// last block
	if (has_last_blk) {
		for (Long j = 0; j < step; j+=step_xy) {
			const Tx &s = x[j];
			for (Long i = 0; i < step; i+=step_xy) {
				y[i] += (*a) * s;
				++a;
			}
			++a;
		}
	}
}

template <class Ty, class Tx, class Ta, class Talpha, class Tbeta>
inline void mul_v_cmobd_v(Ty *y, const Tx *x, const Ta *a, Long_I blk_size, Long_I Nblk, Long_I N,
	Long_I step_y, Long_I step_x, const Talpha &alpha, const Tbeta &beta)
{
	Long step = blk_size - 1, step2 = blk_size - 2;
	Long xstep = step*step_x, ystep = step*step_y;
	Long xstep2 = step2*step_x, ystep2 = step2*step_y;
	Long xblk_size = blk_size*step_x, yblk_size = blk_size*step_y;
	a += blk_size + 1; // move to first element

	if (beta == 0)
		vecset(y, 0, N, step_y);
	else
		times_eq_vs(y, beta, N, step_y);

	// first block
	for (Long j = 0; j < xstep; j+=step_x) {
		const Tx &s = x[j];
		for (Long i = 0; i < ystep; i+=step_y) {
			y[i] += (*a*alpha) * s;
			++a;
		}
		++a;
	}
	x += xstep2; y += ystep2; --a;

	// middle blocks
	for (Long blk = 1; blk < Nblk - 1; ++blk) {
		for (Long j = 0; j < xblk_size; j+=step_x) {
			Tx s = x[j];
			for (Long i = 0; i < yblk_size; i+=step_y) {
				y[i] += (*a*alpha) * s;
				++a;
			}
		}
		x += xstep; y += ystep;
	}
	
	// last block
	for (Long j = 0; j < xstep; j+=step_x) {
		Tx s = x[j];
		for (Long i = 0; i < ystep; i+=step_y) {
			y[i] += (*a*alpha) * s;
			++a;
		}
		++a;
	}
}

//% tem('mul(v,obd,v)', {
//%    'SvbaseInt' 'CmobdInt' 'SvbaseInt' 0
//%    'SvbaseDoub' 'CmobdDoub' 'SvbaseDoub' 0
//%    'SvbaseDoub' 'CmobdDoub' 'SvbaseDoub' 1
//%    'SvbaseQdoub' 'CmobdQdoub' 'SvbaseQdoub' 0
//%    'SvbaseComp' 'CmobdDoub' 'SvbaseComp' 0
//%    'SvbaseComp' 'CmobdDoub' 'SvbaseComp' 1
//%    'SvbaseComp' 'CmobdComp' 'SvbaseComp' 0
//%    'SvbaseComp' 'CmobdComp' 'SvbaseComp' 1
//%    'SvbaseComp' 'CmobdImag' 'SvbaseComp' 0
//%    'SvbaseComp' 'CmobdImag' 'SvbaseComp' 1
//%    'SvbaseQcomp' 'CmobdQdoub' 'SvbaseQcomp' 0
//%    'DvecInt', 'CmobdInt', 'DvecInt' 1
//%    'DvecDoub', 'CmobdDoub', 'DvecDoub' 1
//%    'DvecComp', 'CmobdDoub', 'DvecComp' 1
//% });
//%------------------------------
//% [Ty, Ta, Tx, has_alpha_beta] = varargin{:};
//% if has_alpha_beta
template <class Talpha, class Tbeta>
inline void mul(@Ty@_O y, @Ta@_I a, @Tx@_I x, const Talpha &alpha, const Tbeta &beta)
//% else
inline void mul(@Ty@_O y, @Ta@_I a, @Tx@_I x)
//% end
{
#ifdef SLS_CHECK_SHAPES
	if (y.size() != a.n0() || x.size() != a.n1())
		SLS_ERR("wrong shape!");
#endif
//% if has_alpha_beta
//%     if is_dense_vec(Ty), step_y = '1'; else, step_y = 'y.step()'; end
//%     if is_dense_vec(Tx), step_x = '1'; else, step_x = 'x.step()'; end
	mul_v_cmobd_v(y.p(), x.p(), a.p(), a.nblk0(), a.nblk(), a.n0(), @step_y@, @step_x@, alpha, beta);
//% else
//%     if is_Dvec(Ty) || is_Dvec(Tx), error('mul(v,obd,v): already implemented!'); end
	mul_v_cmobd_v(y.p(), x.p(), a.p(), a.nblk0(), a.nblk(), a.n0());
//% end
}

//% if is_Dvec(Ty) || is_Dvec(Tx)
inline void mul(@Ty@_O y, @Ta@_I a, @Tx@_I x) { return mul(y, a, x, 1, 0); }
//% end
//%------------------------------

// only use submatrix of a_sub to multiply a vector
// the submatrix is from the `start_blk` block, with `n_blk` # of blocks
inline void mul(SvbaseComp_O y, CmobdDoub_I a, SvbaseComp_I x, Long_I start_blk, Long_I n_blk)
{
#ifdef SLS_CHECK_SHAPES
	SLS_ASSERT(x.size() == y.size());
#endif
	mul_v_cmobd_sub_v(y.p(), x.p(), a.p(), a.nblk0(), a.nblk(), y.size(), start_blk, n_blk);
}

inline void mul(DvecComp_O y, CmobdDoub_I a, DvecComp_I x, Long_I start_blk, Long_I n_blk, bool add_eq = false)
{
#ifdef SLS_CHECK_SHAPES
	SLS_ASSERT(x.size() == y.size());
	SLS_ASSERT(x.step() == y.step());
#endif
	mul_add_v_cmobd_sub_v(y.p(), x.p(), a.p(), a.nblk0(), a.nblk(), y.size(), start_blk, n_blk, x.step(), add_eq);
}

//% tem('mul(v,coo,v)', {
//% 'SvbaseComp' 'McooDoub' 'SvbaseComp' 0
//% 'SvbaseComp' 'McooDoub' 'DvecComp' 0
//% 'SvbaseQcomp' 'McooQdoub' 'SvbaseQcomp' 0
//% 'SvbaseDoub' 'McooDoub' 'SvbaseDoub' 0
//% 'SvbaseQdoub' 'McooQdoub' 'SvbaseQdoub' 0
//% 'DvecDoub' 'McooDoub' 'SvbaseDoub' 1
//% 'DvecDoub' 'McooDoub' 'DvecDoub' 0
//% 'DvecDoub' 'McooDoub' 'DvecDoub' 1
//% 'DvecComp' 'McooDoub' 'SvbaseComp' 0
//% 'DvecComp' 'McooDoub' 'SvbaseComp' 1
//% 'DvecComp' 'McooDoub' 'DvecComp' 0
//% 'DvecComp' 'McooDoub' 'DvecComp' 1
//% 'SvbaseComp' 'McooDoub' 'DvecComp' 1
//% });
//%------------------------------
//% [T, T1, T2, add_eq] = varargin{:}; [Ts,Ts1,Ts2] = val_t(T,T1,T2);
//% if add_eq, suf = '_beta1'; else, suf = ''; end;
inline void mul@suf@(@T@_O y, @T1@_I a, @T2@_I x)
{
#ifdef SLS_CHECK_SHAPES
	if (a.n1() != x.size() || a.n0() != y.size())
		SLS_ERR("illegal shape!");
#endif
//% if is_dense_vec(T) && is_Mcoo(T1) && is_dense_vec(T2)
	mul_v_coo_v@suf@(y.p(), a.p(), a.row_p(), a.col_p(), a.n0(), a.nnz(), x.p());
//% elseif is_dense_vec(T) && is_Mcooh(T1) && is_dense_vec(T2)
	mul_v_cooh_v@suf@(y.p(), a.p(), a.row_p(), a.col_p(), a.n0(), a.nnz(), x.p());
//% elseif is_dense_vec(T) && is_Mcoo(T1) && is_Dvec(T2) && ~add_eq
	mul_v_coo_v@suf@(y.p(), a.p(), a.row_p(), a.col_p(), a.n0(), a.nnz(), x.p(), x.step());
//% elseif is_Dvec(T) && is_Mcoo(T1) && is_dense_vec(T2)
	mul_v_coo_v@suf@(y.p(), a.p(), a.row_p(), a.col_p(), a.n0(), a.nnz(), x.p(), y.step(), 1);
//% elseif is_Dvec(T) && is_Mcoo(T1) && is_Dvec(T2)
	mul_v_coo_v@suf@(y.p(), a.p(), a.row_p(), a.col_p(), a.n0(), a.nnz(), x.p(), y.step(), x.step());
//% end
}

//% if add_eq && is_Dvec(T) && is_Mcoo(T1) && is_Dvec(T2)
template <class Talpha>
inline void mul_beta1(@T@_O y, @T1@_I a, @T2@_I x, const Talpha &alpha)
{
#ifdef SLS_CHECK_SHAPES
if (a.n1() != x.size() || a.n0() != y.size())
		SLS_ERR("illegal shape!");
#endif
	mul_v_coo_v_beta1(y.p(), a.p(), a.row_p(), a.col_p(), a.n0(), a.nnz(), x.p(), y.step(), x.step(), alpha);
}
//% elseif add_eq && is_dense_vec(T) && is_Mcoo(T1) && is_Dvec(T2)
template <class Talpha>
inline void mul_beta1(@T@_O y, @T1@_I a, @T2@_I x, const Talpha &alpha)
{
#ifdef SLS_CHECK_SHAPES
if (a.n1() != x.size() || a.n0() != y.size())
		SLS_ERR("illegal shape!");
#endif
	mul_v_coo_v_beta1(y.p(), a.p(), a.row_p(), a.col_p(), a.n0(), a.nnz(), x.p(), x.step(), alpha);
}
//% end
//%------------------------

//% tem('mul(m,m,diag)', {
//%     'CmatComp', 'CmatDoub', 'DiagComp';
//%     'CmatQcomp', 'CmatQdoub', 'DiagQcomp';
//%     'CmatComp' 'CmatComp' 'DiagDoub'
//%     'CmatQcomp' 'CmatQcomp' 'DiagQdoub'
//%     'CmatComp', 'DiagComp', 'ScmatDoub';
//%     'CmatQcomp', 'DiagQcomp', 'ScmatQdoub';
//% });
//%------------------------------
//% [T, T1, T2] = varargin{:};
//% Ts = val_t(T); Ts1 = val_t(T1); Ts2 = val_t(T2);
//% req('mul_cmat_cmat_diag', {Ts, Ts1, Ts2});
inline void mul(@T@_O y, @T1@_I a, @T2@_I x)
{
#ifdef SLS_CHECK_SHAPES
	if (a.n1() != x.n0())
		SLS_ERR("illegal shape!");
	if (y.n0() != a.n0() || y.n1() != x.n1())
		SLS_ERR("illegal shape!");
#endif
//% if is_dense(T) && is_cmajor(T) && is_dense(T1) && is_cmajor(T1) && is_Diag(T2)
	mul_cmat_cmat_diag(y.p(), a.p(), a.n0(), a.n1(), x.p());
//% elseif is_dense(T) && is_cmajor(T) && is_Diag(T1) && is_dense(T2) && is_cmajor(T2)
	mul_cmat_diag_cmat(y.p(), a.p(), x.p(), x.n0(), x.n1());
//% else
//%     error('not implemented!');
//% end
}
//%------------------------

// similar to sort_col, for row major
//% tem('sort_row', {'Char'; 'Int'; 'Llong';
//%          'Doub'; 'Qdoub'; 'Comp'; 'Qcomp'});
//%------------------------------
//% T = varargin{:};
//% McooT = ['Mcoo' T];
//% SvecT = ['Svec' T];
inline void sort_row(@McooT@_IO a)
{
	Long Nnz = a.nnz();
	VecLong inds(Nnz), order(Nnz);
	linspace(order, 0, Nnz - 1);
	for (Long i = 0; i < Nnz; ++i)
		inds[i] = a.n1() * a.row(i) + a.col(i);
	sort(inds, order);
	@SvecT@ sli(a.p(), Nnz);
//% req('reorder', {SvecT, 'SvecLlong'; SvecT, 'SvecInt'});
	reorder(sli, order);
	SvecLong sli1;
	sli1.set(a.row_p(), Nnz);
//% req('reorder', {'SvecLlong', 'SvecLlong'; 'SvecInt', 'SvecInt'});
	reorder(sli1, order);
	sli1.set(a.col_p());
	reorder(sli1, order);
}
//%------------------------

// sort_col_dry(): sort elements to column major and combine repeated elements
// the i-th element should be moved (or +=) to desk[i]-th element
// reorder() does the actual sorting given output from sort_col_dry()
// return max(dest)+1, i.e. the nnz of the sorted coo
// sort_col(): in-place sorting
//% tem('sort_col', {'Char'; 'Int'; 'Llong'; 'Doub'; 'Qdoub'; 'Comp'; 'Qcomp';});
//%----------------------------
//% T = varargin{:};
//% McooT = ['Mcoo', T];
inline Long sort_col_dry(VecLong_O dest, @McooT@_I coo)
{
	Long N = coo.nnz();
#ifdef SLS_CHECK_SHAPES
	if (dest.size() != N)
		SLS_ERR("wrong shape!");
#endif
	VecLong ind(N), order(N);
	linspace(order, 0, N-1);
	for (Long i = 0; i < N; ++i)
		ind[i] = coo.row(i) + coo.n0() * coo.col(i);
	sort(ind, order);
	Long k = 0;
	for (Long i = 0; i < N-1; ++i) {
		dest[order[i]] = k;
		if (ind[i+1] != ind[i])
			++k;
	}
	dest[order[N-1]] = k;
	return k + 1;
}

inline void reorder(@McooT@_O new_coo, @McooT@_I coo, VecLong_I dest, Long_I new_Nnz)
{
	assert(&new_coo != &coo);
	new_coo.resize(new_Nnz);
	vecset(new_coo.p(), 0, new_Nnz);
	for (Long i = 0; i < coo.nnz(); ++i) {
		Long j = dest[i];
		new_coo[j] += coo[i];
		new_coo.row(j) = coo.row(i);
		new_coo.col(j) = coo.col(i);
	}
}

inline void sort_col(@McooT@_IO coo)
{
	VecLong dest(coo.nnz());
	Long new_Nnz = sort_col_dry(dest, coo);
	@McooT@ new_coo(coo.n0(), coo.n1(), new_Nnz);
	reorder(new_coo, coo, dest, new_Nnz);
	coo = move(new_coo);
}

//% Tr = rm_comp(T);
inline void rm_zero(@McooT@_IO coo, @Tr@_I thresh = 0)
{
	Long k = 0;
	for (Long i = 0; i < coo.nnz(); ++i) {
		if (abs(coo[i]) <= thresh)
			continue;
		if (k != i) {
			coo[k] = coo[i];
			coo.row(k) = coo.row(i);
			coo.col(k) = coo.col(i);
		}
		++k;
	}
	coo.resize(k);
}
//%----------------------------

//% tem('coo+=coo', {'Int'; 'Llong'; 'Doub'; 'Qdoub'; 'Comp'; 'Qcomp';});
//%----------------------------
//% T = varargin{:};
//% McooT = ['Mcoo', T];
inline void operator+=(@McooT@_O coo, @McooT@_I coo1)
{
	Long Nnz = coo.nnz();
	coo.resize(Nnz + coo1.nnz());
	for (Long i = 0; i < coo1.nnz(); ++i) {
		Long ii = Nnz+i;
		coo[ii] = coo1[i];
		coo.row(ii) = coo1.row(i);
		coo.col(ii) = coo1.col(i);
	}
}

inline void operator-=(@McooT@_O coo, @McooT@_I coo1)
{
	Long Nnz = coo.nnz();
	coo.resize(Nnz + coo1.nnz());
	for (Long i = 0; i < coo1.nnz(); ++i) {
		Long ii = Nnz+i;
		coo[ii] = -coo1[i];
		coo.row(ii) = coo1.row(i);
		coo.col(ii) = coo1.col(i);
	}
}
//%----------------------------

//% tem('coo==coo', {'Int'; 'Llong'; 'Doub'; 'Qdoub'; 'Comp'; 'Qcomp';});
//%----------------------------
//% T = varargin{:};
//% McooT = ['Mcoo', T];
inline bool operator==(@McooT@_IO coo, @McooT@_IO coo1)
{
	sort_col(coo); rm_zero(coo);
	sort_col(coo1); rm_zero(coo1);
	if (coo.nnz() != coo1.nnz())
		return false;
	if (!equals_vv(coo.p(), coo1.p(), coo.nnz()))
		return false;
	if (!equals_vv(coo.row_p(), coo1.row_p(), coo.nnz()))
		return false;
	if (!equals_vv(coo.col_p(), coo1.col_p(), coo.nnz()))
		return false;
	return true;
}
//%----------------------------

//% tem('coo*=s', { 'McooDoub', 'Doub'
//% 'McooQdoub', 'Qdoub'
//% 'McooComp', 'Doub';
//% 'McooQcomp', 'Qdoub';
//% 'McooComp', 'Imag';
//% 'McooQcomp', 'Qimag'; });
//%----------------------------
//% [T, Ts] = varargin{:};
//% req('add_eq_vs', {val_t(T),Ts});
inline void operator*=(@T@_IO v, @Ts@_I s)
{ times_eq_vs(v.p(), s, v.nnz()); }
//%------------------------

//% tem('obd*=s', {
//%   'CmobdDoub' 'Doub'
//%   'CmobdQdoub' 'Qdoub'
//%   'CmobdComp' 'Doub'
//%   'CmobdQcomp' 'Qdoub'
//%   'CmobdComp' 'Comp'
//%   'CmobdQcomp' 'Qcomp' });
//%----------------------------
//% [T, Ts] = varargin{:};
//% req('v+=s', {['Cmat3' val_t(T)], Ts});
inline void operator*=(@T@_IO v, @Ts@_I s)
{ v.cmat3() *= s; }
//%------------------------

//% tem('times(obd,obd,s)', { 'CmobdComp', 'CmobdDoub', 'Imag';
//%    'CmobdQcomp', 'CmobdQdoub', 'Qimag'; });
//%----------------------------
//% [T1, T2, Ts] = varargin{:};
//% [Ts1, Ts2] = val_t(T1, T2);
inline void times(@T1@_O v1, @T2@_I v2, @Ts@_I s)
{ times(v1.cmat3(), v2.cmat3(), s); }
//%------------------------

//% tem('times_coo', {
//%     'McooComp', 'McooDoub', 'Imag';
//%     'McooQcomp', 'McooQdoub', 'Qimag';
//% });
//%----------------------------
//% [T, T1, Ts] = varargin{:};
inline void times(@T@_O v, @T1@_I v1, @Ts@_I s)
{
	times_vvs(v.p(), v1.p(), s, v1.nnz());
}
//%------------------------

// infinity norm (using maximum absolute sum of columns)
//% tem('norm_inf', {'CmatDoub'; 'CmatComp'; 'CmatQcomp'; });
//%-----------------------------
//% T = varargin{:}; Ts = val_t(T);
//% Tr = rm_comp(Ts);
//% VecTr = ['Vec' Tr]; SvecTsC = ['Svec' Ts 'C'];
inline @Tr@ norm_inf(@T@_I A)
{
//% req('copy(v,s)', {VecTr});
	@VecTr@ abs_sum(A.n1()); copy(abs_sum, 0);
	for (Long j = 0; j < A.n1(); ++j)
		for (Long i = 0; i < A.n0(); ++i)
			abs_sum[j] += abs(A(i, j));
//% req('max', {VecTr});
	return max(abs_sum);
}
//%-----------------------------

// infinity norm (using maximum absolute sum of columns)
//% tem('norm_inf2', {'CmobdInt'; 'CmobdDoub'; 'CmobdQdoub'; 'CmobdComp'; 'CmobdQcomp';});
//%-----------------------------
//% T = varargin{:}; Ts = val_t(T);
//% Tr = rm_comp(Ts);
//% VecTr = ['Vec' Tr]; SvecTsC = ['Svec' Ts 'C'];
inline @Tr@ norm_inf(@T@_I A)
{
	Long N0 = A.nblk0(), N1 = N0 - 1, Nblk = A.nblk();
//% req('copy(v,s)', {['Svec' Tr]});
	thread_local static @VecTr@ abs_sum(A.n1());
	copy(abs_sum, 0);
	Long k = 0;
	@SvecTsC@ sli(A.p() + N0 + 1, N1);
	// first block
	for (Long j = 1; j < N0; ++j) {
//% req('sum_abs', {['Svec' Ts]});
		abs_sum[k] += sum_abs(sli);
		++k; sli.shift(N0);
	}
	--k;
	// middle blocks
	sli.set(N0); sli.shift(-1);
	for (Long blk = 1; blk < Nblk - 1; ++blk) {
		for (Long j = 0; j < N0; ++j) {
			abs_sum[k] += sum_abs(sli);
			++k; sli.next();
		}
		--k;
	}
	// last block
	sli.set(N1);
	for (Long j = 0; j < N1; ++j) {
		abs_sum[k] += sum_abs(sli);
		++k; sli.shift(N0);
	}
//% req('max', {['Svec' Tr]});
	return max(abs_sum);
}
//%---------------------

// infinity norm (using maximum absolute sum of columns)
//% tem('norm_inf3', {'McooDoub'; 'McooQdoub'; 'McooComp'; 'McooQcomp';});
//%-----------------------------
//% T = varargin{:}; Ts = val_t(T);
//% Tr = rm_comp(Ts);
//% VecTr = ['Vec' Tr];
inline @Tr@ norm_inf(@T@_I A)
{
//% req('copy(v,s)', {VecTr});
	@VecTr@ abs_sum(A.n1()); copy(abs_sum, 0);
	for (Long i = 0; i < A.nnz(); ++i) {
		abs_sum[A.col(i)] += abs(A[i]);
	}
//% req('max', {['Svec' Tr]});
	return max(abs_sum);
}
//%---------------------

} // namespace slisc
