#pragma once
#include "../dense/Vec.h"

namespace slisc {

void veccpy(Long *, const Long *, Long);

//% tem('Mcoo', {'Char'; 'Int'; 'Llong'; 'Doub'; 'Comp'; 'Qdoub'; 'Qcomp'; });
//%----------------------------
//% T = varargin{:};
//% McooT = ['Mcoo', T];
//% VbaseT = ['Vbase', T];
//% VecT = ['Vec', T];
void veccpy(@T@ *, const @T@ *, Long);

class @McooT@ : public @VbaseT@
{
private:
	typedef @VbaseT@ Base;
	using Base::m_p;
	using Base::m_N;
	Long m_N0, m_N1, m_Nnz;
	VecLong m_row, m_col;
public:
	using Base::p;
	@McooT@(): m_N0(0), m_N1(0), m_Nnz(0) {};
	@McooT@(Long_I N0, Long_I N1);
	@McooT@(Long_I N0, Long_I N1, Long_I Ncap); // reserve Ncap elements
	Long *row_p();
	const Long *row_p() const;
	Long *col_p();
	const Long *col_p() const;
	void operator<<(@McooT@ &rhs); // move data and rhs.resize(0)
	void push(@T@_I s, Long_I i, Long_I j); // add one nonzero element
	void set(@T@_I s, Long_I i, Long_I j); // change existing element or push new element
	Long n0() const;
	Long n1() const;
	Long size() const; // return m_N0 * m_N1
	Long nnz() const; // return number of non-zero elements
	Long capacity() const;
	// get single index using double index, return -1 if not found
	Long find(Long_I i, Long_I j) const;
	// reference to an element (element must exist)
	@T@ &ref(Long_I i, Long_I j);
	// double indexing (element need not exist)
	@T@ operator()(Long_I i, Long_I j) const;
	@T@ &operator[](Long_I ind); // return element
	@T@ operator[](Long_I ind) const;
	const Long &row(Long_I ind) const; // row index
	Long &row(Long_I ind);
	const Long &col(Long_I ind) const; // column index
	Long &col(Long_I ind);
	void trim(Long_I Nnz); // decrease m_Nnz to Nnz
	void resize(Long_I N); // set m_Nz
	void reserve(Long_I N); // reallocate memory, data will be lost m_Nz = 0
	void reserve_cpy(Long_I N); // reserve and conserve data
	void reshape(Long_I N0, Long_I N1); // change matrix shape
};

typedef const @McooT@ &@McooT@_I;
typedef @McooT@ &@McooT@_O, &@McooT@_IO;

inline @McooT@::@McooT@(Long_I N0, Long_I N1)
	: Base(0), m_N0(N0), m_N1(N1), m_Nnz(0), m_row(0), m_col(0)
{
	m_N = 0;
}

inline @McooT@::@McooT@(Long_I N0, Long_I N1, Long_I Ncap) :
	Base(Ncap), m_N0(N0), m_N1(N1), m_Nnz(0), m_row(Ncap), m_col(Ncap) {}

inline Long * @McooT@::row_p()
{
	return m_row.p();
}

inline const Long *@McooT@::row_p() const
{
	return m_row.p();
}

inline Long * @McooT@::col_p()
{
	return m_col.p();
}

inline const Long *@McooT@::col_p() const
{
	return m_col.p();
}

inline Long @McooT@::find(Long_I i, Long_I j) const
{
	for (Long n = 0; n < m_Nnz; ++n) {
	    if (row(n) == i && col(n) == j)
	        return n;
	}
	return -1;
}

inline @T@& @McooT@::ref(Long_I i, Long_I j)
{
#ifdef SLS_CHECK_BOUNDS
	if (i < 0 || i >= m_N0 || j < 0 || j >= m_N1)
	    SLS_ERR("@McooT@::operator()(i,j): index out of bounds!");
#endif
	Long n = find(i, j);
	if (n < 0)
	    SLS_ERR("@McooT@::operator()(i,j): element does not exist!");
	return m_p[n];
}

inline @T@ @McooT@::operator()(Long_I i, Long_I j) const
{
#ifdef SLS_CHECK_BOUNDS
	if (i < 0 || i >= m_N0 || j < 0 || j >= m_N1)
	    SLS_ERR("@McooT@::operator()(i,j): index out of bounds!");
#endif
	Long n = find(i, j);
	if (n < 0)
	    return 0; // never return a (const) reference to a temporary
	return m_p[n];
}

inline void @McooT@::operator<<(@McooT@ &rhs)
{
	Base::operator<<(rhs);
	m_row << rhs.m_row; m_col << rhs.m_col;
	m_Nnz = rhs.m_Nnz;
	rhs.m_Nnz = 0; rhs.m_N = 0;
}

inline void @McooT@::push(@T@_I s, Long_I i, Long_I j)
{
#ifdef SLS_CHECK_BOUNDS
	if (i<0 || i>=m_N0 || j<0 || j>=m_N1)
	    SLS_ERR("@McooT@::push(): index out of bounds!");
#endif
#ifdef SLS_CHECK_COO_REPEAT
	Long n;
	for (n = 0; n < m_Nnz; ++n) {
	    if (row(n) == i && col(n) == j)
	        SLS_ERR("@McooT@::push(s,i,j): element already exists!");
	}
#endif
	if (m_Nnz == m_N)
	    SLS_ERR("@McooT@::push(): out of capacity, please reserve! m_N = " + to_string(m_N));
	m_p[m_Nnz] = s; m_row[m_Nnz] = i; m_col[m_Nnz] = j;
	++m_Nnz;
}

inline void @McooT@::set(@T@_I s, Long_I i, Long_I j)
{
	Long n;
	// change
	for (n = 0; n < m_Nnz; ++n) {
	    if (row(n) == i && col(n) == j) {
	        m_p[n] = s; m_row[n] = i; m_col[n] = j; return;
	    }
	}
	// push
	if (m_Nnz == m_N)
	    SLS_ERR("@McooT@::set(): out of capacity, please reserve! m_N = " + to_string(m_N));
	m_p[m_Nnz] = s; m_row[m_Nnz] = i; m_col[m_Nnz] = j;
	++m_Nnz;
}

inline Long @McooT@::n0() const
{
	return m_N0;
}

inline Long @McooT@::n1() const
{
	return m_N1;
}

inline Long @McooT@::size() const
{
	return m_N0 * m_N1;
}

inline Long @McooT@::nnz() const
{
	return m_Nnz;
}

inline Long @McooT@::capacity() const
{
	return Base::size();
}

inline @T@ &@McooT@::operator[](Long_I ind)
{
#ifdef SLS_CHECK_BOUNDS
	if (ind<0 || ind>=m_Nnz)
	    SLS_ERR("@McooT@::operator(): subscript out of bounds!");
#endif
	return m_p[ind];
}

inline @T@ @McooT@::operator[](Long_I ind) const
{
#ifdef SLS_CHECK_BOUNDS
	if (ind<0 || ind>=m_Nnz)
	    SLS_ERR("@McooT@::operator() const: subscript out of bounds!");
#endif
	return m_p[ind];
}

inline const Long &@McooT@::row(Long_I ind) const
{
#ifdef SLS_CHECK_BOUNDS
	if (ind<0 || ind>=m_Nnz)
	    SLS_ERR("@McooT@::row() subscript out of bounds");
#endif
	return m_row[ind];
}

inline Long &@McooT@::row(Long_I ind)
{
#ifdef SLS_CHECK_BOUNDS
	if (ind<0 || ind>=m_Nnz)
	    SLS_ERR("@McooT@::row() subscript out of bounds");
#endif
	return m_row[ind];
}

inline const Long &@McooT@::col(Long_I ind) const
{
#ifdef SLS_CHECK_BOUNDS
	if (ind < 0 || ind >= m_Nnz)
	    SLS_ERR("@McooT@::col() subscript out of bounds");
#endif
	return m_col[ind];
}

inline Long &@McooT@::col(Long_I ind)
{
#ifdef SLS_CHECK_BOUNDS
	if (ind < 0 || ind >= m_Nnz)
	    SLS_ERR("@McooT@::col() subscript out of bounds");
#endif
	return m_col[ind];
}

inline void @McooT@::trim(Long_I Nnz)
{
#ifdef SLS_CHECK_SHAPES
	if (Nnz < 0)
	    SLS_ERR("@McooT@::trim() negative input!");
#endif
	if (Nnz < m_Nnz) m_Nnz = Nnz;
	else if (Nnz > m_Nnz) SLS_ERR("@McooT@::trim(): Nnz > m_Nnz!");
}

inline void @McooT@::resize(Long_I N)
{
#ifdef SLS_CHECK_BOUNDS
	if (N > m_N)
	    SLS_ERR("not enough capacity!");
#endif
	m_Nnz = N;
}

inline void @McooT@::reserve(Long_I N)
{
	Base::resize(N);
	m_row.resize(N);
	m_col.resize(N);
	m_Nnz = 0;
}

inline void @McooT@::reserve_cpy(Long_I N)
{
	@VecT@ data(N);
	VecLong row(N), col(N);
	veccpy(data.p(), m_p, m_Nnz);
	veccpy(row.p(), m_row.p(), m_Nnz);
	veccpy(col.p(), m_col.p(), m_Nnz);
	Base::operator<<(data);
	m_row << row; m_col << col;
}

inline void @McooT@::reshape(Long_I N0, Long_I N1)
{
	m_N0 = N0; m_N1 = N1;
}
//%------------------------
} // namespace slisc
