#pragma once
#include "arithmetic.h"
#include "cut.h"
#include "string.h"

namespace slisc {

// see if elm == vec[i], return i
// return -1 if not found
//% types = {
//%     'Int', 'VecInt';
//%     'Llong', 'VecLlong';
//%     'Char', 'Str';
//%     'Char32', 'Str32';
//%     'Str', 'vecStr';
//%     'Str32', 'vecStr32';
//%     'Llong', 'vecLlong';
//% };
//%------------------------
//% [Ts, Tv] = varargin{:};
inline Long search(@Ts@_I s, @Tv@_I v, Long_I start = 0)
{
    Long N = v.size();
    for (Long i = start; i < N; ++i) {
        if (s == v[i])
            return i;
    }
    return -1;
}
//%------------------------

// see if `match_head(s, v[i])`, return i
// see if `match_head(v[i], s)`, return i
// return -1 if not found
//% types = {
//%     'Str', 'vecStr';
//%     'Str32', 'vecStr32';
//% };
//%------------------------
//% [Ts, Tv] = varargin{:};
inline Long search_head(@Ts@_I s_short, @Tv@_I v_long, Long_I start = 0)
{
    Long N = v_long.size();
    for (Long i = start; i < N; ++i) {
        if (match_head(s_short, v_long[i]))
            return i;
    }
    return -1;
}

inline Long search_head(@Tv@_I v_short, @Ts@_I s_long, Long_I start = 0)
{
    Long N = v_short.size();
    for (Long i = start; i < N; ++i) {
        if (match_head(v_short[i], s_long))
            return i;
    }
    return -1;
}
//%------------------------

// return true, output ind: if v[ind] == s, else return false
// v is in ascending order
// if s < v[0], ind = -1;
// if s > v[N-1], ind = N-1;
// else, v[ind] < s < v[ind+1];
// algorithm: bisection
//% types = {
//%     'VecInt'; 'VecLlong'; 'VecDoub'; 'vecInt'; 'vecLlong'; 'vecStr'; 'vecStr32';
//% };
//%--------------------------
//% T = varargin{:}; Ts = value_type(T);
inline Bool lookup(Long_O ind, @T@_I v, @Ts@_I s)
{
    Long N = v.size(), ind1 = 0, ind2 = N - 1;
#ifdef SLS_CHECK_SHAPES
    if (N < 1)
        SLS_ERR("empty container!");
#endif
    Char diff = s == v[0] ? 0 : (s > v[0] ? 1 : -1);
    if (diff < 0) {
        ind = -1; return false;
    }
    else if (diff == 0) {
        ind = 0; return true;
    }
    diff = s == v[ind2] ? 0 : (s > v[ind2] ? 1 : -1);
    if (diff > 0) {
        ind = N - 1; return false;
    }
    if (diff == 0) {
        ind = ind2; return true;
    }
//% % N > 2 from here
    while (true) {
        ind = (ind1 + ind2) / 2;
        diff = s == v[ind] ? 0 : (s > v[ind] ? 1 : -1);
        if (diff < 0)
            ind2 = ind;
        else if (diff > 0)
            ind1 = ind;
        else
            return true;
        if (ind2 - ind1 == 1) {
            ind = ind1; return false;
        }
    }
}

inline Bool lookup(Long_O ind, @T@_I v, @Ts@_I s, Long ind1, Long ind2)
{
#ifdef SLS_CHECK_SHAPES
    Long N = ind2 - ind1 + 1;
    if (N < 1)
        SLS_ERR("range error!");
#endif
    Char diff = s == v[0] ? 0 : (s > v[0] ? 1 : -1);
    if (diff < 0) {
        ind = -1; return false;
    }
    if (diff == 0) {
        ind = 0; return true;
    }
    diff = s == v[ind2] ? 0 : (s > v[ind2] ? 1 : -1);
    if (diff > 0) {
        ind = ind2; return false;
    }
    if (diff == 0) {
        ind = ind2; return true;
    }
//% % N > 2 from here
    while (true) {
        ind = (ind1 + ind2) / 2;
        diff = s == v[ind] ? 0 : (s > v[ind] ? 1 : -1);
        if (diff < 0)
            ind2 = ind;
        else if (diff > 0)
            ind1 = ind;
        else
            return true;
        if (ind2 - ind1 == 1) {
            ind = ind1; return false;
        }
    }
}
//%------------------------

// check if v[i] == v[j] for any i and j > i
// return i >= start
// return -1 if no reapeat
//% types = {'vecStr'; 'vecStr32'; 'VecChar'; 'VecInt'; 'VecLlong'; 'vecLlong'};
//%--------------------------
//% T = varargin{:};
inline Long find_repeat(@T@_I v, Long_I start = 0)
{
    Long N = v.size();
    for (Long i = start; i < N; ++i) {
        for (Long j = i + 1; j < N; ++j) {
            if (v[i] == v[j])
                return i;
        }
    }
    return -1;
}

inline Long find_repeat(Long_O j, @T@_I v, Long_I start = 0)
{
    Long N = v.size();
    for (Long i = start; i < N; ++i) {
        for (j = i + 1; j < N; ++j) {
            if (v[i] == v[j])
                return i;
        }
    }
    return -1;
}
//%------------------------

// search a row from a matrix
// starting from the row `start`
// return the row index, return -1 if not found
//% types = {
//%   %  'VecInt', 'MatInt';
//%   %  'VecLlong', 'MatLlong';
//%     'VecInt', 'CmatInt';
//%     'VecLlong', 'CmatLlong';
//%     'DvecLlong', 'CmatLlong';
//%     'VecDoub', 'CmatDoub';
//% };
//%--------------------------
//% [Tv, Tmat] = varargin{:};
//% Tsli = cut2_type(Tmat);
inline Long search_row(@Tv@_I v, @Tmat@_I a, Long_I start = 0)
{
#ifdef SLS_CHECK_SHAPES
    if (v.size() != a.n1())
        SLS_ERR("wrong shape");
#endif
    for (Long i = start; i < a.n0(); ++i) {
        if (v == cut2(a, i))
            return i;
    }
    return -1;
}
//%------------------------
} // namespace slisc
