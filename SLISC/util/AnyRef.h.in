#pragma once
// AnyRef is like std::any, but doesn't own the object
// AnyRefC is the lower const version
#include "../global.h"

namespace slisc {

struct AnyRefC;

//% tem('AnyRef', {0; 1});
//%--------------------------------
//% constness = varargin{:};
//% if constness
//%     const = 'const '; AnyRef = 'AnyRefC';
//% else
//%     const = ''; AnyRef = 'AnyRef';
//% end
struct @AnyRef@ {
	@const@void *p;
	size_t type; // typeid, possibly from `typeid(...).hash_code()`

	// check type
	template <class T>
	bool is() const {
		return type == typeid(T).hash_code();
	}

//% if ~constness
	// copy values
	AnyRef &operator=(const AnyRefC &rhs) const;
//% end

	// bind
	template <class T>
	void bind(@const@T &s) {
		p = (@const@void *)&s;
		type = typeid(s).hash_code();
	}

	// get const reference
	template <class T>
	@const@T &get() const {
		if (!is<T>())
			SLS_ERR("getting wrong type");
		return *(T*)p;
	}

//% if ~constness
	operator const AnyRefC &() const {
		return reinterpret_cast<const AnyRefC &>(*this);
	}
	operator AnyRefC &() {
		return reinterpret_cast<AnyRefC &>(*this);
	}
//% end
};
//%--------------------------------

typedef const AnyRefC &AnyRef_I;
typedef const AnyRef &AnyRef_O, &AnyRef_IO;

inline AnyRef &AnyRef::operator=(AnyRef_I rhs) const {
	if (p == rhs.p)
		SLS_ERR("self assignment!");
	if (type != rhs.type)
		SLS_ERR("assignment of different types!");

	if (is<Int>())
		get<Int>() = rhs.get<Int>();
//% tem('AnyRef=', {'Llong'; 'Float'; 'Doub'; 'Comp'; 'Str'});
//%--------------------------------
//% mytype = varargin{:};
	else if (is<@mytype@>())
		get<@mytype@>() = rhs.get<@mytype@>();
//%--------------------------------
	else
		SLS_ERR("unsupported type!");
}

// compare
inline bool operator==(AnyRef_I a, AnyRef_I b) {
	if (a.type != b.type) return false;
	if (a.is<Int>())
		return a.get<Int>() == b.get<Int>();
//% tem('AnyRef==', {'Llong'; 'Float'; 'Doub'; 'Comp'; 'Str'});
//%--------------------------------
//% mytype = varargin{:};
	else if (a.is<@mytype@>())
		return a.get<@mytype@>() == b.get<@mytype@>();
//%--------------------------------
	else
		SLS_ERR("unsupported type!");
}

} // namespace slisc

namespace std {

// hasher for STL containers like unordered_set<>
template<>
struct hash<slisc::AnyRef> {
	size_t operator()(slisc::AnyRef_I s) const {
		if (s.is<slisc::Int>())
			return std::hash<slisc::Int>{}(s.get<slisc::Int>());
//% tem('hash_AnyRef', {'Llong'; 'Float'; 'Doub'; 'Str'});
//%--------------------------------
//% mytype = varargin{:};
		else if (s.is<slisc::@mytype@>())
			return std::hash<slisc::@mytype@>{}(s.get<slisc::@mytype@>());
//%--------------------------------
		else
			SLS_ERR("unsupported type!");
	}
};

} // namespace std