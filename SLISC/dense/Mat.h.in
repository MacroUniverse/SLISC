// row-major matrix container
#pragma once
#include "../dense/Vbase.h"

namespace slisc {
//% tem('Mat', {
//%     'Char'; 'Uchar'; 'Int'; 'Llong';
//%     'Float'; 'Doub'; 'Ldoub'; 'Qdoub';
//%     'Fcomp'; 'Comp'; 'Lcomp'; 'Qcomp';
//%     'Fimag'; 'Imag'; 'Limag';});
//%------------------------------------
//% T = varargin{:};
//% VbaseT = ['Vbase' T];
//% MatT = ['Mat' T];
class @MatT@ : public @VbaseT@
{
protected:
	typedef @VbaseT@ Base;
	Long m_N0, m_N1;
public:
	using Base::p;
	@MatT@(): m_N0(0), m_N1(0) {};
	@MatT@(Long_I N0, Long_I N1);
	@MatT@(const @MatT@ &rhs);        // Copy constructor
	@MatT@ &operator=(const @MatT@ &rhs);
	@MatT@ &operator=(@MatT@ &&rhs);
	@T@& operator()(Long_I i, Long_I j); // double indexing
	const @T@& operator()(Long_I i, Long_I j) const;
	Long n0() const;
	Long n1() const;
	void resize(Long_I N0, Long_I N1); // resize (contents not preserved)
};

inline @MatT@::@MatT@(Long_I N0, Long_I N1) : Base(N0*N1), m_N0(N0), m_N1(N1) {}

inline @MatT@::@MatT@(const @MatT@ &rhs) : Base(0)
{
	SLS_ERR("Copy constructor or move constructor is forbidden, use reference argument for function input or output, and use \"=\" to copy!");
}

inline @T@& @MatT@::operator()(Long_I i, Long_I j)
{
#ifdef SLS_CHECK_BOUNDS
	if (i < 0 || i >= m_N0 || j < 0 || j >= m_N1)
		SLS_ERR("@MatT@ subscript out of bounds");
#endif
	return m_p[m_N1*i+j];
}

inline const @T@ &@MatT@::operator()(Long_I i, Long_I j) const
{
#ifdef SLS_CHECK_BOUNDS
	if (i < 0 || i >= m_N0 || j < 0 || j >= m_N1)
		SLS_ERR("@MatT@ subscript out of bounds");
#endif
	return m_p[m_N1*i+j];
}

inline Long @MatT@::n0() const
{
	return m_N0;
}

inline Long @MatT@::n1() const
{
	return m_N1;
}

inline void @MatT@::resize(Long_I N0, Long_I N1)
{
	if (N0 != m_N0 || N1 != m_N1) {
		Base::resize(N0*N1);
		m_N0 = N0; m_N1 = N1;
	}
}

typedef const @MatT@ &@MatT@_I;
typedef @MatT@ &@MatT@_O, &@MatT@_IO;
//%------------------------

#ifdef SLS_USE_INT_AS_LONG
typedef MatInt MatLong;
#else
typedef MatLlong MatLong;
#endif
typedef const MatLong &MatLong_I;
typedef MatLong &MatLong_O, &MatLong_IO;

} // namespace slisc
