// Cmat container
#pragma once
#include "../dense/Vec.h"
#include "Scmat.h"

namespace slisc {
//% tem('Cmat', {
//%     'Bool'; 'Char'; 'Uchar'; 'Int'; 'Llong';
//%     'Float'; 'Doub'; 'Ldoub'; 'Qdoub';
//%     'Fcomp'; 'Comp'; 'Lcomp'; 'Qcomp';
//%     'Fimag'; 'Imag'; 'Limag'; 'Qimag';});
//%----------------------------------------
//% T = varargin{:};
//% CmatT = ['Cmat' T];
//% VbaseT = ['Vbase' T];
class @CmatT@ : protected @VbaseT@
{
protected:
	typedef @VbaseT@ Base;
	Long m_N0;
public:
	@CmatT@(): m_N0(0) {};
	@CmatT@(Long_I N0, Long_I N1);
	@CmatT@(const @CmatT@ &rhs); // copy constructor
	@CmatT@(@CmatT@ &&rhs); // move constructor
	@CmatT@ &operator=(const @CmatT@ &rhs); // copy assignment
	@CmatT@ &operator=(@CmatT@ &&rhs); // move assignment
	using Base::p;
	using Base::size;
	using Base::operator[];
	using Base::end;
	@T@& operator()(Long_I i, Long_I j); // double indexing
	const @T@& operator()(Long_I i, Long_I j) const;
	Long n0() const;
	Long n1() const;
	void resize(Long_I N0, Long_I N1); // resize (values not preserved)
	void reshape(Long_I N0, Long_I N1); // reshape (N0*N1 == m_N)

	operator const Scmat@T@C&() const;
	operator const Scmat@T@&();
};

inline @CmatT@::@CmatT@(Long_I N0, Long_I N1) : Base(N0*N1), m_N0(N0) {}

inline @CmatT@::@CmatT@(const @CmatT@ &rhs) : Base(rhs), m_N0(rhs.m_N0)
{
#ifdef SLS_NO_CPY_CONSTRUCTOR
	SLS_ERR("copy constructor forbidden!");
#endif
}

inline @CmatT@::@CmatT@(@CmatT@ &&rhs)
	: Base(move(rhs)), m_N0(rhs.m_N0) {}

inline @CmatT@ &@CmatT@::operator=(const @CmatT@ &rhs)
{
	Base::operator=(rhs);
	resize(rhs.n0(), rhs.n1());
	return *this;
}

inline @CmatT@ &@CmatT@::operator=(@CmatT@ &&rhs)
{
	Base::operator=(move(rhs));
	m_N0 = rhs.m_N0;
	return *this;
}

inline @T@ &@CmatT@::operator()(Long_I i, Long_I j)
{
#ifdef SLS_CHECK_BOUNDS
	if (i < 0 || i >= m_N0 || j < 0 || j >= n1()) {
		stringstream ss; ss << "@CmatT@ index (" << i << ',' << j << ") out of bounds: shape = (" << m_N0 << ',' << n1() << ')';
		SLS_ERR(ss.str());
	}
#endif
	return m_p[i+m_N0*j];
}

inline const @T@ &@CmatT@::operator()(Long_I i, Long_I j) const
{
#ifdef SLS_CHECK_BOUNDS
	if (i < 0 || i >= m_N0 || j < 0 || j >= n1()) {
		stringstream ss; ss << "@CmatT@ index (" << i << ", " << j
			<< ") out of bounds: shape = (" << m_N0 << ", " << n1() << ')';
		SLS_ERR(ss.str());
	}
#endif
	return m_p[i+m_N0*j];
}

inline Long @CmatT@::n0() const
{ return m_N0; }

inline Long @CmatT@::n1() const
{ return m_N0 == 0 ? 0 : m_N/m_N0; }

inline void @CmatT@::resize(Long_I N0, Long_I N1)
{
	if (N0 != m_N0 || N1 != n1()) {
		Base::resize(N0*N1);
		m_N0 = N0;
	}
}

inline void @CmatT@::reshape(Long_I N0, Long_I N1)
{
#ifdef SLS_CHECK_SHAPES
	if (N0*N1 != m_N) {
		stringstream ss;
		ss  << "@CmatT@ reshaping from (" << m_N0 << ", " << n1()
			<< ") , with " << m_N << "allocated elements, to (" << N0 << ", "
			<< N1 << "), element number not the same!";
		SLS_ERR(ss.str());
	}
#endif
	m_N0 = N0;
}

inline @CmatT@::operator const Scmat@T@C&() const {
	return reinterpret_cast<const Scmat@T@C&>(*this);
}

inline @CmatT@::operator const Scmat@T@&() {
	return reinterpret_cast<const Scmat@T@&>(*this);
}

typedef const @CmatT@ &@CmatT@_I;
typedef @CmatT@ &@CmatT@_O, &@CmatT@_IO;

//%----------------------------------------

#ifdef SLS_USE_INT_AS_LONG
typedef CmatInt CmatLong;
#else
typedef CmatLlong CmatLong;
#endif
typedef const CmatLong &CmatLong_I;
typedef CmatLong &CmatLong_O, &CmatLong_IO;

} // namespace slisc
