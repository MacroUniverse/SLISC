// Cmat container
#pragma once
#include "../dense/Vec.h"

namespace slisc {
//% tem('Cmat4', {
//%     'Char'; 'Int'; 'Llong';
//%     'Float'; 'Doub'; 'Ldoub'; 'Qdoub';
//%     'Fcomp'; 'Comp'; 'Lcomp'; 'Qcomp';
//%     'Fimag'; 'Imag'; 'Limag'; 'Qimag';});
//%----------------------------------------
//% T = varargin{:};
//% Cmat4T = ['Cmat4' T];
//% VecT = ['Vec' T];
class @Cmat4T@ : public @VecT@
{
protected:
	typedef @VecT@ Base;
	Long m_N0, m_N1, m_N2, m_N3;
public:
	@Cmat4T@(): m_N0(0), m_N1(0), m_N2(0), m_N3(0) {};
	@Cmat4T@(Long_I N0, Long_I N1, Long_I N2, Long_I N3);
	@Cmat4T@(const @Cmat4T@ &rhs);   // copy constructor
	@Cmat4T@(@Cmat4T@ &&rhs);   // move constructor
	@Cmat4T@ &operator=(const @Cmat4T@ &rhs); // copy assignment
	void resize(Long_I N0, Long_I N1, Long_I N2, Long_I N3);
	inline void resize(Long_I N);
	inline void reshape(Long_I N0, Long_I N1, Long_I N2, Long_I N3);
	@T@ &operator()(Long_I i, Long_I j, Long_I k, Long_I l);
	const @T@ &operator()(Long_I i, Long_I j, Long_I k, Long_I l) const;
	Long n0() const;
	Long n1() const;
	Long n2() const;
	Long n3() const;
};

inline @Cmat4T@::@Cmat4T@(Long_I N0, Long_I N1, Long_I N2, Long_I N3)
	: Base(N0*N1*N2*N3), m_N0(N0), m_N1(N1), m_N2(N2), m_N3(N3) {}

// Copy constructor
inline @Cmat4T@::@Cmat4T@(const @Cmat4T@ &rhs): Base(rhs),
	m_N0(rhs.m_N0), m_N1(rhs.m_N1), m_N2(rhs.m_N2), m_N3(rhs.m_N3)
{
#ifdef SLS_NO_CPY_CONSTRUCTOR
	SLS_ERR("copy constructor forbidden!");
#endif
}

inline @Cmat4T@::@Cmat4T@(@Cmat4T@ &&rhs)
	: Base(std::move(rhs)), m_N0(rhs.m_N0), m_N1(rhs.m_N1), m_N2(rhs.m_N2), m_N3(rhs.m_N3) {}

inline @Cmat4T@ &@Cmat4T@::operator=(const @Cmat4T@ &rhs)
{
	Base::operator=(rhs);
	m_N0 = rhs.m_N0; m_N1 = rhs.m_N1;
	m_N2 = rhs.m_N2; m_N3 = rhs.m_N3;
	return *this;
}

inline void @Cmat4T@::resize(Long_I N0, Long_I N1, Long_I N2, Long_I N3)
{
	if (N0 != m_N0 || N1 != m_N1 || N2 != m_N2 || N3 != m_N3) {
		Base::resize(N0*N1*N2*N3);
		m_N0 = N0; m_N1 = N1; m_N2 = N2; m_N3 = N3;
	}
}

inline void @Cmat4T@::resize(Long_I N)
{
#ifdef SLS_CHECK_BOUNDS
	if (N < m_N0*m_N1*m_N2*m_N3) {
		stringstream ss;
		ss  << "@Cmat4T@ resizing from (" << m_N0 << ',' << m_N1
			<< ',' << m_N2 << ',' << m_N3 << ") , with " << m_N << "allocated elements, to "
			<< N << " elements is illegal!";
		SLS_ERR(ss.str());
	}
#endif
	Base::resize(N);
}

inline void @Cmat4T@::reshape(Long_I N0, Long_I N1, Long_I N2, Long_I N3)
{
#ifdef SLS_CHECK_SHAPES
	if (N0*N1*N2*N2 < m_N) {
		stringstream ss;
		ss  << "@Cmat4T@ reshaping from (" << m_N0 << ',' << m_N1
			<< ',' << m_N2 << ',' << m_N3 << ") , with " << m_N << "allocated elements, to (" << m_N0 << ',' << m_N1
			<< ',' << m_N2 << ',' << m_N3 << "), element number not the same!";
		SLS_ERR(ss.str());
	}
#endif
	m_N0 = N0; m_N1 = N1;
	m_N2 = N2; m_N3 = N3;
}

inline @T@ &@Cmat4T@::operator()(Long_I i, Long_I j, Long_I k, Long_I l)
{
#ifdef SLS_CHECK_BOUNDS
	if (i < 0 || i >= m_N0 || j < 0 || j >= m_N1 ||
		k < 0 || k >= m_N2 || l < 0 || l >= m_N3)
		SLS_ERR("Matrix subscript out of bounds");
#endif
	Long N1N2 = m_N0 * m_N1;
	return m_p[i + m_N0*j + N1N2 *k + N1N2 *m_N2*l];
}

inline const @T@ &@Cmat4T@::operator()(Long_I i, Long_I j, Long_I k, Long_I l) const
{
#ifdef SLS_CHECK_BOUNDS
	if (i < 0 || i >= m_N0 || j < 0 || j >= m_N1 ||
		k < 0 || k >= m_N2 || l < 0 || l >= m_N3)
		SLS_ERR("Matrix subscript out of bounds");
#endif
	Long N1N2 = m_N0 * m_N1;
	return m_p[i + m_N0 * j + N1N2 * k + N1N2 * m_N2*l];
}

inline Long @Cmat4T@::n0() const {
	return m_N0;
}

inline Long @Cmat4T@::n1() const {
	return m_N1;
}

inline Long @Cmat4T@::n2() const {
	return m_N2;
}

inline Long @Cmat4T@::n3() const {
	return m_N3;
}

typedef const @Cmat4T@ &@Cmat4T@_I;
typedef @Cmat4T@ &@Cmat4T@_O, &@Cmat4T@_IO;

//%-----------------------------

#ifdef SLS_USE_INT_AS_LONG
typedef Cmat4Int Cmat4Long;
#else
typedef Cmat4Llong Cmat4Long;
#endif
typedef const Cmat4Long &Cmat4Long_I;
typedef Cmat4Long &Cmat4Long_O, &Cmat4Long_IO;

} // namespace slisc
