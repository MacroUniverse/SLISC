// vector container
#pragma once
#include "../dense/Vbase.h"

namespace slisc {
//% tem('Vec', {
//%     'Bool'; 'Char'; 'Uchar'; 'Int'; 'Llong';
//%     'Float'; 'Doub'; 'Ldoub'; 'Qdoub';
//%     'Fcomp'; 'Comp'; 'Lcomp'; 'Qcomp';
//%     'Fimag'; 'Imag'; 'Limag'; 'Qimag';});
//%----------------------------------------------------------
//% T = varargin{:};
//% VecT = ['Vec' T];
//% VbaseT = ['Vbase' T];
class @VecT@ : public @VbaseT@ {
protected:
	typedef @VbaseT@ Base;
public:
	using @VbaseT@::@VbaseT@;
	@VecT@() = default;
	explicit @VecT@(Long_I N) : Base(N) {}
	@VecT@(const @VecT@ &rhs) = default;
	@VecT@(@VecT@ &&) = default;
	@VecT@ &operator=(const @VecT@ &) = default;
	@VecT@ &operator=(@VecT@ &&) = default;
	operator const Svec@T@C&() const;
	operator const Svec@T@&();
};

inline @VecT@::operator const Svec@T@C&() const {
	return reinterpret_cast<const Svec@T@C&>(*this);
}

inline @VecT@::operator const Svec@T@&() {
	return reinterpret_cast<const Svec@T@&>(*this);
}

typedef const @VecT@ &@VecT@_I;
typedef @VecT@ &@VecT@_O, &@VecT@_IO;
//%------------------------

#ifdef SLS_USE_INT_AS_LONG
typedef VecInt VecLong;
#else
typedef VecLlong VecLong;
#endif
typedef const VecLong &VecLong_I;
typedef VecLong &VecLong_O, &VecLong_IO;

} // namespace slisc
