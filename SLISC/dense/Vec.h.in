// vector container
#pragma once
#include "../dense/Vbase.h"

namespace slisc {
//% tem('Vec', {
//%     'Char'; 'Uchar'; 'Int'; 'Llong';
//%     'Float'; 'Doub'; 'Ldoub'; 'Qdoub';
//%     'Fcomp'; 'Comp'; 'Lcomp'; 'Qcomp';
//%     'Fimag'; 'Imag'; 'Limag';});
//%----------------------------------------------------------
//% T = varargin{:};
//% VecT = ['Vec' T];
//% VbaseT = ['Vbase' T];
class @VecT@ : public @VbaseT@
{
public:
	typedef @VbaseT@ Base;
	@VecT@() = default;
	explicit @VecT@(Long_I N);
	@VecT@(const @VecT@ &rhs); // copy constructor
	@VecT@ &operator=(const @VecT@ &rhs); // copy assignment
	void operator<<(@VecT@ &rhs); // move data and rhs.resize(0)
};

inline @VecT@::@VecT@(Long_I N) : Base(N) {}

inline @VecT@::@VecT@(const @VecT@ &rhs) : Base(rhs)
{
#ifdef SLS_NO_CPY_CONSTRUCTOR
	SLS_ERR("copy constructor forbidden!");
#endif
}

inline @VecT@ &@VecT@::operator=(const @VecT@ &rhs)
{
	if (this == &rhs) return *this;
	resize(rhs.size());
	if (m_N > 0)
		memcpy(m_p, rhs.p(), sizeof(@T@)*size());
	return *this;
}

inline void @VecT@::operator<<(@VecT@ &rhs)
{
	Base::operator<<(rhs);
}

typedef const @VecT@ &@VecT@_I;
typedef @VecT@ &@VecT@_O, &@VecT@_IO;

// common api for STL and SLISC
inline Long size(@VecT@_I v) { return v.size(); }

inline const @T@ *p(@VecT@_I v) { return v.p(); }

inline @T@ *p(@VecT@ &v) { return v.p(); }

//%------------------------

#ifdef SLS_USE_INT_AS_LONG
typedef VecInt VecLong;
#else
typedef VecLlong VecLong;
#endif
typedef const VecLong &VecLong_I;
typedef VecLong &VecLong_O, &VecLong_IO;

// implemented with vector<bool>, not actually a vector of bool
class VecBool : public VbaseBool
{
public:
	typedef VbaseBool Base;
	using Base::ref; // bit reference

	VecBool() = default;
	explicit VecBool(Long_I N);
	VecBool(const VecBool &rhs); // copy constructor
	VecBool &operator=(const VecBool &rhs) = delete;
	void operator<<(VecBool &rhs); // move data and rhs.resize(0)
};

inline VecBool::VecBool(Long_I N) : Base(N) {}

inline VecBool::VecBool(const VecBool &rhs) : Base(rhs)
{
#ifdef SLS_NO_CPY_CONSTRUCTOR
	SLS_ERR("copy constructor forbidden!");
#endif
}

inline void VecBool::operator<<(VecBool &rhs)
{
	Base::operator<<(rhs);
}

typedef const VecBool &VecBool_I;
typedef VecBool &VecBool_O, &VecBool_IO;

// common api for STL and SLISC
inline Long size(VecBool_I v) { return v.size(); }

} // namespace slisc
