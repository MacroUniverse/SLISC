// Cmat container
#pragma once
#include "../dense/Vec.h"
#include "Scmat3.h"

namespace slisc {
//% tem('Cmat3', {
//%     'Bool'; 'Char'; 'Uchar'; 'Int'; 'Llong';
//%     'Float'; 'Doub'; 'Ldoub'; 'Qdoub';
//%     'Fcomp'; 'Comp'; 'Lcomp'; 'Qcomp';
//%     'Fimag'; 'Imag'; 'Limag'; 'Qimag';});
//%----------------------------------------
//% T = varargin{:};
//% Cmat3T = ['Cmat3' T];
//% VbaseT = ['Vbase' T];
class @Cmat3T@ : private @VbaseT@
{
protected:
	typedef @VbaseT@ Base;
	Long m_N0, m_N1;
public:
	@Cmat3T@(): m_N0(0), m_N1(0) {};
	@Cmat3T@(Long_I N0, Long_I N1, Long_I N2);
	@Cmat3T@(const @Cmat3T@ &rhs); // copy constructor
	@Cmat3T@(@Cmat3T@ &&rhs); // move constructor
	@Cmat3T@ &operator=(const @Cmat3T@ &rhs); // copy assignment
	@Cmat3T@ &operator=(@Cmat3T@ &&rhs); // move assignment
	using Base::p;
	using Base::size;
	using Base::operator[];
	using Base::end;
	@T@ &operator()(Long_I i, Long_I j, Long_I k);
	const @T@ &operator()(Long_I i, Long_I j, Long_I k) const;
	Long n0() const;
	Long n1() const;
	Long n2() const;
	void resize(Long_I N0, Long_I N1, Long_I N2);  // resize (values not preserved)
	void reshape(Long_I N0, Long_I N1, Long_I N2); // reshape (N0*N1 <= m_N)

	operator const Scmat3@T@C&() const;
	operator const Scmat3@T@&();
};

inline @Cmat3T@::@Cmat3T@(Long_I N0, Long_I N1, Long_I N2) : Base(N0*N1*N2), m_N0(N0), m_N1(N1) {}

inline @Cmat3T@::@Cmat3T@(const @Cmat3T@ &rhs): Base(rhs), m_N0(rhs.m_N0), m_N1(rhs.m_N1)
{
#ifdef SLS_NO_CPY_CONSTRUCTOR
	SLS_ERR("copy constructor forbidden!");
#endif
}

inline @Cmat3T@::@Cmat3T@(@Cmat3T@ &&rhs)
	: Base(std::move(rhs)), m_N0(rhs.m_N0), m_N1(rhs.m_N1) {}

inline @Cmat3T@ &@Cmat3T@::operator=(const @Cmat3T@ &rhs)
{
	Base::operator=(rhs);
	m_N0 = rhs.m_N0; m_N1 = rhs.m_N1;
	return *this;
}

inline @Cmat3T@ &@Cmat3T@::operator=(@Cmat3T@ &&rhs)
{
	Base::operator=(move(rhs));
	m_N0 = rhs.m_N0; m_N1 = rhs.m_N1;
	return *this;
}

inline void @Cmat3T@::resize(Long_I N0, Long_I N1, Long_I N2)
{
	if (N0 != m_N0 || N1 != m_N1 || N2 != n2()) {
		Base::resize(N0*N1*N2);
		m_N0 = N0; m_N1 = N1;
	}
}

inline void @Cmat3T@::reshape(Long_I N0, Long_I N1, Long_I N2)
{
#ifdef SLS_CHECK_SHAPES
	if (N0*N1*N2 != m_N) {
		stringstream ss;
		ss  << "@Cmat3T@ reshaping from (" << m_N0 << ',' << m_N1
			<< ',' << n2() << ") , with " << m_N << "allocated elements, to (" << N0 << ',' << N1
			<< ',' << N2 << "), element number not the same!";
		SLS_ERR(ss.str());
	}
#endif
	m_N0 = N0; m_N1 = N1;
}

inline @T@ &@Cmat3T@::operator()(Long_I i, Long_I j, Long_I k)
{
#ifdef SLS_CHECK_BOUNDS
	if (i < 0 || i >= m_N0 || j < 0 || j >= m_N1 || k < 0 || k >= n2()) {
		stringstream ss; ss << "@Cmat3T@ index (" << i << ',' << j << ',' << k << ") out of bounds: shape = (" << m_N0 << ',' << m_N1 << ',' << n2() << ')';
		SLS_ERR(ss.str());
	}
#endif
	return m_p[i + m_N0*j + m_N0*m_N1*k];
}

inline const @T@ &@Cmat3T@::operator()(Long_I i, Long_I j, Long_I k) const
{
#ifdef SLS_CHECK_BOUNDS
	if (i < 0 || i >= m_N0 || j < 0 || j >= m_N1 || k < 0 || k >= n2()) {
		stringstream ss; ss << "@Cmat3T@ index (" << i << ',' << j << ',' << k << ") out of bounds: shape = (" << m_N0 << ',' << m_N1 << ',' << n2() << ')';
		SLS_ERR(ss.str());
	}
#endif
	return m_p[i + m_N0*j + m_N0*m_N1*k];
}

inline Long @Cmat3T@::n0() const {
	return m_N0;
}

inline Long @Cmat3T@::n1() const {
	return m_N1;
}

inline Long @Cmat3T@::n2() const {
	return m_N/(m_N0*m_N1);
}

inline @Cmat3T@::operator const Scmat3@T@C&() const {
	return reinterpret_cast<const Scmat3@T@C&>(*this);
}

inline @Cmat3T@::operator const Scmat3@T@&() {
	return reinterpret_cast<const Scmat3@T@&>(*this);
}

typedef const @Cmat3T@ &@Cmat3T@_I;
typedef @Cmat3T@ &@Cmat3T@_O, &@Cmat3T@_IO;

//%--------------------------------

#ifdef SLS_USE_INT_AS_LONG
typedef Cmat3Int Cmat3Long;
#else
typedef Cmat3Llong Cmat3Long;
#endif
typedef const Cmat3Long &Cmat3Long_I;
typedef Cmat3Long &Cmat3Long_O, &Cmat3Long_IO;

} // namespace slisc
