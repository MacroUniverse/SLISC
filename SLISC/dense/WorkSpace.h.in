#pragma once
// a unified workspace class

#include "Svec.h"
#include "Scmat.h"
#include "Scmat3.h"

// each allocation must start at a memory address
//   at the multiple of SLS_WSP_ALIGN, for possible SIMD optimization
#ifndef SLS_WSP_ALIGN
#define SLS_WSP_ALIGN 64
#endif

namespace slisc {

class WorkSpace : protected SvecUchar {

private:
	Long m_used; // start of free space

	// modify m_used so that `m_p + m_used` is aligned
	// will not check bound
	void do_align() {
		Long rem = (size_t(m_p) + m_used) % SLS_WSP_ALIGN;
		if (rem)
			m_used += SLS_WSP_ALIGN - rem;
	}

public:
	using SvecUchar::size;
	using SvecUchar::p;

	WorkSpace() {};

	// allocate all space ever needed, won't allow resize
	WorkSpace(void *ptr, Long_I Nbyte) :
		SvecUchar((Uchar*)ptr, Nbyte), m_used(0) {}

	// initialize from STL and SLISC containers (continuous memory)
	template <class Tv>
	WorkSpace(Tv &v) : WorkSpace(ptr(v), (Long)v.size()) {}

	WorkSpace(const WorkSpace &) = delete; // copy constructor
	WorkSpace(WorkSpace &&) = default; // move constructor

	WorkSpace &operator=(const WorkSpace &rhs) = delete; // copy assignment
	WorkSpace &operator=(WorkSpace &&rhs) = default; // move assignment
	
	Long used() const { return m_used; }

	Long free() const { return m_N-m_used; }

	static constexpr Long align() { return SLS_WSP_ALIGN; }

	void set(void *ptr, Long_I Nbyte) {
		SvecUchar::set((Uchar*)ptr, Nbyte);
	};

	template <class Tv>
	void set(Tv &v) { set(v.p(), v.size()); }

	// get a sub WorkSpace
	WorkSpace get(Long_I Nbyte) {
#ifdef SLS_CHECK_BOUNDS
		if (Nbyte > size() - m_used)
			SLS_ERR("WorkSpace: out of space!");
#endif
		Long start = m_used;
		m_used += Nbyte;
		return WorkSpace(m_p+start, Nbyte);
	}

	// danger! make sure no one is using the workspace!
	WorkSpace &reset() { m_used = 0; return *this; }

	// ======= allocate WorkSpace for different containers =========

//% tem('WorkSpace1', {
//%     'Char'; 'Int'; 'Llong';
//%     'Float'; 'Doub'; 'Qdoub';
//%     'Fcomp'; 'Comp'; 'Qcomp'; });
//%----------------------------------------------------------
//% T = varargin{:};
	@T@ *p@T@(Long_I N) {
		do_align();
		Long Nb = N*sizeof(@T@);
#ifdef SLS_CHECK_BOUNDS
		if (Nb > size() - m_used)
			SLS_ERR("WorkSpace: out of space!");
#endif
		Long start = m_used;
		m_used += Nb;
		return (@T@ *)(m_p+start);
	}

	slisc::Svec@T@ Svec@T@(Long_I N) {
		do_align();
		Long Nb = N*sizeof(@T@);
#ifdef SLS_CHECK_BOUNDS
		if (Nb > size() - m_used)
			SLS_ERR("WorkSpace: out of space!");
#endif
		Long start = m_used;
		m_used += Nb;
		return slisc::Svec@T@((@T@ *)(m_p+start), N);
	}

	slisc::Scmat@T@ Scmat@T@(Long_I N1, Long_I N2) {
		do_align();
		Long Nb = N1*N2*sizeof(@T@);
#ifdef SLS_CHECK_BOUNDS
		if (Nb > size() - m_used)
			SLS_ERR("WorkSpace: out of space!");
#endif
		Long start = m_used;
		m_used += Nb;
		return slisc::Scmat@T@((@T@ *)(m_p+start), N1, N2);
	}

	slisc::Scmat3@T@ Scmat3@T@(Long_I N1, Long_I N2, Long_I N3) {
		do_align();
		Long Nb = N1*N2*N3*sizeof(@T@);
#ifdef SLS_CHECK_BOUNDS
		if (Nb > size() - m_used)
			SLS_ERR("WorkSpace: out of space!");
#endif
		Long start = m_used;
		m_used += Nb;
		return slisc::Scmat3@T@((@T@ *)(m_p+start), N1, N2, N3);
	}

//% if is_Long(T)
	Long *pLong(Long_I N) {	return p@T@(N); }

	slisc::SvecLong SvecLong(Long_I N) { return Svec@T@(N); }

	slisc::ScmatLong ScmatLong(Long_I N1, Long_I N2) { return Scmat@T@(N1, N2); }

	slisc::Scmat3Long Scmat3Long(Long_I N1, Long_I N2, Long_I N3) { return Scmat3@T@(N1, N2, N3); }
//% endif
//%----------------------------------------------------------
};

}; // namespace slisc

