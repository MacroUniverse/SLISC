#pragma once
#include "../dense/Svec.h"
// "C" means lower level const

namespace slisc {
//% tem('Scmat', {
//%     'Char', true;   'Char', false;
//%     'Uchar', true;   'Uchar', false;
//%     'Int', true;    'Int', false;
//%     'Llong', true;  'Llong', false;
//%     'Float', true;  'Float', false;
//%     'Doub', true;   'Doub', false;
//%     'Ldoub', true;  'Ldoub', false;
//%     'Qdoub', true;  'Qdoub', false;
//%     'Fcomp', true;  'Fcomp', false;
//%     'Comp', true;   'Comp', false;
//%     'Lcomp', true;  'Lcomp', false;
//%     'Qcomp', true;  'Qcomp', false;
//%     'Fimag', true;  'Fimag', false;
//%     'Imag', true;   'Imag', false;
//%     'Limag', true;  'Limag', false;
//% });
//%------------------------
//% [T, constness] = varargin{:};
//% SvbaseT = ['Svbase' T];
//% SvbaseTC = [SvbaseT 'C'];
//% ScmatT = ['Scmat' T];
//% ScmatTC = [ScmatT 'C'];
//% if constness
//%     CT = ['const ' T];
//%     Base = SvbaseTC;
//%     Class = ScmatTC;
//% else
//%     CT = T;
//%     Base = SvbaseT;
//%     Class = ScmatT;
//% end
class @Class@ : public @Base@
{
protected:
	Long m_N0, m_N1;
public:
	@Class@();
	@Class@(@CT@ *data, Long_I N0, Long_I N1); // unsafe

//% if ~constness
	operator @ScmatTC@() const;
//% end

	@CT@ &operator()(Long_I i, Long_I j) const; // double indexing
	Long n0() const;
	Long n1() const;

	// resize() is a bad idea, don't try to create it!

	// There is no upper bound checking of N, use with care
	void reshape(Long_I N0, Long_I N1);
	void set(const @Class@ &sli);
	void set(@CT@ *data, Long_I N0, Long_I N1);
	~@Class@();
};

inline @Class@::@Class@() {}

inline @Class@::@Class@(@CT@ *data, Long_I N0, Long_I N1)
	: @Base@(data, N0*N1), m_N0(N0), m_N1(N1) {}

//% if ~constness
inline @Class@::operator @ScmatTC@() const
{
	return *((@ScmatTC@ *)this);
}
//% end

inline @CT@ &@Class@::operator()(Long_I i, Long_I j) const
{
#ifdef SLS_CHECK_BOUNDS
	if (i < 0 || i >= m_N0 || j < 0 || j >= m_N1)
		SLS_ERR("Matrix subscript out of bounds");
#endif
	return m_p[i + m_N0 * j];
}

inline Long @Class@::n0() const
{
	return m_N0;
}

inline Long @Class@::n1() const
{
	return m_N1;
}

inline void @Class@::reshape(Long_I N0, Long_I N1)
{
#ifdef SLS_CHECK_SHAPES
	if (N0*N1 != m_N)
		SLS_ERR("illegal reshape!");
#endif
	m_N0 = N0; m_N1 = N1;
}

inline void @Class@::set(@CT@ *data, Long_I N0, Long_I N1)
{
	@Base@::set(data, N0*N1);
	m_N0 = N0; m_N1 = N1;
}

inline void @Class@::set(const @Class@ &sli)
{
	@Base@::set(sli);
	m_N0 = sli.m_N0; m_N1 = sli.m_N1;
}

inline @Class@::~@Class@() {}

//% if constness
typedef const @Class@ &@ScmatT@_I;

// common api for STL and SLISC
inline Long size(@ScmatT@_I v) { return v.size(); }

inline const @T@ *p(@ScmatT@_I v) { return v.p(); }
//% else
// use "const" so that it can be bind to a temporary e.g. copy(cut0(a), cut0(b))
typedef const @Class@ &@ScmatT@_O, &@ScmatT@_IO;

// common api for STL and SLISC
inline @T@ *p(@ScmatT@ &v) { return v.p(); }
//% end

//%------------------------

#ifdef SLS_USE_INT_AS_LONG
typedef ScmatInt ScmatLong;
typedef ScmatIntC ScmatLongC;
#else
typedef ScmatLlong ScmatLong;
typedef ScmatLlongC ScmatLongC;
#endif

typedef const ScmatLongC &ScmatLong_I;
// use "const" so that it can be bind to a temporary e.g. copy(cut0(a), cut0(b))
typedef const ScmatLong &ScmatLong_O, &ScmatLong_IO;
} // namespace slisc
