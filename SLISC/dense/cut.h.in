#pragma once
#include "../dense/Vec.h"
#include "../dense/Mat.h"
#include "../dense/Cmat.h"
#include "../dense/Cmat3.h"
#include "../dense/Cmat4.h"
#include "../dense/Svec.h"
#include "../dense/Dvec.h"
#include "../dense/Scmat.h"
#include "../dense/Scmat3.h"
#include "../dense/Scmat4.h"
#include "../dense/Dcmat.h"
#include "../dense/Jcmat3.h"

namespace slisc {
//% tem('cut', {
//%  'VecInt'; 'VecDoub'; 'VecQdoub'; 'VecComp'; 'VecQcomp';
//%  'SvecInt'; 'SvecDoub'; 'SvecQdoub'; 'SvecComp'; 'SvecQcomp';
//%  'CmatInt'; 'CmatDoub'; 'CmatQdoub'; 'CmatComp'; 'CmatQcomp';
//%  'ScmatInt'; 'ScmatDoub'; 'ScmatQdoub'; 'ScmatComp'; 'ScmatQcomp';
//% });
//%----------------------------
//% Tv = varargin{:};
//% T = val_t(Tv);
//% Tcut = cut_type(Tv);
//% if ndim(Tv) == 1
inline @Tcut@ cut(@Tv@_IO v, Long_I start, Long_I N)
{
#ifdef SLS_CHECK_BOUNDS
	if (start < 0 || start + N > v.size())
		SLS_ERR("index out of bound!");
#endif
//%     if is_dense_vec(Tv)
	@Tcut@ sv(&v[start], N);
//%     elseif is_Dvec(Tv)
	@Tcut@ sv(&v[start], N, v.step());
//%     else
//%         disp(Tv);
//%         error('not implemented (1)!');
//%     end
	return sv;
}

inline @Tcut@C cut(@Tv@_I v, Long_I start, Long_I N)
{
#ifdef SLS_CHECK_BOUNDS
	if (start < 0 || start + N > v.size())
		SLS_ERR("index out of bound!");
#endif
//%     if is_dense_vec(Tv)
	@Tcut@C sv(&v[start], N);
//%     elseif is_Dvec(Tv)
	@Tcut@C sv(&v[start], N, v.step());
//%     else
//%         disp(Tv);
//%         error('not implemented (2)!');
//%     end
	return sv;
}
//% elseif ndim(Tv) == 2
inline @Tcut@ cut(@Tv@_IO v, Long_I start0, Long_I N0, Long_I start1, Long_I N1)
{
#ifdef SLS_CHECK_BOUNDS
	if (start0 < 0 || start0 + N0 > v.n0() ||
			start1 < 0 || start1 + N1 > v.n1())
		SLS_ERR("index out of bound!");
#endif
//%     if is_Scmat(Tv) || is_Cmat(Tv)
	@Tcut@ sv(&v(start0, start1), N0, N1, v.n0());
//%     elseif is_Dcmat(Tv)
	@Tcut@ sv(&v(start0, start1), N0, N1, v.lda());
//%     else
//%         disp('Tv = '); disp(Tv);
//%         error('not implemented (3)!');
//%     end
	return sv;
}

inline @Tcut@C cut(@Tv@_I v,
	Long_I start0, Long_I N0, Long_I start1, Long_I N1)
{
#ifdef SLS_CHECK_BOUNDS
	if (start0 < 0 || start0 + N0 > v.n0() ||
			start1 < 0 || start1 + N1 > v.n1())
		SLS_ERR("index out of bound!");
#endif
//%     if is_Scmat(Tv) || is_Cmat(Tv)
	@Tcut@C sv(&v(start0, start1), N0, N1, v.n0());
//%     elseif is_Dcmat(Tv)
	@Tcut@C sv(&v(start0, start1), N0, N1, v.lda());
//%     else
//%         disp(Tv);
//%         error('not implemented (4)!');
//%     end
	return sv;
}
//%     if is_Scmat(Tv) || is_Cmat(Tv)
//%         ScmatT = ['Scmat' T];
inline @ScmatT@ cut(@Tv@_IO v, Long_I start1, Long_I N1)
{
#ifdef SLS_CHECK_BOUNDS
	if (start1 < 0 || start1 + N1 > v.n1())
		SLS_ERR("index out of bound!");
#endif
	@ScmatT@ sv(&v(0, start1), v.n0(), N1);
	return sv;
}

inline @ScmatT@C cut(@Tv@_I v, Long_I start1, Long_I N1)
{
#ifdef SLS_CHECK_BOUNDS
	if (start1 < 0 || start1 + N1 > v.n1())
		SLS_ERR("index out of bound!");
#endif
	@ScmatT@C sv(&v(0, start1), v.n0(), N1);
	return sv;
}
//%     end
//% elseif ndim(Tv) == 3
//%     if is_Scmat3(Tv) || is_Cmat3(Tv)
inline @Tcut@ cut(@Tv@_IO v, Long_I start0, Long_I N0, Long_I start1, Long_I N1, Long_I start2, Long_I N2)
{
#ifdef SLS_CHECK_BOUNDS
	if (start0 < 0 || start0 + N0 > v.n0() || start1 < 0 || start1 + N1 > v.n1() || start2 < 0 || start2 + N2 > v.n2())
		SLS_ERR("index out of bound!");
#endif
	@Tcut@ sv(&v(start0, start1, start2), N0, N1, N2, 1, v.n0(), v.n0()*v.n1());
	return sv;
}

inline @Tcut@C cut(@Tv@_I v, Long_I start0, Long_I N0, Long_I start1, Long_I N1, Long_I start2, Long_I N2)
{
#ifdef SLS_CHECK_BOUNDS
	if (start0 < 0 || start0 + N0 > v.n0() || start1 < 0 || start1 + N1 > v.n1() || start2 < 0 || start2 + N2 > v.n2())
		SLS_ERR("index out of bound!");
#endif
	@Tcut@C sv(&v(start0, start1, start2), N0, N1, N2, 1, v.n0(), v.n0()*v.n1());
	return sv;
}
//%     end
//% else
//%     disp(Tv);
//%     error('not implemented (5)!');
//% end
//%------------------------

//% tem('cut0', { 'MatInt';
//%   'CmatInt'; 'CmatLlong';
//%   'CmatDoub'; 'CmatQdoub'; 'CmatComp'; 'CmatQcomp';
//%   'ScmatInt'; 'ScmatLlong';
//%   'ScmatDoub'; 'ScmatQdoub'; 'ScmatComp'; 'ScmatQcomp';
//%   'DcmatInt'; 'DcmatLlong'; 'DcmatDoub'; 'DcmatQdoub';
//%   'DcmatComp'; 'DcmatQcomp';
//%   'Cmat3Int'; 'Cmat3Llong'; 'Cmat3Doub';
//%   'Cmat3Qdoub'; 'Cmat3Comp'; 'Cmat3Qcomp';
//%   'Scmat3Int'; 'Scmat3Llong'; 'Scmat3Doub';
//%   'Scmat3Qdoub'; 'Scmat3Comp'; 'Scmat3Qcomp';
//%    });
//%----------------------------
//% Tv = varargin{:};
//% Tcut = cut0_type(Tv);
//% T = val_t(Tv);
//% if is_Scmat(Tv) || is_Cmat(Tv)
inline @Tcut@ cut0(@Tv@_IO v, Long_I j)
{
#ifdef SLS_CHECK_BOUNDS
	if (j < 0 || j >= v.n1())
		SLS_ERR("index out of bound!");
#endif
	@Tcut@ sv(&v(0, j), v.n0());
	return sv;
}

inline @Tcut@C cut0(@Tv@_I v, Long_I j)
{
#ifdef SLS_CHECK_BOUNDS
	if (j < 0 || j >= v.n1())
		SLS_ERR("index out of bound!");
#endif
	@Tcut@C sv(&v(0, j), v.n0());
	return sv;
}
//% elseif is_Dcmat(Tv)
inline @Tcut@ cut0(@Tv@_IO v, Long_I j)
{
#ifdef SLS_CHECK_BOUNDS
	if (j < 0 || j >= v.n1())
		SLS_ERR("index out of bound!");
#endif
	@Tcut@ sv(&v(0, j), v.n0());
	return sv;
}

inline @Tcut@C cut0(@Tv@_I v, Long_I j)
{
#ifdef SLS_CHECK_BOUNDS
	if (j < 0 || j >= v.n1())
		SLS_ERR("index out of bound!");
#endif
	@Tcut@C sv(&v(0, j), v.n0());
	return sv;
}
//% elseif is_Mat(Tv)
inline @Tcut@ cut0(@Tv@_IO v, Long_I j)
{
#ifdef SLS_CHECK_BOUNDS
	if (j < 0 || j >= v.n1())
		SLS_ERR("index out of bound!");
#endif
	@Tcut@ sv(&v(0, j), v.n0(), v.n1());
	return sv;
}

inline @Tcut@C cut0(@Tv@_I v, Long_I j)
{
#ifdef SLS_CHECK_BOUNDS
	if (j < 0 || j >= v.n1())
		SLS_ERR("index out of bound!");
#endif
	@Tcut@C sv(&v(0, j), v.n0(), v.n1());
	return sv;
}
//% elseif is_Scmat3(Tv) || is_Cmat3(Tv)
inline @Tcut@ cut0(@Tv@_IO v, Long_I j, Long_I k)
{
#ifdef SLS_CHECK_BOUNDS
	if (j < 0 || j >= v.n1() || k < 0 || k >= v.n2())
		SLS_ERR("index out of bound!");
#endif
	@Tcut@ sv(&v(0, j, k), v.n0());
	return sv;
}

inline @Tcut@C cut0(@Tv@_I v, Long_I j, Long_I k)
{
#ifdef SLS_CHECK_BOUNDS
	if (j < 0 || j >= v.n1() || k < 0 || k >= v.n2())
		SLS_ERR("index out of bound!");
#endif
	@Tcut@C sv(&v(0, j, k), v.n0());
	return sv;
}
//% else
//%     disp(Tv);
//%     error('not implemented (6)!');
//% end
//%------------------------

//% tem('cut0-2', {
//%    'CmatInt'; 'CmatLlong'; 'CmatDoub'; 'CmatQdoub';
//%    'CmatComp'; 'CmatQcomp';
//%    'Cmat3Comp'; 'Cmat3Qcomp';
//%    'ScmatInt'; 'ScmatLlong'; 'ScmatDoub'; 'ScmatQdoub';
//%    'ScmatComp'; 'ScmatQcomp';
//%    'Scmat3Comp'; 'Scmat3Qcomp';
//% });
//%----------------------------
//% Tv = varargin{:};
//% Tcut = cut0_type(Tv);
//% T = val_t(Tv);
//% if is_Scmat(Tv) || is_Cmat(Tv)
inline @Tcut@ cut0(@Tv@_IO v, Long_I i, Long_I N0, Long_I j)
{
#ifdef SLS_CHECK_BOUNDS
	if (i < 0 || i + N0 > v.n0() || j < 0 || j >= v.n1())
		SLS_ERR("index out of bound!");
#endif
	@Tcut@ sv(&v(i, j), N0);
	return sv;
}

inline @Tcut@C cut0(@Tv@_I v, Long_I i, Long_I N0, Long_I j)
{
#ifdef SLS_CHECK_BOUNDS
	if (i < 0 || i + N0 > v.n0() || j < 0 || j >= v.n1())
		SLS_ERR("index out of bound!");
#endif
	@Tcut@C sv(&v(i, j), N0);
	return sv;
}
//% elseif is_Scmat3(Tv) || is_Cmat3(Tv)
inline @Tcut@ cut0(@Tv@_IO v, Long_I i, Long_I N0, Long_I j, Long_I k)
{
#ifdef SLS_CHECK_BOUNDS
	if (i < 0 || i + N0 > v.n0() || j < 0 || j >= v.n1() || k < 0 || k >= v.n2())
		SLS_ERR("index out of bound!");
#endif
	@Tcut@ sv(&v(i, j, k), N0);
	return sv;
}

inline @Tcut@C cut0(@Tv@_I v, Long_I i, Long_I N0, Long_I j, Long_I k)
{
#ifdef SLS_CHECK_BOUNDS
	if (i < 0 || i + N0 > v.n0() || j < 0 || j >= v.n1() || k < 0 || k >= v.n2())
		SLS_ERR("index out of bound!");
#endif
	@Tcut@C sv(&v(i, j, k), N0);
	return sv;
}
//% else
//%     disp(Tv);
//%     error('not implemented (7)!');
//% end
//%------------------------

//% tem('cut1', { 'CmatDoub'; 'CmatQdoub';
//%     'CmatComp'; 'CmatQcomp';
//%     'CmatLlong'; 'Cmat3Comp'; 'Cmat3Qcomp';
//%     'ScmatDoub'; 'ScmatQdoub';
//%     'ScmatComp'; 'ScmatQcomp';
//%     'ScmatLlong'; 'Scmat3Comp'; 'Scmat3Qcomp';
//%     'MatInt'; });
//%----------------------------
//% Tv = varargin{:};
//% Tcut = cut1_type(Tv);
//% T = val_t(Tv);
//% if is_Scmat(Tv) || is_Cmat(Tv)
inline @Tcut@ cut1(@Tv@_IO v, Long_I i)
{
#ifdef SLS_CHECK_BOUNDS
	if (i < 0 || i >= v.n0())
		SLS_ERR("index out of bound!");
#endif
	@Tcut@ sv(&v(i, 0), v.n1(), v.n0());
	return sv;
}

inline @Tcut@C cut1(@Tv@_I v, Long_I i)
{
#ifdef SLS_CHECK_BOUNDS
	if (i < 0 || i >= v.n0())
		SLS_ERR("index out of bound!");
#endif
	@Tcut@C sv(&v(i, 0), v.n1(), v.n0());
	return sv;
}
//% elseif is_Dcmat(Tv)
inline @Tcut@ cut1(@Tv@_IO v, Long_I i)
{
#ifdef SLS_CHECK_BOUNDS
	if (i < 0 || i >= v.n0())
		SLS_ERR("index out of bound!");
#endif
	@Tcut@ sv(&v(i, 0), v.n1(), v.lda());
	return sv;
}

inline @Tcut@C cut1(@Tv@_I v, Long_I i)
{
#ifdef SLS_CHECK_BOUNDS
	if (i < 0 || i >= v.n0())
		SLS_ERR("index out of bound!");
#endif
	@Tcut@C sv(&v(i, 0), v.n1(), v.lda());
	return sv;
}

//% elseif is_Mat(Tv)
inline @Tcut@ cut1(@Tv@_IO v, Long_I i)
{
#ifdef SLS_CHECK_BOUNDS
	if (i < 0 || i >= v.n0())
		SLS_ERR("index out of bound!");
#endif
	@Tcut@ sv(&v(i, 0), v.n1());
	return sv;
}

inline @Tcut@C cut1(@Tv@_I v, Long_I i)
{
#ifdef SLS_CHECK_BOUNDS
	if (i < 0 || i >= v.n0())
		SLS_ERR("index out of bound!");
#endif
	@Tcut@C sv(&v(i, 0), v.n1());
	return sv;
}
//% elseif is_Scmat3(Tv) || is_Cmat3(Tv)
inline @Tcut@ cut1(@Tv@_IO v, Long_I i, Long_I k)
{
#ifdef SLS_CHECK_BOUNDS
	if (i < 0 || i >= v.n0() || k < 0 || k >= v.n2())
		SLS_ERR("index out of bound!");
#endif
	@Tcut@ sv(&v(i, 0, k), v.n1(), v.n0());
	return sv;
}

inline @Tcut@C cut1(@Tv@_I v, Long_I i, Long_I k)
{
#ifdef SLS_CHECK_BOUNDS
	if (i < 0 || i >= v.n0() || k < 0 || k >= v.n2())
		SLS_ERR("index out of bound!");
#endif
	@Tcut@C sv(&v(i, 0, k), v.n1(), v.n0());
	return sv;
}
//% else
//%     error('not implemented (8)!');
//% end
//%------------------------

//% tem('cut1-2', { 
//% 'CmatLlong'; 'CmatComp'; 'CmatQcomp';
//% 'ScmatLlong'; 'ScmatComp'; 'ScmatQcomp'; });
//%----------------------------
//% T = varargin{:};
//% Ts = val_t(T);
//% if is_Scmat(T) || is_Cmat(T)
//%     Tcut = ['Dvec' val_t(T)];
inline @Tcut@ cut1(@T@_IO v, Long_I i, Long_I j, Long_I N1)
{
#ifdef SLS_CHECK_BOUNDS
	if (i < 0 || i >= v.n0() || j < 0 || j + N1 > v.n1())
		SLS_ERR("out of bound!");
#endif
	@Tcut@ sv(&v(i, j), N1, v.n0());
	return sv;
}

inline @Tcut@C cut1(@T@_I v, Long_I i, Long_I j, Long_I N1)
{
#ifdef SLS_CHECK_BOUNDS
	if (i < 0 || i >= v.n0() || j < 0 || j + N1 > v.n1())
		SLS_ERR("out of bound!");
#endif
	@Tcut@C sv(&v(i, j), N1, v.n0());
	return sv;
}
//% elseif is_Scmat3(T) || is_Cmat3(T)
//%     Tcut = ['Dvec' val_t(T)];
inline @Tcut@ cut1(@T@_IO v, Long_I i, Long_I j, Long_I N1, Long_I k)
{
#ifdef SLS_CHECK_BOUNDS
	if (i < 0 || i >= v.n0() || j < 0 || j + N1 > v.n1() || k < 0 || k >= v.n2())
		SLS_ERR("out of bound!");
#endif
	@Tcut@ sv(&v(i, j, k), N1, v.n0());
	return sv;
}

inline @Tcut@C cut1(@T@_I v, Long_I i, Long_I j, Long_I N1, Long_I k)
{
#ifdef SLS_CHECK_BOUNDS
	if (i < 0 || i >= v.n0() || j < 0 || j + N1 > v.n1() || k < 0 || k >= v.n2())
		SLS_ERR("out of bound!");
#endif
	@Tcut@C sv(&v(i, j, k), N1, v.n0());
	return sv;
}
//% else
//%     disp(T);
//%     error('not implemented (9)!');
//% end
//%------------------------

//% tem('cut2', {
//% 'Cmat3Doub'; 'Cmat3Qdoub'; 'Cmat3Comp'; 'Cmat3Qcomp';
//% 'Scmat3Doub'; 'Scmat3Qdoub'; 'Scmat3Comp'; 'Scmat3Qcomp'; });
//%----------------------------
//% Tv = varargin{:};
//% Tcut = cut2_type(Tv);
//% T = val_t(Tv);
//% if is_Scmat3(Tv) || is_Cmat3(Tv)
inline @Tcut@ cut2(@Tv@_IO v, Long_I i, Long_I j)
{
#ifdef SLS_CHECK_BOUNDS
	if (i < 0 || i >= v.n0() || j < 0 || j >= v.n1())
		SLS_ERR("index out of bound!");
#endif
	@Tcut@ sv(&v(i, j, 0), v.n2(), v.n0()*v.n1());
	return sv;
}

inline @Tcut@C cut2(@Tv@_I v, Long_I i, Long_I j)
{
#ifdef SLS_CHECK_BOUNDS
	if (i < 0 || i >= v.n0() || j < 0 || j >= v.n1())
		SLS_ERR("index out of bound!");
#endif
	@Tcut@C sv(&v(i, j, 0), v.n2(), v.n0()*v.n1());
	return sv;
}
//% end
//%-----------------------

//% tem('cut01', {
//%  'Cmat3Doub'; 'Cmat3Comp';
//%  'Cmat3Int'; 'Cmat3Qdoub'; 'Cmat3Qcomp'; 
//%  'Cmat4Int'; 'Cmat4Doub'; 'Cmat4Qdoub';
//%  'Scmat3Doub'; 'Scmat3Comp';
//%  'Scmat3Int'; 'Scmat3Qdoub'; 'Scmat3Qcomp'; 
//%  'Scmat4Int'; 'Scmat4Doub'; 'Scmat4Qdoub'; });
//%----------------------------
//% Tv = varargin{:};
//% Tcut = cut01_type(Tv);
//% T = val_t(Tv);
//% if is_Scmat3(Tv) || is_Cmat3(Tv)
inline @Tcut@ cut01(@Tv@_IO v, Long_I k)
{
#ifdef SLS_CHECK_BOUNDS
	if (k < 0 || k >= v.n2())
		SLS_ERR("index out of bound!");
#endif
	@Tcut@ sv(&v(0, 0, k), v.n0(), v.n1());
	return sv;
}

inline @Tcut@C cut01(@Tv@_I v, Long_I k)
{
#ifdef SLS_CHECK_BOUNDS
	if (k < 0 || k >= v.n2())
		SLS_ERR("index out of bound!");
#endif
	@Tcut@C sv(&v(0, 0, k), v.n0(), v.n1());
	return sv;
}
//% elseif is_Scmat4(Tv) || is_Cmat4(Tv)
inline @Tcut@ cut01(@Tv@_IO v, Long_I k, Long_I l)
{
#ifdef SLS_CHECK_BOUNDS
	if (k < 0 || k >= v.n2() || l < 0 || l >= v.n3())
		SLS_ERR("index out of bound!");
#endif
	@Tcut@ sv(&v(0, 0, k, l), v.n0(), v.n1());
	return sv;
}

inline @Tcut@C cut01(@Tv@_I v, Long_I k, Long_I l)
{
#ifdef SLS_CHECK_BOUNDS
	if (k < 0 || k >= v.n2() || l < 0 || l >= v.n3())
		SLS_ERR("index out of bound!");
#endif
	@Tcut@C sv(&v(0, 0, k, l), v.n0(), v.n1());
	return sv;
}
//% else
//%     disp(Tv);
//%     error('not implemented (10)!');
//% end
//%------------------------

//% tem('cut01-2', {
//%   'Cmat3Doub'; 'Cmat3Qdoub'; 'Cmat3Comp'; 'Cmat3Qcomp';
//%   'Scmat3Doub'; 'Scmat3Qdoub'; 'Scmat3Comp'; 'Scmat3Qcomp'; });
//%----------------------------
//% T = varargin{:};
//% Tcut = ['Scmat' val_t(T)];
//% Ts = val_t(T);
//% if is_Scmat3(T) || is_Cmat3(T)
inline @Tcut@ cut01(@T@_IO v, Long_I j, Long_I N1, Long_I k)
{
#ifdef SLS_CHECK_BOUNDS
	if (j < 0 || j + N1 > v.n1() || k < 0 || k >= v.n2())
		SLS_ERR("index out of bound!");
#endif
	@Tcut@ sv(&v(0, j, k), v.n0(), N1);
	return sv;
}

inline @Tcut@C cut01(@T@_I v, Long_I j, Long_I N1, Long_I k)
{
#ifdef SLS_CHECK_BOUNDS
	if (j < 0 || j + N1 > v.n1() || k < 0 || k >= v.n2())
		SLS_ERR("index out of bound!");
#endif
	@Tcut@C sv(&v(0, j, k), v.n0(), N1);
	return sv;
}
//% else
//%     disp(Tv);
//%     error('not implemented (11)!');
//% end
//%------------------------

//% tem('cut01-3', {
//%  'Cmat3Doub'; 'Cmat3Qdoub'; 'Cmat3Comp'; 'Cmat3Qcomp';
//%  'Scmat3Doub'; 'Scmat3Qdoub'; 'Scmat3Comp'; 'Scmat3Qcomp'; });
//%----------------------------
//% T = varargin{:};
//% Tcut = ['Dcmat' val_t(T)];
//% Ts = val_t(T);
//% if is_Scmat3(T) || is_Cmat3(T)
inline @Tcut@ cut01(@T@_IO v, Long_I i, Long_I N0, Long_I j, Long_I N1, Long_I k)
{
	@Tcut@ sv(&v(i, j, k), N0, N1, v.n0());
	return sv;
}

inline @Tcut@C cut01(@T@_I v, Long_I i, Long_I N0, Long_I j, Long_I N1, Long_I k)
{
	@Tcut@C sv(&v(i, j, k), N0, N1, v.n0());
	return sv;
}
//% else
//%     disp(T);
//%     error('not implemented (12)!');
//% end
//%------------------------
} // namespace slisc
