// row-major 3D container
#pragma once
#include "../dense/Vec.h"

namespace slisc {
//% tem('Mat3', {
//%     'Char'; 'Int'; 'Llong';
//%     'Float'; 'Doub'; 'Ldoub';
//%     'Fcomp'; 'Comp'; 'Lcomp';
//%     'Fimag'; 'Imag'; 'Limag';});
//%----------------------------------------
//% T = varargin{:};
//% Mat3T = ['Mat3' T];
//% VecT = ['Vec' T];
class @Mat3T@ : public @VecT@
{
protected:
	typedef @VecT@ Base;
	Long m_N0, m_N1, m_N2;
public:
	@Mat3T@(): m_N0(0), m_N1(0), m_N2(0) {};
	@Mat3T@(Long_I N0, Long_I N1, Long_I N2);
	@Mat3T@ &operator=(const @Mat3T@ &rhs) = delete;
	void resize(Long_I N0, Long_I N1, Long_I N2);
	@T@ &operator()(Long_I i, Long_I j, Long_I k);    //subscripting: pointer to row i
	const @T@ &operator()(Long_I i, Long_I j, Long_I k) const;
	Long n0() const;
	Long n1() const;
	Long n2() const;
};

inline @Mat3T@::@Mat3T@(Long_I N0, Long_I N1, Long_I N2) :
	Base(N0*N1*N2), m_N0(N0), m_N1(N1), m_N2(N2) {}

inline void @Mat3T@::resize(Long_I N0, Long_I N1, Long_I N2)
{
	if (N0 != m_N0 || N1 != m_N1 || N2 != m_N2) {
		Base::resize(N0*N1*N2);
		m_N0 = N0; m_N1 = N1; m_N2 = N2;
	}
}

inline @T@ &@Mat3T@::operator()(Long_I i, Long_I j, Long_I k)
{
#ifdef SLS_CHECK_BOUNDS
	if (i < 0 || i >= m_N0 || j < 0 || j >= m_N1 || k < 0 || k >= m_N2)
		SLS_ERR("Matrix subscript out of bounds");
#endif
	return m_p[m_N1*m_N2*i + m_N2*j + k];
}

inline const @T@ &@Mat3T@::operator()(Long_I i, Long_I j, Long_I k) const
{
#ifdef SLS_CHECK_BOUNDS
	if (i < 0 || i >= m_N0 || j < 0 || j >= m_N1 || k < 0 || k >= m_N2)
		SLS_ERR("Matrix subscript out of bounds");
#endif
	return m_p[m_N1*m_N2*i + m_N2*j + k];
}

inline Long @Mat3T@::n0() const
{
	return m_N0;
}

inline Long @Mat3T@::n1() const
{
	return m_N1;
}

inline Long @Mat3T@::n2() const
{
	return m_N2;
}

typedef const @Mat3T@ &@Mat3T@_I;
typedef @Mat3T@ &@Mat3T@_O, &@Mat3T@_IO;
//%----------------------

#ifdef SLS_USE_INT_AS_LONG
typedef Mat3Int Mat3Long;
#else
typedef Mat3Llong Mat3Long;
#endif
typedef const Mat3Long &Mat3Long_I;
typedef Mat3Long &Mat3Long_O, &Mat3Long_IO;
} // namespace slisc
