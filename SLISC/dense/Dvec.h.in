#pragma once
#include "../global.h"
// "C" means lower level const

namespace slisc {
//% tem('Dvec', {
//%     'Char', true; 'Char', false;
//%     'Uchar', true; 'Uchar', false;
//%     'Int', true; 'Int', false;
//%     'Llong', true; 'Llong', false;
//%     'Float', true; 'Float', false;
//%     'Doub', true; 'Doub', false;
//%     'Ldoub', true; 'Ldoub', false;
//%     'Qdoub', true; 'Qdoub', false;
//%     'Fcomp', true; 'Fcomp', false;
//%     'Comp', true; 'Comp', false;
//%     'Lcomp', true; 'Lcomp', false;
//%     'Qcomp', true; 'Qcomp', false;
//% });
//%------------------------
//% [T, constness] = varargin{:};
//% DvecT = ['Dvec' T];
//% DvecTC = [DvecT 'C'];
//% if constness
//%     CT = ['const ' T];
//%     Class = DvecTC;
//% else
//%     CT = T;
//%     Class = DvecT;
//% end
class @Class@
{
protected:
	@CT@ *m_p;
	Long m_N;
	Long m_step;
public:
	@Class@();
	@Class@(@CT@ *p, Long_I N, Long_I step);
	@Class@(const @Class@ &v) = default; // copy constructor (shalow)
	@Class@ &operator=(const @Class@ &v) = default; // copy assignment (shalow)

	@CT@* p() const;
	Long size() const;
	Long step() const;
	@CT@ &operator[](Long_I i) const;
	@CT@ &end() const;
	@CT@ &end(Long_I i) const;

//% if ~constness
	operator @DvecTC@() const;
//% end

	// === other member functions ===
	// There is no bound checking, use with care
	void set(@CT@ *p);
	void set(@CT@ *p, Long_I N, Long_I step);
	void set(const @Class@ &sli);
//% % resize() is a bad name, don't try to use it!
	void set(Long_I N);
	void next(); // m_p += m_N
	void last(); // m_p -= m_N
	void shift(Long_I N); // m_p += N;
	
	~@Class@();
};

inline @Class@::@Class@() {}

inline @Class@::@Class@(@CT@ *p, Long_I N, Long_I step)
	: m_p(p), m_N(N), m_step(step) {}

inline @CT@ * @Class@::p() const
{
#ifdef SLS_CHECK_BOUNDS
	if (m_N == 0)
		SLS_ERR("using p() for empty container!");
#endif
	return m_p;
}

inline Long @Class@::size() const
{
	return m_N;
}

inline Long @Class@::step() const
{
	return m_step;
}

inline @CT@ &@Class@::operator[](Long_I i) const
{
#ifdef SLS_CHECK_BOUNDS
	if (i < 0 || i >= m_N)
		SLS_ERR("Vbase subscript out of bounds");
#endif
	return m_p[m_step*i];
}

inline @CT@ &@Class@::end() const
{
#ifdef SLS_CHECK_BOUNDS
	if (m_N == 0)
		SLS_ERR("tring to use end() on empty vector!");
#endif
	return m_p[m_step*(m_N - 1)];
}

inline @CT@ &@Class@::end(Long_I i) const
{
	return m_p[m_step*(m_N - i)];
}

inline void @Class@::set(Long_I N)
{
#ifdef SLS_CHECK_SHAPES
	if (N <= 0) SLS_ERR("illegal N!");
#endif
	m_N = N;
}

//% if ~constness
inline @Class@::operator @DvecTC@() const
{
	return *((@DvecTC@ *)this);
}
//% end

inline void @Class@::set(@CT@ * p)
{
	m_p = p;
}

inline void @Class@::set(@CT@ * p, Long_I N, Long_I step)
{
	m_p = p; m_N = N; m_step = step;
}

inline void @Class@::set(const @Class@ &sli)
{
	m_p = sli.m_p; m_N = sli.m_N; m_step = sli.m_step;
}

inline void @Class@::next()
{
	m_p += m_N;
}

inline void @Class@::last()
{
	m_p -= m_N;
}

inline void @Class@::shift(Long_I N)
{
	m_p += N;
}

inline @Class@::~@Class@() {}


//% if constness
typedef const @Class@ &@DvecT@_I;
//% else
// use "const" so that it can be bind to a temporary e.g. copy(cut0(a), cut0(b))
typedef const @Class@ &@DvecT@_O, &@DvecT@_IO;
//% end

inline Long size(const @Class@ &v) { return v.size(); }
//%------------------------

#ifdef SLS_USE_INT_AS_LONG
typedef DvecInt DvecLong;
typedef DvecIntC DvecLongC;
#else
typedef DvecLlong DvecLong;
typedef DvecLlongC DvecLongC;
#endif
typedef const DvecLongC &DvecLong_I;
// use "const" so that it can be bind to a temporary e.g. copy(cut0(a), cut0(b))
typedef const DvecLong &DvecLong_O, &DvecLong_IO;

} // namespace slisc
