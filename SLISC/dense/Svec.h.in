#pragma once
#include "../dense/Svbase.h"

// this class is not memory safe!
// "C" means lower level const

namespace slisc {

//% tem('Svec', {
//%     'Bool', true;   'Bool', false;
//%     'Char', true;   'Char', false;
//%     'Uchar', true;  'Uchar', false;
//%     'Int', true;    'Int', false;
//%     'Llong', true;  'Llong', false;
//%     'Float', true;  'Float', false;
//%     'Doub', true;   'Doub', false;
//%     'Ldoub', true;  'Ldoub', false;
//%     'Qdoub', true;  'Qdoub', false;
//%     'Fcomp', true;  'Fcomp', false;
//%     'Comp', true;   'Comp', false;
//%     'Lcomp', true;  'Lcomp', false;
//%     'Qcomp', true;  'Qcomp', false;
//%     'Fimag', true;  'Fimag', false;
//%     'Imag', true;   'Imag', false;
//%     'Limag', true;  'Limag', false;
//% });
//%------------------------
//% [T, constness] = varargin{:};
//% SvecT = ['Svec' T]; SvbaseT = ['Svbase' T];
//% SvecTC = [SvecT 'C']; SvbaseTC = [SvbaseT 'C'];
//% if constness
//%     CT = ['const ' T];
//%     Class = SvecTC; Base = SvbaseTC;
//%     suffix = '_I';
//% else
//%     CT = T;
//%     Class = SvecT; Base = SvbaseT;
//%     suffix = '_IO';
//% end
class @Class@ : public @Base@
{
public:
	using @Base@::@Base@;
	explicit @Class@(Long_I N);
//% if ~constness
	operator @SvecTC@() const;
//% end
};

//% if ~constness
inline @Class@::operator @SvecTC@() const
{
	return *((@SvecTC@ *)this);
}
//% end

//% if constness
typedef const @Class@ &@SvecT@_I;
//% else
// use "const" so that it can be bind to a temporary e.g. copy(cut0(a), cut0(b))
typedef const @Class@ &@SvecT@_O, &@SvecT@_IO;
//% end

//%------------------------

#ifdef SLS_USE_INT_AS_LONG
typedef SvecInt SvecLong;
typedef SvecIntC SvecLongC;
#else
typedef SvecLlong SvecLong;
typedef SvecLlongC SvecLongC;
#endif
typedef const SvecLongC &SvecLong_I;
// use "const" so that it can be bind to a temporary e.g. copy(cut0(a), cut0(b))
typedef const SvecLong &SvecLong_O, &SvecLong_IO;

} // namespace slisc
