// square diagonal matrix
// mostly a clone a Vector<T>
#pragma once
#include "Vec.h"

namespace slisc {
//% tem('Diag', {'Int'; 'Llong'; 'Long'; 'Doub'; 'Comp';});
//%----------------------------------------
//% T = varargin{:};
//% DiagT = ['Diag' T];
//% VecT = ['Vec' T];
//% if is_Long(T)
#ifdef SLS_USE_INT_AS_LONG
typedef DiagInt DiagLong;
#else
typedef DiagLlong DiagLong;
#endif
//% else
void veccpy(@T@ *, const @T@ *, Llong_I);

class @DiagT@ : public @VecT@
{
private:
    typedef @VecT@ Base;
public:
    @DiagT@(Long_I N);
    @DiagT@(@VecT@_I v);
    Long size() const;
    Long nnz() const;
    Long n0() const;
    Long n1() const;
    @T@ &ref(Long_I i, Long_I j);
    @T@ operator()(Long_I i, Long_I j) const;
};

inline @DiagT@::@DiagT@(Long_I N) : Base(N) {}

inline @DiagT@::@DiagT@(@VecT@_I v) : Base(v.size())
{
    veccpy(m_p, v.p(), m_N);
}

inline Long @DiagT@::size() const
{
    SLS_ERR("use nnz() instead!");
    return 0;
}

inline Long @DiagT@::nnz() const
{
    return Base::size();
}

inline Long @DiagT@::n0() const
{
    return Base::size();
}

inline Long @DiagT@::n1() const
{
    return Base::size();
}

inline @T@ &@DiagT@::ref(Long_I i, Long_I j)
{
    if (i == j)
        return (*this)[i];
    SLS_ERR("not a diagonal element!");
    return (*this)[i];
}

inline @T@ @DiagT@::operator()(Long_I i, Long_I j) const
{
    if (i == j) return (*this)[i];
    return 0;
}

// convert vector to diagonal matrix
inline const @DiagT@ &diag(@VecT@_I v)
{
    return (@DiagT@&)v;
}
//% end

typedef const @DiagT@ &@DiagT@_I;
typedef @DiagT@ &@DiagT@_O, &@DiagT@_IO;
//%------------------------
} // namespace slisc
