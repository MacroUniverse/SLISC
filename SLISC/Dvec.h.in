#pragma once
#include "global.h"

namespace slisc {
//% types = {
//%     'Int', true;
//%     'Int', false;
//%     'Llong', true;
//%     'Llong', false;
//%     'Long', true;
//%     'Long', false;
//%     'Doub', true;
//%     'Doub', false;
//%     'Comp', true;
//%     'Comp', false;
//% };
//%------------------------
//% [T, constness] = varargin{:};
//% DvecT = ['Dvec' T];
//% DvecT_c = [DvecT '_c'];
//% if constness
//%     CT = ['const ' T];
//%     Class = DvecT_c;
//% else
//%     CT = T;
//% 	Class = DvecT;
//% end
//% if is_Long(T) && constness
#ifdef SLS_USE_INT_AS_LONG
typedef DvecInt_c DvecLong_c;
#else
typedef DvecLlong_c DvecLong_c;
#endif
//% elseif is_Long(T) && ~constness
#ifdef SLS_USE_INT_AS_LONG
typedef DvecInt DvecLong;
#else
typedef DvecLlong DvecLong;
#endif
//% else
class @Class@
{
protected:
    @CT@ *m_p;
    Long m_N;
    Long m_step;
public:
    @Class@();
    @Class@(@CT@ *ptr, Long_I N, Long_I step);
	@CT@* ptr() const;
	@CT@ & operator[](Long_I i) const;
	@CT@ & operator()(Long_I i) const;
	@CT@ & end() const;
	@CT@ & end(Long_I i) const;
    Long size() const;
    Long step() const;
//% % resize() is a bad idea, don't try to create it!

//% if ~constness
	operator @DvecT_c@() const;
//% end
	@Class@ &operator=(const @Class@ &) = delete;

    // === other member functions ===
    // There is no bound checking, use with care
	void set_ptr(@CT@ *ptr);
	void set(@CT@ *ptr, Long_I N, Long_I step);
	void set(const @Class@ &sli);
    void set_size(Long_I N);
    void next(); // m_ptr += m_N
    void last(); // m_ptr -= m_N
    void shift(Long_I N); // m_ptr += N;
    
    ~@Class@();
};

inline @Class@::@Class@() {}

inline @Class@::@Class@(@CT@ *ptr, Long_I N, Long_I step)
    : m_p(ptr), m_N(N), m_step(step) {}

inline @CT@ * @Class@::ptr() const
{
#ifdef SLS_CHECK_BOUNDS
    if (m_N == 0)
        SLS_ERR("using ptr() for empty container!");
#endif
    return m_p;
}

inline Long @Class@::size() const
{
    return m_N;
}

inline Long @Class@::step() const
{
    return m_step;
}

inline @CT@ & @Class@::operator[](Long_I i) const
{
#ifdef SLS_CHECK_BOUNDS
    if (i < 0 || i >= m_N)
        SLS_ERR("Vbase subscript out of bounds");
#endif
    return m_p[m_step*i];
}

inline @CT@ & @Class@::operator()(Long_I i) const
{ return (*this)[i]; }

inline @CT@ & @Class@::end() const
{
#ifdef SLS_CHECK_BOUNDS
    if (m_N == 0)
        SLS_ERR("tring to use end() on empty vector!");
#endif
    return m_p[m_step*(m_N - 1)];
}

inline @CT@ & @Class@::end(Long_I i) const
{
    return m_p[m_step*(m_N - i)];
}

inline void @Class@::set_size(Long_I N)
{
#ifdef SLS_CHECK_SHAPE
    if (N <= 0) SLS_ERR("illegal N!");
#endif
    m_N = N;
}

//% if ~constness
inline @Class@::operator @DvecT_c@() const
{
	return *((@DvecT_c@ *)this);
}
//% end

inline void @Class@::set_ptr(@CT@ * ptr)
{
    m_p = ptr;
}

inline void @Class@::set(@CT@ * ptr, Long_I N, Long_I step)
{
    m_p = ptr; m_N = N; m_step = step;
}

inline void @Class@::set(const @Class@ &sli)
{
	m_p = sli.m_p; m_N = sli.m_N; m_step = sli.m_step;
}

inline void @Class@::next()
{
    m_p += m_N;
}

inline void @Class@::last()
{
    m_p -= m_N;
}

inline void @Class@::shift(Long_I N)
{
    m_p += N;
}

inline @Class@::~@Class@() {}

//% end

//% if constness
typedef const @Class@ & @DvecT@_I;
//% else
typedef const @Class@ & @DvecT@_O, & @DvecT@_IO;
//% end
//%------------------------
} // namespace slisc
