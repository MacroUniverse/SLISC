#pragma once
#include "global.h"
#include "Imag.h"

namespace slisc {
//% types = {
//%     'Char', true;   'Char', false;
//%     'Int', true;    'Int', false;
//%     'Llong', true;  'Llong', false;
//%     'Long', true;  'Long', false;
//%     'Float', true;  'Float', false;
//%     'Doub', true;   'Doub', false;
//%     'Ldoub', true;  'Ldoub', false;
//%     'Fcomp', true;  'Fcomp', false;
//%     'Comp', true;   'Comp', false;
//%     'Lcomp', true;  'Lcomp', false;
//%     'Fimag', true;  'Fimag', false;
//%     'Imag', true;   'Imag', false;
//%     'Limag', true;  'Limag', false;
//% };
//%------------------------
//% [T, constness] = varargin{:};
//% SvecT = ['Svec' T];
//% SvecT_c = [SvecT '_c'];
//% if constness
//%     CT = ['const ' T];
//%     Class = SvecT_c;
//% else
//%     CT = T;
//%     Class = SvecT;
//% end
//% if is_Long(T) && constness
#ifdef SLS_USE_INT_AS_LONG
typedef SvecInt_c SvecLong_c;
#else
typedef SvecLlong_c SvecLong_c;
#endif
//% elseif is_Long(T) && ~constness
#ifdef SLS_USE_INT_AS_LONG
typedef SvecInt SvecLong;
#else
typedef SvecLlong SvecLong;
#endif
//% else
class @Class@
{
protected:
    @CT@ *m_p;
    Long m_N;
#ifdef SLS_CHECK_BOUNDS
    Long m_data_len; // used for debug
#endif
public:
    @Class@();
    explicit @Class@(Long_I N);
    @Class@(@CT@ *data, Long_I N); // unsafe
    @Class@(@CT@ *data, Long_I data_len, Long_I N);
    @CT@* ptr() const;
    Long size() const;
//% % resize() is a bad idea, don't try to create it!
    @CT@ & operator[](Long_I i) const;
    @CT@ & operator()(Long_I i) const;
    @CT@ & end() const;
    @CT@ & end(Long_I i) const;
//% if ~constness
    operator @SvecT_c@() const;
//% end
    void set(@CT@ *data, Long_I data_len, Long_I N);
    void set(const @Class@ &sli);
    void next(); // m_ptr += m_N
    
    // === unsafe operations (unsafe) ===
    void set_ptr(@CT@ *data);
    void set_size(Long_I N);
    void set(@CT@ *data, Long_I N);
    void last(); // m_ptr -= m_N
    void shift(Long_I N); // m_ptr += N

    ~@Class@();
};

inline @Class@::@Class@() {}

inline @Class@::@Class@(Long_I N) : m_N(N)
{
#ifdef SLS_CHECK_BOUNDS
    m_p = nullptr; m_data_len = 0;
#endif
}

inline @Class@::@Class@(@CT@ *data, Long_I N)
    : m_p(data), m_N(N) {
#ifdef SLS_CHECK_BOUNDS
    m_data_len = std::numeric_limits<Long>::max();
#endif
}

inline @Class@::@Class@(@CT@ *data, Long_I data_len, Long_I N)
    : m_p(data), m_N(N)
{
#ifdef SLS_CHECK_BOUNDS
    if (N > data_len)
        SLS_ERR("cut out of bound!");
    m_data_len = data_len;
#endif
}

inline @CT@ * @Class@::ptr() const
{
#ifdef SLS_CHECK_BOUNDS
    if (m_N == 0)
        SLS_ERR("using ptr() for empty container!");
#endif
    return m_p;
}

inline Long @Class@::size() const
{
    return m_N;
}

inline @CT@ & @Class@::operator[](Long_I i) const
{
#ifdef SLS_CHECK_BOUNDS
    if (i < 0 || i >= m_N)
        SLS_ERR("Vbase subscript out of bounds");
#endif
    return m_p[i];
}

inline @CT@ & @Class@::end() const
{
#ifdef SLS_CHECK_BOUNDS
    if (m_N == 0)
        SLS_ERR("tring to use end() on empty vector!");
#endif
    return m_p[m_N - 1];
}

inline @CT@ & @Class@::end(Long_I i) const
{
#ifdef SLS_CHECK_BOUNDS
    if (i <= 0 || i > m_N)
        SLS_ERR("index out of bound");
#endif
    return m_p[m_N - i];
}

//% if ~constness
inline @Class@::operator @SvecT_c@() const
{
    return *((@SvecT_c@ *)this);
}
//% end

inline void @Class@::set(@CT@ *data, Long_I N)
{
    m_p = data; m_N = N;
#ifdef SLS_CHECK_BOUNDS
    m_data_len = std::numeric_limits<Long>::max();
#endif
}

inline void @Class@::set(@CT@ *data, Long_I data_len, Long_I N)
{
#ifdef SLS_CHECK_BOUNDS
    if (N > data_len)
        SLS_ERR("cut out of bound!");
#endif
    m_p = data; m_N = N;
}

inline void @Class@::set(const @Class@ &sli)
{
    m_p = sli.m_p; m_N = sli.m_N;
#ifdef SLS_CHECK_BOUNDS
    m_data_len = sli.m_data_len;
#endif
}

inline void @Class@::set_ptr(@CT@ *data)
{
    m_p = data;
#ifdef SLS_CHECK_BOUNDS
    m_data_len = std::numeric_limits<Long>::max();
#endif
}

inline void @Class@::set_size(Long_I N)
{
#ifdef SLS_CHECK_BOUNDS
    if (N > m_data_len)
        SLS_ERR("cut out of bound!");
#endif
    m_N = N;
}

inline void @Class@::next()
{
#ifdef SLS_CHECK_BOUNDS
    m_data_len -= m_N;
    if (m_N > m_data_len)
        SLS_ERR("cut out of bound!");
#endif
    m_p += m_N;
}

inline void @Class@::last()
{
    m_p -= m_N;
}

inline void @Class@::shift(Long_I N)
{
#ifdef SLS_CHECK_BOUNDS
    m_data_len -= m_N;
    if (m_N > m_data_len)
        SLS_ERR("cut out of bound!");
#endif
    m_p += N;
}

inline @Class@::~@Class@() {}
//% end

//% if constness
typedef const @Class@ & @SvecT@_I;
//% else
typedef const @Class@ & @SvecT@_O, & @SvecT@_IO;
//% end
//%------------------------
} // namespace slisc
