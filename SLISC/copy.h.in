// copy data from one container to another
// includes container shape checking
// all `container = container` should be implemented using copy
#pragma once
#include "compare.h"

namespace slisc {
//  === pointer interface ===

//% types = {
//%     'Char'; 'Int'; 'Llong'; 'Float'; 'Doub'; 'Comp';
//%     };
//%-----------------------
//% T = varargin{:};
inline void vecset(@T@ *v, @T@_I val, Long_I n)
{
    for (@T@ *p = v; p < v + n; ++p)
        *p = val;
}

inline void vecset(@T@ *v, @T@_I val, Long_I n, Long_I step)
{
    for (@T@ *p = v; p < v + n*step; p += step)
        *p = val;
}
//%------------------------

//% types = {
//%     'Char', 'Char';
//%     'Int', 'Int';
//%     'Llong', 'Llong';
//%     'Doub', 'Llong';
//%     'Float', 'Float';
//%     'Doub', 'Float';
//%     'Doub', 'Doub';
//%     'Comp', 'Doub';
//%     'Comp', 'Llong';
//%     'Comp', 'Comp';
//%     };
//%----------------------------
//% [T, T1] = varargin{:};
//% if ~is_promo(T, T1)
//%     error('illegal types!');
//% end
inline void veccpy(@T@ *v, const @T1@ *v1, Long_I n)
{
    for (Long i = 0; i < n; ++i)
        v[i] = v1[i];
}

inline void veccpy(@T@ *v, const @T1@ *v1, Long_I step1, Long_I n)
{
    for (@T@ *p = v; p < v + n; ++p) {
        *p = *v1;
        v1 += step1;
    }
}

inline void veccpy(@T@ *v, Long_I step, const @T1@ *v1, Long_I n)
{
    for (@T@ *p = v; p < v + n*step; p += step) {
        *p = *v1;
        ++v1;
    }
}

inline void veccpy(@T@ *v, Long_I step, const @T1@ *v1, Long_I step1, Long_I n)
{
    @T@ *end = v + n * step;
    for (; v < end; v += step) {
        *v = *v1;
        v1 += step1;
    }
}
//%------------------------

//% types = {
//%     'Int', 'Int';
//%     'Llong', 'Llong';
//%     'Doub', 'Doub';
//%     'Comp', 'Comp';
//%     };
//%--------------------------
//% [T, T1] = varargin{:};
//% if ~is_promo(T, T1);
//%     error('illegal types!');
//% end
inline void matcpy(@T@ *v, Long_I lda, const @T1@ *v1, Long_I lda1, Long_I Nr, Long_I Nc)
{
    for (Long j = 0; j < Nr; ++j) {
        veccpy(v, v1, Nc);
        v += lda; v1 += lda1;
    }
}
//%------------------------

//% types = {
//%     'Llong', 'Llong';
//%     'Doub', 'Doub';
//%     'Comp', 'Comp';
//%     };
//%----------------------------
//% [T, T1] = varargin{:};
//% if ~is_promo(T, T1);
//%     error('illegal types!');
//% end
inline void matcpy_diff_major(@T@ *a2, const @T1@ *a1, Long_I N2, Long_I N1)
{
    for (Long i2 = 0; i2 < N2; ++i2) {
        Long start = N1 * i2, k2 = i2;
        for (Long k1 = start; k1 < start + N1; ++k1) {
            a2[k2] = a1[k1];
            k2 += N2;
        }
    }
}

inline void matcpy_diff_major(@T@ *a2, const @T1@ *a1, Long_I N2, Long_I lda2, Long_I N1, Long_I lda1)
{
    for (Long i2 = 0; i2 < N2; ++i2) {
        Long start = lda1 * i2, k2 = i2;
        for (Long k1 = start; k1 < start + N1; ++k1) {
            a2[k2] = a1[k1];
            k2 += lda2;
        }
    }
}
//%------------------------

// copy dense matrix with different majors
// lda1 is leading dimension of a1, lda2 is leading dimension of a2
// if a1 is row major and a2 is column major, N1 is number of columns, N2 is number of rows
// if a1 is column major and a2 is row major, N1 is number of rows, N2 is number of columns
// #include "matcpy_diff_major.inl"

// === container interface ===
// must use pointer version


// scalar to container
//% types = {
//%     'VecInt', 'Int';
//%     'VecLlong', 'Llong';
//%     'VecDoub', 'Doub';
//%     'VecComp', 'Comp';
//%     'SvecLlong', 'Llong';
//%     'SvecDoub', 'Doub';
//%     'SvecComp', 'Comp';
//%     'MatInt', 'Int';
//%     'MatDoub', 'Doub';
//%     'CmatInt', 'Int';
//%     'CmatLlong', 'Llong';
//%     'CmatDoub', 'Doub';
//%     'CmatComp', 'Comp';
//%     };
//%-------------------------------------
//% [T, Ts] = varargin{:};
//% if ~is_contain(T) || ~is_scalar(Ts)
//%     error('illegal types!');
//% elseif ~is_promo(contain_type(T), Ts)
//%     error('not a promo!');
//% end
inline void copy(@T@_O v, @Ts@_I s)
{
//% if is_dense(T)
    vecset(v.ptr(), s, v.size());
//% elseif is_Dvec(T)
    vecset(v.ptr(), s, v.size(), v.step());
//% elseif is_Dcmat(T)
    Long N1 = v.n1(), N2 = v.n2();
    for (Long j = 0; j < N2; ++j)
        vecset(&v(0, j), s, N1);
//% elseif is_Dmat(T)
    Long N1 = v.n1(), N2 = v.n2();
    for (Long i = 0; i < N1; ++i)
        vecset(&v(i, 0), s, N2);
//% else
//%     error('not implemented!');
//% end
}
//%------------------------

// container to container
//% types = {
//%     'VecChar', 'VecChar';
//%     'VecInt', 'VecInt';
//%     'VecInt', 'SvecInt';
//%     'VecInt', 'DvecInt';
//%     'VecLlong', 'VecLlong';
//%     'VecDoub', 'VecDoub';
//%     'VecComp', 'VecComp';
//%     'MatLlong', 'MatLlong';
//%     'MatDoub', 'MatDoub';
//%     'MatComp', 'MatComp';
//%     'CmatLlong', 'CmatLlong';
//%     'CmatDoub', 'CmatDoub';
//%     'CmatComp', 'CmatComp';
//%     'MatDoub', 'CmatDoub';
//%     'CmatDoub', 'MatDoub';
//%     'DvecInt', 'DvecInt';
//%     'DvecDoub', 'DvecDoub';
//%     'DcmatInt', 'CmatInt';
//%     'DcmatDoub', 'CmatDoub';
//%     };
//%---------------------------
//% [T, T1] = varargin{:};
//% if ~is_promo(contain_type(T), contain_type(T1))
//%     error('illegal types');
//% end
inline void copy(@T@_O v, @T1@_I v1)
{
#ifdef SLS_CHECK_SHAPE
    if (!shape_cmp(v, v1))
        SLS_ERR("wrong shape!");
#endif
    if (v.size() == 0)
        return;
//% if is_dense(T) && is_dense(T1) && is_same_major(T, T1)
    veccpy(v.ptr(), v1.ptr(), v.size());
//% elseif is_Dvec(T) && is_Dvec(T1)
    veccpy(v.ptr(), v.step(), v1.ptr(), v1.step(), v.size());
//% elseif is_dense_vec(T) && is_Dvec(T1)
    veccpy(v.ptr(), v1.ptr(), v1.step(), v1.size());
//% elseif is_Dvec(T) && is_dense_vec(T1)
    veccpy(v.ptr(), v.step(), v1.ptr(), v1.size());
//% elseif is_dense_mat(T) && is_dense_mat(T1) && is_diff_major(T, T1)
//%     if is_cmajor(T)
    matcpy_diff_major(v.ptr(), v1.ptr(), v.n1(), v.n2());
//%     else
    matcpy_diff_major(v.ptr(), v1.ptr(), v.n2(), v.n1());
//%     end
//% elseif is_Dmat(T) && is_Dmat(T1) || is_Dcmat(T) && is_Dcmat(T1)
    matcpy(v.ptr(), v.lda(), v1.ptr(), v1.lda(), v.n1(), v.n2());
//% elseif is_Dcmat(T) && is_Cmat(T1)
    matcpy(v.ptr(), v.lda(), v1.ptr(), v.n1(), v.n1(), v.n2());
//% elseif ndim(T) == 3 && ndim(T1) == 3
    // slow
    if (v1.size() != 0)
    for (Long k = 0; k < v.n3(); ++k)
        for (Long j = 0; j < v.n2(); ++j)
            for (Long i = 0; i < v.n1(); ++i)
                v(i, j, k) = v1(i, j, k);
//% else
//%     disp(['T = ', T]);
//%     disp(['T1 = ', T1]);
//%     error('not implemented!');
//% end
}
//%------------------------

// for sparse containers
//% types = {
//%     'Doub', 'Doub';
//%     'Comp', 'Comp';
//% };
//%----------------------------
//% [T, T1] = varargin{:};
//% McooT = ['Mcoo', T]; McooT1 = ['Mcoo', T1];
inline void copy(@McooT@_O v, @McooT1@_I v1)
{
#ifdef SLS_CHECK_SHAPE
    if (!shape_cmp(v, v1))
        SLS_ERR("wrong shape!");
    if (v.capacity() < v1.nnz())
        SLS_ERR("not enough capacity!");
#endif
    if (v1.nnz() == 0)
        return;
//% if is_same(T, T1)
    if (v.ptr() == v1.ptr())
        SLS_ERR("self assignment is forbidden!");
//% end
    Long Nnz = v1.nnz();
    v.resize(Nnz);
    veccpy(v.ptr(), v1.ptr(), Nnz);
    veccpy(v.row_ptr(), v1.row_ptr(), Nnz);
    veccpy(v.col_ptr(), v1.col_ptr(), Nnz);
}
//%------------------------

//% types = {
//%     'CmatDoub', 'Doub';
//%     'CmatComp', 'Comp';
//% };
//%----------------------------
//% [Tmat, Ts] = varargin{:};
//% if ~((is_dense_mat(Tmat) || is_Dmat(Tmat) || is_Jmat(Tmat)) && is_scalar(Ts))
//%     error('illegal types');
//% end
//% McooTs = ['Mcoo', Ts]; McoohTs = ['Mcooh', Ts];
inline void copy(@Tmat@_O lhs, @McooTs@_I rhs)
{
#ifdef SLS_CHECK_SHAPE
    if (!shape_cmp(lhs, rhs))
        SLS_ERR("wrong shape!");
#endif
    copy(lhs, 0);
    for (Long i = 0; i < rhs.nnz(); ++i) {
        lhs(rhs.row(i), rhs.col(i)) = rhs[i];
    }
}

// inline void cooh2dense(@Tmat@_O lhs, @McoohTs@_I rhs)
// {
// #ifdef SLS_CHECK_SHAPE
//     if (!shape_cmp(lhs, rhs))
//         SLS_ERR("wrong shape!");
// #endif
//     copy(lhs, 0);
//     for (Long i = 0; i < rhs.nnz(); ++i) {
//         Long r = rhs.row(i), c = rhs.col(i);
//         if (r == c)
//             lhs(r, r) = rhs(i);
//         else {
//             lhs(r, c) = rhs(i);
//             lhs(c, r) = CONJ(rhs(i));
//         }
//     }
// }
//%------------------------

// from MatCoo and MatCooH to dense matrix
// #include "matrix_coo2dense.inl"

// template <class T, class T1, SLS_IF(is_promo<T, T1>())>
// void copy(MatCoo<T> &v, const CmatObd<T1> &v1)
// {
// #ifdef SLS_CHECK_SHAPE
//     if (!shape_cmp(v, v1))
//         SLS_ERR("wrong shape!");
//     if (v.capacity() < v1.nnz())
//         SLS_ERR("not enough capacity!");
// #endif
//     if (v1.nnz() == 0)
//         return;
//     Long N0 = v1.n0(), N1 = N0 - 1;
//     Long N = v1.n1();
//     Long k = 0;
//     for (Long blk = 0; blk < v1.nblk(); ++blk) {
//         for (Long j = 0; j < N0; ++j) {
//             for (Long i = 0; i < N0; ++i) {
//                 Long shift = blk * N1 - 1;
//                 Long ii = shift + i, jj = shift + j;
//                 if (!((i == N1 && j == N1) || ii < 0 || jj < 0 || ii == N || jj == N))
//                     v.push(v1(k), ii, jj);
//                 ++k;
//             }
//         }
//     }
// }

} // namespace slisc
