#pragma once
#include "Vec.h"
#include "Mat.h"
#include "Mat3.h"
#include "Cmat.h"
#include "Cmat3.h"
#include "Cmat4.h"
#include "Cband.h"
#include "Mcoo.h"
#include "Cmobd.h"
#include "Svec.h"
#include "Dvec.h"
#include "Scmat.h"
#include "Scmat3.h"
#include "Dcmat.h"
#include "Jcmat3.h"

namespace slisc {
//% tem('equals_to_vs', { 'Comp', 'Doub' });
//%------------------------
//% [T, T1] = varargin{:};
inline Bool equals_to_vs(const @T@ *v, @T1@_I s, Long_I N)
{
    for (Long i = 0; i < N; ++i)
        if (v[i] != s)
            return false;
    return true;
}
//%------------------------

//% tem('equals_to_vv', { 'Int', 'Int' });
//%--------------------------------
//% [T1, T2] = varargin{:};
inline Bool equals_to_vv(const @T1@ *v1, const @T2@ *v2, Long_I N)
{
    for (Long i = 0; i < N; ++i)
        if (v1[i] != v2[i])
            return false;
    return true;
}
//%------------------------

//% tem('shape_cmp', { 'CmatDoub', 'CmatDoub';
//%   'Mat3Doub', 'Mat3Comp'; });
//%--------------------------------
//% [T1, T2] = varargin{:};
//% N1 = ndim(T1); N2 = ndim(T2);
//% [Ts1,Ts2] = val_t(T1,T2);
//% if N1 ~= N2
inline Bool shape_cmp(@T1@_I v1, @T2@_I v2) {return false;}
//% elseif N1 == 1
inline Bool shape_cmp(@T1@_I v1, @T2@_I v2) {return (Long)v1.size() == (Long)v2.size();}
//% elseif N1 == 2
inline Bool shape_cmp(@T1@_I v1, @T2@_I v2) {return v1.n0() == v2.n0() && v1.n1() == v2.n1();}
//% elseif N1 == 3
inline Bool shape_cmp(@T1@_I v1, @T2@_I v2) {return v1.n0() == v2.n0() && v1.n1() == v2.n1() && v1.n2() == v2.n2();}
//% elseif N1 == 4
inline Bool shape_cmp(@T1@_I v1, @T2@_I v2) {return v1.n0() == v2.n0() && v1.n1() == v2.n1() && v1.n2() == v2.n2() && v1.n3() == v2.n3();}
//% else
//%     error('not implemented (1)!');
//% end
//%--------------------------------

//% tem('assert_same_shape', { 'CmatComp', 'CmatInt' });
//%--------------------------------
//% [T1, T2] = varargin{:};
//% [Ts1,Ts2] = val_t(T1,T2);
inline void assert_same_shape(@T1@_I v1, @T2@_I v2)
{
#ifdef SLS_CHECK_SHAPES
//% req('shape_cmp', {T1, T2});
    if (!shape_cmp(v1, v2))
        SLS_ERR("wrong shape!");
#endif
}
//%--------------------------------

//% tem('assert_same_shape3', { 'CmatComp', 'CmatInt', 'CmatDoub' });
//%--------------------------------
//% [T1, T2, T3] = varargin{:};
//% [Ts1,Ts2,Ts3] = val_t(T1,T2,T3);
//% req('assert_same_shape', {T1, T2}); req('assert_same_shape', {T1, T3});
inline void assert_same_shape(@T1@_I v1, @T2@_I v2, @T3@_I v3)
{ assert_same_shape(v1, v2); assert_same_shape(v1, v3); }
//%--------------------------------

//% tem('v==v', {
//%   'VecChar', 'VecChar';
//%   'VecUchar', 'VecUchar';
//%   'VecInt', 'VecInt';
//%   'VecLlong', 'VecLlong';
//%   'VecDoub', 'VecDoub';
//%   'VecDoub', 'VecComp';
//%   'VecComp', 'VecComp';
//%   'MatLlong', 'MatLlong';
//%   'MatDoub' 'MatDoub'
//%   'MatDoub' 'CmatDoub'
//%   'MatInt' 'MatInt'
//%   'MatDoub' 'MatDoub'
//%   'MatComp', 'MatComp';
//%   'CmatInt' 'CmatInt'
//%   'CmatLlong' 'CmatLlong'
//%   'CmatDoub', 'CmatDoub';
//%   'CmatDoub', 'MatDoub';
//%   'CmatComp', 'MatComp';
//%   'CmatComp', 'CmatComp';
//%   'Cmat3Llong' 'Cmat3Llong'
//%   'Cmat3Doub' 'Cmat3Doub'
//%   'Cmat3Comp' 'Cmat3Comp'
//%   'Mat3Doub' 'Mat3Doub'
//%   'DcmatDoub' 'CmatDoub'
//%   'Jcmat3Doub' 'Cmat3Doub'
//% });
//%--------------------------
//% [T1, T2] = varargin{:};
//% [Ts1,Ts2] = val_t(T1,T2);
inline Bool operator==(@T1@_I v1, @T2@_I v2)
{
//%     req('shape_cmp', {T1, T2});
//% if is_dense(T1) && is_dense(T2) && is_same_major(T1, T2)
//%     req('equals_to_vv', {Ts1, Ts2});
    return shape_cmp(v1, v2) &&
        equals_to_vv(v1.p(), v2.p(), v2.size());
//% elseif ndim(T1) == 1 && ndim(T2) == 1
    if (!shape_cmp(v1, v2))
        return false;
    for (Long i = 0; i < v1.size(); ++i) {
        if (v1[i] != v2[i])
            return false;
    }
    return true;
//% elseif ndim(T1) == 2 && ndim(T2) == 2
    if (!shape_cmp(v1, v2))
        return false;
    for (Long i = 0; i < v1.n0(); ++i)
        for (Long j = 0; j < v1.n1(); ++j)
            if (v1(i, j) != v2(i, j))
                return false;
    return true;
//% elseif ndim(T1) == 3 && ndim(T2) == 3
    if (!shape_cmp(v1, v2))
        return false;
    for (Long i = 0; i < v1.n0(); ++i)
        for (Long j = 0; j < v1.n1(); ++j)
            for (Long k = 0; k < v1.n2(); ++k)
                if (v1(i, j, k) != v2(i, j, k))
                    return false;
    return true;
//% else
//%     error('not implemented (2)!');
//% end
}

inline Bool operator!=(@T1@_I v1, @T2@_I v2)
{ return !(v1 == v2); }
//%------------------------

inline Bool operator==(VecBool_I v1, VecBool_I v2)
{
    for (Long i = 0; i < v1.size(); ++i)
        if (v1[i] != v2[i])
            return false;
    return true;
}

inline Bool operator!=(VecBool_I v1, VecBool_I v2)
{ return !(v1 == v2); }

//% tem('v==s', { 'VecInt'; 'VecLlong';
//%   'VecDoub'; 'VecComp'; 'DvecInt'; 'DvecDoub';
//%  'CmatLlong'; 'CmatDoub'; 'CmatComp';
//%   'MatDoub'; 'Mat3Doub'; 'Cmat3Doub'; });
//%--------------------------
//% T = varargin{:}; Ts = val_t(T);
inline Bool operator==(@T@_I v, @Ts@_I s)
//% if is_dense(T)
//%     req('equals_to_vs', {Ts Ts});
{ return equals_to_vs(v.p(), s, v.size()); }
//% elseif is_Dcmat(T)
{
    for (Long j = 0; j < v.n1(); ++j)
//%     req('equals_to_vs', {Ts Ts});
        if !equals_to_vs(v.p() + v.n0()*j, s, v.n0());
            return false
    return true;
}
//% else
{
    for (Long i = 0; i < v.size(); ++i)
        if (v[i] != s)
            return false;
    return true;
}
//% end

inline Bool operator!=(@T@_I v, @Ts@_I s)
{ return !(v == s); }
//%------------------------
} // namespace slisc
