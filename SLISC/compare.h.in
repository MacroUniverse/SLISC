#pragma once
#include "Vec.h"
#include "Mat.h"
#include "Mat3.h"
#include "Cmat.h"
#include "Cmat3.h"
#include "Mcoo.h"
#include "Svec.h"
#include "Dvec.h"
#include "Scmat.h"
#include "Dcmat.h"

namespace slisc {
//% types = {
//%     'Llong', 'Llong';
//%     'Doub', 'Doub';
//%     'Comp', 'Comp';
//%     };
//%------------------------
//% T = varargin{:};
inline Bool equals_to_vs(const @T@ *v, @T@_I s, Long_I N)
{
    for (Long i = 0; i < N; ++i)
        if (v[i] != s)
            return false;
    return true;
}
//%------------------------

//% types = {
//%     'Int', 'Int';
//%     'Llong', 'Llong';
//%     'Doub', 'Llong';
//%     'Doub', 'Doub';
//%     'Comp', 'Doub';
//%     'Comp', 'Comp';
//%     };
//%--------------------------------
//% [T1, T2] = varargin{:};
inline Bool equals_to_vv(const @T1@ *v1, const @T2@ *v2, Long_I N)
{
    for (Long i = 0; i < N; ++i)
        if (v1[i] != v2[i])
            return false;
    return true;
}
//%------------------------

//% types = {
//%     'VecChar', 'VecChar';
//%     'VecChar', 'VecInt';
//%     'VecChar', 'VecLlong';
//%     'VecInt', 'VecInt';
//%     'VecInt', 'VecLlong';
//%     'VecInt', 'SvecInt';
//%     'VecInt', 'DvecInt';
//%     'VecLlong', 'DvecLlong';
//%     'VecDoub', 'DvecDoub';
//%     'VecLlong', 'VecLlong';
//%     'VecDoub', 'VecLlong';
//%     'VecDoub', 'VecDoub';
//%     'VecComp', 'VecDoub';
//%     'VecDoub', 'VecComp';
//%     'VecComp', 'VecComp';
//%     'MatInt', 'MatInt';
//%     'MatLlong', 'MatLlong';
//%     'MatDoub', 'MatDoub';
//%     'MatComp', 'MatComp';
//%     'Mat3Doub', 'Mat3Comp';
//%     'CmatInt', 'CmatInt';
//%     'CmatInt', 'MatChar';
//%     'CmatLlong', 'CmatLlong';
//%     'CmatDoub', 'CmatDoub';
//%     'CmatComp', 'CmatDoub';
//%     'CmatComp', 'CmatComp';
//%     'MatDoub', 'CmatDoub';
//%     'CmatDoub', 'MatDoub';
//%     'MatComp', 'CmatComp';
//%     'CmatComp', 'MatComp';
//%     'DcmatDoub', 'CmatDoub';
//%     'Cmat3Doub', 'Cmat3Doub';
//%     'Cmat3Comp', 'Cmat3Comp';
//%     'McooDoub', 'McooDoub';
//%     'CmatDoub', 'McooDoub';
//%     'McooDoub', 'CmatDoub';
//%     'CmatComp', 'McooComp';
//%     'McooComp', 'CmatComp';
//%     'McooComp', 'McooComp';
//% };
//%---------------------------------
//% [T1, T2] = varargin{:};
inline Bool shape_cmp(@T1@_I v1, @T2@_I v2)
{
//% N1 = ndim(T1); N2 = ndim(T2);
//% if N1 ~= N2
    return false;
//% elseif N1 == 1
    return v1.size() == v2.size();
//% elseif N1 == 2
    return v1.n1() == v2.n1() && v1.n2() == v2.n2();
//% elseif N1 == 3
    return v1.n1() == v2.n1() && v1.n2() == v2.n2()
            && v1.n3() == v2.n3();
//% elseif N1 == 4
    return v1.n1() == v2.n1() && v1.n2() == v2.n2()
            && v1.n3() == v2.n3() && v1.n4() == v2.n4();
}
//% else
//%     error('not implemented!');
//% end
}
//%------------------------

//% types = {
//%     'VecInt', 'VecInt';
//%     'VecInt', 'DvecInt';
//%     'VecLlong', 'DvecLlong';
//%     'VecDoub', 'DvecDoub';
//%     'VecLlong', 'VecLlong';
//%     'VecDoub', 'VecDoub';
//%     'VecComp', 'VecComp';
//%     'MatInt', 'MatInt';
//%     'MatLlong', 'MatLlong';
//%     'MatDoub', 'MatDoub';
//%     'MatComp', 'MatComp';
//%     'CmatDoub', 'CmatDoub';
//%     'CmatComp', 'CmatComp';
//%     'MatDoub', 'CmatDoub';
//%     'CmatDoub', 'MatDoub';
//%     };
//%--------------------------
//% [T1, T2] = varargin{:};
inline Bool operator==(@T1@_I v1, @T2@_I v2)
{
//% if is_dense(T1) && is_dense(T2) && is_same_major(T1, T2)
    return shape_cmp(v1, v2) &&
        equals_to_vv(v1.ptr(), v2.ptr(), v2.size());
//% elseif ndim(T1) == 1 && ndim(T2) == 1
	if (!shape_cmp(v1, v2))
        return false;
	for (Long i = 0; i < v1.size(); ++i) {
		if (v1[i] != v2[i])
            return false;
	}
	return true;
//% elseif ndim(T1) == 2 && ndim(T2) == 2
    if (!shape_cmp(v1, v2))
        return false;
    for (Long i = 0; i < v1.n1(); ++i)
        for (Long j = 0; j < v1.n2(); ++j)
            if (v1(i, j) != v2(i, j))
                return false;
    return true;
//% else
//%     error('not implemented!');
//% end
}

inline Bool operator!=(@T1@_I v1, @T2@_I v2)
{
    return !(v1 == v2);
}
//%------------------------
} // namespace slisc
