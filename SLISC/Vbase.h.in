// basic vector
#pragma once
#include "global.h"
#include "Imag.h"

namespace slisc {
//% types = {'Char'; 'Int'; 'Llong'; 'Long'; 'Float'; 'Doub'; 'Comp'; 'Imag'};
//%----------------------------------------------
//% T = varargin{:};
//% VbaseT = ['Vbase' T];
//% if is_Long(T)
#ifdef SLS_USE_INT_AS_LONG
typedef VbaseInt VbaseLong;
#else
typedef VbaseLlong VbaseLong;
#endif
//% else
class @VbaseT@
{
protected:
    @T@ *m_p; // pointer to the first element
    Long m_N; // number of elements
public:
    typedef @T@ value_type;
    // constructors
    @VbaseT@();
    explicit @VbaseT@(Long_I N);
    @VbaseT@(const @VbaseT@ &rhs); // copy constructor

    // get properties
    @T@* ptr(); // get pointer
    const @T@* ptr() const;
    Long size() const;
    void resize(Long_I N);
    @T@ & operator[](Long_I i);
    const @T@ & operator[](Long_I i) const;
    @T@ & operator()(Long_I i);
    const @T@ & operator()(Long_I i) const;
    @T@& end();
    const @T@& end() const;
    @T@& end(Long_I i); // i = 1 for the last, i = 2 for the second last...
    const @T@& end(Long_I i) const;
    void operator<<(@VbaseT@ &rhs); // move data
    ~@VbaseT@();
};

inline @VbaseT@::@VbaseT@() : m_N(0) {}

inline @VbaseT@::@VbaseT@(Long_I N)
{
#ifdef SLS_CHECK_SHAPE
    if (N < 0)
        SLS_ERR("size less than 0!");
#endif
    m_N = N;
    if (N > 0)
        m_p = new @T@[N];
}

inline @VbaseT@::@VbaseT@(const @VbaseT@ &rhs)
{
#ifndef SLS_ALLOW_COPY_CONSTRUCTOR
    SLS_ERR("Copy constructor or move constructor is forbidden!");
#endif
    // m_N = rhs.m_N;
    // m_p = new @T@[rhs.m_N];
    // veccpy(m_p, rhs.ptr(), m_N);
}

inline @T@ * @VbaseT@::ptr()
{
#ifdef SLS_CHECK_BOUNDS
    if (m_N == 0)
        SLS_ERR("using ptr() for empty container!");
#endif
    return m_p;
}

inline const @T@ * @VbaseT@::ptr() const
{
#ifdef SLS_CHECK_BOUNDS
    if (m_N == 0)
        SLS_ERR("using ptr() for empty container!");
#endif
    return m_p;
}

inline Long @VbaseT@::size() const
{
    return m_N;
}

inline void @VbaseT@::resize(Long_I N)
{
    if (N != m_N) {
        if (m_N == 0) {
            m_N = N; m_p = new @T@[N];
        }
        else { // m_N != 0
            delete[] m_p;
            if (N == 0)
                m_N = 0;
            else {
                m_N = N;
                m_p = new @T@[N];
            }
        }
    }
}

inline void @VbaseT@::operator<<(@VbaseT@ &rhs)
{
    if (this == &rhs)
        SLS_ERR("self move is forbidden!");
    if (m_N != 0)
        delete[] m_p;
    m_N = rhs.m_N; rhs.m_N = 0;
    m_p = rhs.m_p;
}

inline @T@ & @VbaseT@::operator[](Long_I i)
{
#ifdef SLS_CHECK_BOUNDS
if (i<0 || i>=m_N)
    SLS_ERR("@VbaseT@ subscript out of bounds");
#endif
    return m_p[i];
}

inline const @T@ & @VbaseT@::operator[](Long_I i) const
{
#ifdef SLS_CHECK_BOUNDS
    if (i<0 || i>=m_N)
        SLS_ERR("@VbaseT@ subscript out of bounds");
#endif
    return m_p[i];
}

inline @T@ & @VbaseT@::operator()(Long_I i)
{ return (*this)[i]; }

inline const @T@ & @VbaseT@::operator()(Long_I i) const
{ return (*this)[i]; }

inline @T@ & @VbaseT@::end()
{
#ifdef SLS_CHECK_BOUNDS
    if (m_N == 0)
        SLS_ERR("tring to use end() on empty vector!");
#endif
    return m_p[m_N - 1];
}

inline const @T@ & @VbaseT@::end() const
{
#ifdef SLS_CHECK_BOUNDS
    if (m_N == 0)
        SLS_ERR("tring to use end() on empty vector!");
#endif
    return m_p[m_N - 1];
}

inline @T@ & @VbaseT@::end(Long_I i)
{
#ifdef SLS_CHECK_BOUNDS
    if (i <= 0 || i > m_N)
        SLS_ERR("index out of bound");
#endif
    return m_p[m_N - i];
}

inline const @T@ & @VbaseT@::end(Long_I i) const
{
#ifdef SLS_CHECK_BOUNDS
    if (i <= 0 || i > m_N)
        SLS_ERR("index out of bound");
#endif
    return m_p[m_N - i];
}

inline @VbaseT@::~@VbaseT@()
{
    if (m_N != 0)
        delete[] m_p;
}
//% end
//%------------------------

class VbaseBool
{
protected:
    std::vector<bool> m_v;
public:
    typedef std::vector<bool>::reference ref;
    // constructors
    VbaseBool() = default;
    explicit VbaseBool(Long_I N);
    VbaseBool(const VbaseBool &rhs); // copy constructor

    // get properties
    Long size() const;
    void resize(Long_I N);
    VbaseBool::ref operator[](Long_I i);
    Bool operator[](Long_I i) const;
    VbaseBool::ref operator()(Long_I i);
    Bool operator()(Long_I i) const;
    VbaseBool::ref end();
    Bool end() const;
    VbaseBool::ref end(Long_I i); // i = 1 for the last, i = 2 for the second last...
    Bool end(Long_I i) const;
    void operator<<(VbaseBool &rhs); // move data
};

inline VbaseBool::VbaseBool(Long_I N)
{
#ifdef SLS_CHECK_SHAPE
    if (N < 0)
        SLS_ERR("size less than 0!");
#endif
    if (N > 0)
        m_v.resize(N);
}

inline VbaseBool::VbaseBool(const VbaseBool &rhs)
{
#ifndef SLS_ALLOW_COPY_CONSTRUCTOR
    SLS_ERR("Copy constructor or move constructor is forbidden!");
#endif
}

inline Long VbaseBool::size() const
{
    return m_v.size();
}

inline void VbaseBool::resize(Long_I N)
{
    m_v.resize(N);
}

inline void VbaseBool::operator<<(VbaseBool &rhs)
{
    if (this == &rhs)
        SLS_ERR("self move is forbidden!");
    m_v.swap(rhs.m_v);
}

inline VbaseBool::ref VbaseBool::operator[](Long_I i)
{
#ifdef SLS_CHECK_BOUNDS
if (i<0 || i>=size())
    SLS_ERR("VbaseBool subscript out of bounds");
#endif
    return m_v[i];
}

inline Bool VbaseBool::operator[](Long_I i) const
{
#ifdef SLS_CHECK_BOUNDS
    if (i<0 || i>=size())
        SLS_ERR("VbaseBool subscript out of bounds");
#endif
    return m_v[i];
}

inline VbaseBool::ref VbaseBool::operator()(Long_I i)
{ return m_v[i]; }

inline Bool VbaseBool::operator()(Long_I i) const
{ return m_v[i]; }

inline VbaseBool::ref VbaseBool::end()
{
#ifdef SLS_CHECK_BOUNDS
    if (m_v.empty())
        SLS_ERR("tring to use end() on empty vector!");
#endif
    return m_v.back();
}

inline Bool VbaseBool::end() const
{
#ifdef SLS_CHECK_BOUNDS
    if (m_v.empty())
        SLS_ERR("tring to use end() on empty vector!");
#endif
    return m_v.back();
}

inline VbaseBool::ref VbaseBool::end(Long_I i)
{
#ifdef SLS_CHECK_BOUNDS
    if (i <= 0 || i > size())
        SLS_ERR("index out of bound");
#endif
    return m_v[size() - i];
}

inline Bool VbaseBool::end(Long_I i) const
{
#ifdef SLS_CHECK_BOUNDS
    if (i <= 0 || i > size())
        SLS_ERR("index out of bound");
#endif
    return m_v[size() - i];
}
} // namespace slisc
