// vector container
#pragma once
#include "Vbase.h"

namespace slisc {
//% types = {'Char'; 'Int'; 'Llong'; 'Long'; 'Float'; 'Doub'; 'Comp'};
//%----------------------------------------------------------
//% T = varargin{:};
//% VecT = ['Vec' T];
//% VbaseT = ['Vbase' T];
//% if is_Long(T)
#ifdef SLS_USE_INT_AS_LONG
typedef VecInt VecLong;
#else
typedef VecLlong VecLong;
#endif
//% else
class @VecT@ : public @VbaseT@
{
public:
    typedef @VbaseT@ Base;
    @VecT@() = default;
    explicit @VecT@(Long_I N);
    @VecT@(const @VecT@ &rhs); // copy constructor
    @VecT@ & operator=(const @VecT@ &rhs) = delete;
    @T@ & operator()(Long_I i);
    const @T@ & operator()(Long_I i) const;
    void operator<<(@VecT@ &rhs); // move data and rhs.resize(0)
};

inline @VecT@::@VecT@(Long_I N) : Base(N) {}

inline @VecT@::@VecT@(const @VecT@ &rhs) : Base(rhs)
{
#ifdef SLS_NO_CPY_CONSTRUCTOR
    SLS_ERR("copy constructor forbidden!");
#endif
}

inline @T@ & @VecT@::operator()(Long_I i)
{ return (*this)[i]; }

inline const @T@ & @VecT@::operator()(Long_I i) const
{ return (*this)[i]; }

inline void @VecT@::operator<<(@VecT@ &rhs)
{
    Base::operator<<(rhs);
}

//% end
typedef const @VecT@ & @VecT@_I;
typedef @VecT@ & @VecT@_O, & @VecT@_IO;
//%------------------------

class VecBool : public VbaseBool
{
public:
    typedef VbaseBool Base;
    using Base::ref; // bit reference

    VecBool() = default;
    explicit VecBool(Long_I N);
    VecBool(const VecBool &rhs); // copy constructor
    VecBool & operator=(const VecBool &rhs) = delete;
    ref operator()(Long_I i);
    Bool operator()(Long_I i) const;
    void operator<<(VecBool &rhs); // move data and rhs.resize(0)
};

inline VecBool::VecBool(Long_I N) : Base(N) {}

inline VecBool::VecBool(const VecBool &rhs) : Base(rhs)
{
#ifdef SLS_NO_CPY_CONSTRUCTOR
    SLS_ERR("copy constructor forbidden!");
#endif
}

inline VbaseBool::ref VecBool::operator()(Long_I i)
{ return m_v[i]; }

inline Bool VecBool::operator()(Long_I i) const
{ return m_v[i]; }

inline void VecBool::operator<<(VecBool &rhs)
{
    Base::operator<<(rhs);
}

typedef const VecBool & VecBool_I;
typedef VecBool & VecBool_O, & VecBool_IO;

} // namespace slisc
