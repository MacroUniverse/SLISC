#pragma once
#include "global.h"
// "_c" means lower level const

namespace slisc {
//% types = {
//%     'Char', true;
//%     'Char', false;
//%     'Int', true;
//%     'Int', false;
//%     'Llong', true;
//%     'Llong', false;
//%     'Long', true;
//%     'Long', false;
//%     'Float', true;
//%     'Float', false;
//%     'Doub', true;
//%     'Doub', false;
//%     'Ldoub', true;
//%     'Ldoub', false;
//%     'Fcomp', true;
//%     'Fcomp', false;
//%     'Comp', true;
//%     'Comp', false;
//%     'Lcomp', true;
//%     'Lcomp', false;
//% };
//%------------------------
//% [T, constness] = varargin{:};
//% Jcmat3T = ['Jcmat3' T];
//% Jcmat3T_c = [Jcmat3T '_c'];
//% if constness
//%     CT = ['const ' T];
//%     Class = Jcmat3T_c;
//% else
//%     CT = T;
//%     Class = Jcmat3T;
//% end
//% if is_Long(T) && constness
#ifdef SLS_USE_INT_AS_LONG
typedef Jcmat3Int_c Jcmat3Long_c;
#else
typedef Jcmat3Llong_c Jcmat3Long_c;
#endif
//% elseif is_Long(T) && ~constness
#ifdef SLS_USE_INT_AS_LONG
typedef Jcmat3Int Jcmat3Long;
#else
typedef Jcmat3Llong Jcmat3Long;
#endif
//% else
class @Class@
{
protected:
    @CT@ *m_p;
    Long m_N;
    Long m_N0, m_N1, m_N2;
    Long m_step1, m_step2, m_step3; // a(i,j) = m_p + m_step1*i + m_step2*j + m_step*k
public:
    @Class@();
    @Class@(@CT@ *p, Long_I N0, Long_I N1, Long_I N2, Long_I step1, Long_I step2, Long_I step3);
    void set(@CT@ *p, Long_I N0, Long_I N1, Long_I N2, Long_I step1, Long_I step2, Long_I step3);
    void set(const @Class@ &sli);
//% if ~constness
    operator @Jcmat3T_c@() const;
//% end
    @Class@ &operator=(const @Class@ &) = delete;
    @CT@ &operator[](Long_I i) const;
    @CT@ &operator()(Long_I i, Long_I j, Long_I k) const;
    Long n0() const;
    Long n1() const;
    Long n2() const;
    Long step1() const;
    Long step2() const;
    Long step3() const;
    Long size() const;

    @CT@ *p() const;
};

inline @Class@::@Class@() {}

inline @Class@::@Class@(@CT@ *p, Long_I N0, Long_I N1, Long_I N2, Long_I step1, Long_I step2, Long_I step3)
    : m_p(p), m_N0(N0), m_N1(N1), m_N2(N2), m_N(N0*N1*N2), m_step1(step1), m_step2(step2), m_step3(step3)
{}

inline void @Class@::set(@CT@ *p, Long_I N0, Long_I N1, Long_I N2, Long_I step1, Long_I step2, Long_I step3)
{
    m_p = p; m_N0 = N0; m_N1 = N1; m_N2 = N2;
    m_step1 = step1; m_step2 = step2; m_step3 = step3;
    m_N = N0 * N1 * N2;
}

inline void @Class@::set(const @Class@ &sli)
{
    m_p = sli.m_p; m_N = sli.m_N; m_N0 = sli.m_N0; m_N1 = sli.m_N1; m_N2 = sli.m_N2; m_step1 = sli.m_step1; m_step2 = sli.m_step2; m_step3 = sli.m_step3;
}

//% if ~constness
inline @Class@::operator @Jcmat3T_c@() const
{
    return *((@Jcmat3T_c@ *)this);
}
//% end

inline @CT@ &@Class@::operator[](Long_I i) const
{
#ifdef SLS_CHECK_BOUNDS
    if (i < 0 || i >= m_N)
        SLS_ERR("out of bound!");
#endif
    Long N1N2 = m_N0 * m_N1;
    Long i2 = i % N1N2;
    return operator()(i2 % m_N0, i2 / m_N0, i / N1N2);
}

inline @CT@ &@Class@::operator()(Long_I i, Long_I j, Long_I k) const
{
#ifdef SLS_CHECK_BOUNDS
    if (i < 0 || i >= m_N0 || j < 0 || j >= m_N1 || k < 0 || k > m_N2)
        SLS_ERR("Matrix subscript out of bounds");
#endif
    return m_p[m_step1 * i + m_step2 * j + m_step3 * k];
}

inline Long @Class@::n0() const
{
    return m_N0;
}

inline Long @Class@::n1() const
{
    return m_N1;
}

inline Long @Class@::n2() const
{
    return m_N2;
}

inline Long @Class@::step1() const
{
    return m_step1;
}

inline Long @Class@::step2() const
{
    return m_step2;
}

inline Long @Class@::step3() const
{
    return m_step3;
}

inline Long @Class@::size() const
{
    return m_N;
}

inline @CT@ *@Class@::p() const
{
    return m_p;
}
//% end

//% if constness
typedef const @Class@ &@Jcmat3T@_I;
//% else
typedef const @Class@ &@Jcmat3T@_O, &@Jcmat3T@_IO;
//% end
//%------------------------
} // namespace slisc
