// element-wise +, -, *, /
#pragma once
#include "scalar_arith.h"
#include "compare.h"

namespace slisc {

//% tem('add_eq_vs', {
//% 'Int' 'Int'; 'Llong' 'Llong';
//% 'Doub' 'Doub'; 'Comp', 'Doub';
//% 'Comp' 'Comp'; 'Comp' 'Imag' });
//%-------------------
//% [T, Ts] = varargin{:};
//% if ~is_promo(T, Ts) || ~strcmp(rm_comp(T),rm_comp(Ts))
//%     error('illegal types');
//% end
inline void add_eq_vs(@T@ *v, @Ts@_I s, Long_I N)
{
	for (Long i = 0; i < N; ++i)
	    v[i] += s;
}

inline void add_eq_vs(@T@ *v, @Ts@_I s, Long_I N, Long step)
{
	for (Long i = 0; i < N*step; i += step)
	    v[i] += s;
}

inline void sub_eq_vs(@T@ *v, @Ts@_I s, Long_I N)
{
	for (Long i = 0; i < N; ++i)
	    v[i] -= s;
}

inline void sub_eq_vs(@T@ *v, @Ts@_I s, Long_I N, Long step)
{
	for (Long i = 0; i < N*step; i += step)
	    v[i] -= s;
}

inline void times_eq_vs(@T@ *v, @Ts@_I s, Long_I N)
{
	for (Long i = 0; i < N; ++i)
	    v[i] *= s;
}

inline void times_eq_vs(@T@ *v, @Ts@_I s, Long_I N, Long step)
{
	for (Long i = 0; i < N*step; i += step)
	    v[i] *= s;
}
//% if is_integral(T)
inline void div_eq_vs(@T@ *v, @Ts@_I s, Long_I N)
{
	for (Long i = 0; i < N; ++i)
	    v[i] /= s;
}

inline void div_eq_vs(@T@ *v, @Ts@_I s, Long_I N, Long_I step)
{
	for (Long i = 0; i < N*step; i += step)
	    v[i] /= s;
}
//% elseif is_fpt(Ts) || is_comp(Ts) || is_imag(Ts)
inline void div_eq_vs(@T@ *v, @Ts@_I s, Long_I N)
{ times_eq_vs(v, @num(1,rm_comp(Ts))@/s, N); }

inline void div_eq_vs(@T@ *v, @Ts@_I s, Long_I N, Long_I step)
{ times_eq_vs(v, @num(1,rm_comp(Ts))@/s, N, step); }
//% else
//%     disp(T); disp(Ts);
//%     error('not implemented (10)');
//% end
//%-------------------------

//% tem('v+=s', {
//%   'vecInt' 'Int';
//%   'vecLlong' 'Llong';
//%   'vecDoub' 'Doub';
//%   'vecComp' 'Doub';
//%   'vecComp' 'Comp';
//%   'VecInt' 'Int';
//%   'VecLlong' 'Llong';
//%   'VecDoub' 'Doub';
//%   'VecComp' 'Doub';
//%   'VecComp' 'Comp';
//%   'SvecInt' 'Int';
//%   'SvecLlong' 'Llong';
//%   'SvecDoub' 'Doub';
//%   'SvecComp' 'Doub';
//%   'SvecComp' 'Comp';
//%   'DvecComp' 'Doub';
//%   'CmatInt' 'Int';
//%   'CmatLlong' 'Llong';
//%   'CmatDoub' 'Doub';
//%   'CmatComp' 'Doub';
//%   'CmatComp' 'Comp';
//%   'DcmatDoub' 'Doub'
//%   'DcmatComp' 'Doub'
//%   'DcmatComp' 'Comp'
//%   'vvecInt' 'Int'
//%   'vvecLlong' 'Llong'
//%   'vvecDoub' 'Doub'
//% });
//%-------------------
//% [T, Ts] = varargin{:}; Tsv = val_t(T);
//% if ~is_promo(Tsv, Ts)
//%     error('illegal type!');
//% end
//% req('add_eq_vs', {Tsv,Ts});
//% if is_vvec(T) && is_scalar(Ts)
inline void operator+=(@T@_IO v, @Ts@_I s)
{ for (auto &e : v) e += s; }

inline void operator-=(@T@_IO v, @Ts@_I s)
{ for (auto &e : v) e -= s; }

inline void operator*=(@T@_IO v, @Ts@_I s)
{ for (auto &e : v) e *= s; }

inline void operator/=(@T@_IO v, @Ts@_I s)
{ for (auto &e : v) e /= s; }
//% elseif is_dense(T) && is_scalar(Ts)
inline void operator+=(@T@_IO v, @Ts@_I s)
{ add_eq_vs(&v[0], s, v.size()); }

inline void operator-=(@T@_IO v, @Ts@_I s)
{ sub_eq_vs(&v[0], s, v.size()); }

inline void operator*=(@T@_IO v, @Ts@_I s)
{ times_eq_vs(&v[0], s, v.size()); }

inline void operator/=(@T@_IO v, @Ts@_I s)
{ div_eq_vs(&v[0], s, v.size()); }
//% elseif is_Dvec(T) && is_scalar(Ts)
inline void operator+=(@T@_IO v, @Ts@_I s)
{ add_eq_vs(v.p(), s, v.size(), v.step()); }

inline void operator-=(@T@_IO v, @Ts@_I s)
{ sub_eq_vs(v.p(), s, v.size(), v.step()); }

inline void operator*=(@T@_IO v, @Ts@_I s)
{ times_eq_vs(v.p(), s, v.size(), v.step()); }

inline void operator/=(@T@_IO v, @Ts@_I s)
{ div_eq_vs(v.p(), s, v.size(), v.step()); }
//% elseif is_Dcmat(T) && is_scalar(Ts)
inline void operator+=(@T@_IO v, @Ts@_I s)
{
	for (Long j = 0; j < v.n1(); ++j)
	    add_eq_vs(&v(0,j), s, v.n0());
}

inline void operator-=(@T@_IO v, @Ts@_I s)
{
	for (Long j = 0; j < v.n1(); ++j)
	    sub_eq_vs(&v(0,j), s, v.n0());
}

inline void operator*=(@T@_IO v, @Ts@_I s)
{
	for (Long j = 0; j < v.n1(); ++j)
	    times_eq_vs(&v(0,j), s, v.n0());
}

inline void operator/=(@T@_IO v, @Ts@_I s)
{
	for (Long j = 0; j < v.n1(); ++j)
	    div_eq_vs(&v(0,j), s, v.n0());
}
//% else
//%     disp(T); disp(Ts);
//%     error('not implemented (11)');
//% end
//%-------------------------

//% tem('add_eq_vv', {
//% 'Int' 'Int'; 'Llong' 'Llong';
//% 'Doub' 'Doub'; 'Comp' 'Doub';
//% 'Comp' 'Comp'; 'Comp' 'Imag' });
//%-------------------
//% [T, T1] = varargin{:};
//% if ~is_promo(T, T1)
//%     error('illegal types');
//% end
inline void add_eq_vv(@T@ *v, const @T1@ *v1, Long_I N)
{
	for (Long i = 0; i < N; ++i)
	    v[i] += v1[i];
}

inline void sub_eq_vv(@T@ *v, const @T1@ *v1, Long_I N)
{
	for (Long i = 0; i < N; ++i)
	    v[i] -= v1[i];
}

inline void times_eq_vv(@T@ *v, const @T1@ *v1, Long_I N)
{
	for (Long i = 0; i < N; ++i)
	    v[i] *= v1[i];
}

inline void div_eq_vv(@T@ *v, const @T1@ *v1, Long_I N)
{
	for (Long i = 0; i < N; ++i)
	    v[i] /= v1[i];
}
//%-------------------------

//% tem('v+=v', {
//% 'vecInt' 'vecInt';
//% 'vecLlong' 'vecLlong';
//% 'vecDoub' 'vecDoub';
//% 'VecInt' 'VecInt';
//% 'VecLlong' 'VecLlong';
//% 'VecDoub' 'VecDoub';
//% 'VecDoub' 'SvecDoub';
//% 'VecComp' 'VecDoub';
//% 'VecComp' 'VecComp';
//% 'VecComp' 'SvecComp';
//% 'VecComp' 'VecDoub';
//% 'VecQdoub' 'VecQdoub'
//% 'SvecDoub' 'VecDoub'
//% 'SvecDoub' 'SvecDoub'
//% 'SvecComp' 'VecDoub'
//% 'SvecComp' 'SvecComp'
//% 'DvecDoub' 'SvecDoub'
//% 'DvecComp' 'VecComp'
//% 'DvecComp' 'SvecComp'
//% 'DvecComp', 'SvecDoub'
//% 'CmatInt' 'CmatInt'
//% 'CmatLlong' 'CmatLlong'
//% 'CmatDoub' 'CmatDoub'
//% 'CmatComp' 'CmatDoub'
//% 'CmatComp' 'CmatComp'
//% 'MatDoub' 'MatDoub'
//% 'MatComp' 'MatComp'
//% 'ScmatComp' 'ScmatDoub'
//% 'ScmatComp' 'ScmatComp'
//% 'DcmatComp' 'DcmatDoub'
//% 'Cmat3Comp' 'Cmat3Comp'
//% 'Mat3Doub' 'Mat3Doub'
//% 'Mat3Comp' 'Mat3Comp'
//% });
//%-------------------
//% [T, T1] = varargin{:};
//% Ts = val_t(T); Ts1 = val_t(T1);
//% if is_dense(T) && is_dense(T1) && is_same_major(T, T1)
//%     req('assert_same_shape', {T, T1});
//%     req('add_eq_vv', {Ts, Ts1});
inline void operator+=(@T@_O &v, @T1@_I v1)
{
	assert_same_shape(v, v1);
	add_eq_vv(&v[0], &v1[0], v1.size());
}

inline void operator-=(@T@_O &v, @T1@_I v1)
{
	assert_same_shape(v, v1);
	sub_eq_vv(&v[0], &v1[0], v1.size());
}

inline void operator*=(@T@_O &v, @T1@_I v1)
{
	assert_same_shape(v, v1);
	times_eq_vv(&v[0], &v1[0], v1.size());
}

inline void operator/=(@T@_O &v, @T1@_I v1)
{
	assert_same_shape(v, v1);
	div_eq_vv(&v[0], &v1[0], v1.size());
}
//% elseif ndim(T) == 1 && ndim(T1) == 1
inline void operator+=(@T@_O &v, @T1@_I v1)
{
//% req('assert_same_shape', {T, T1});
	assert_same_shape(v, v1);
	for (Long i = 0; i < v.size(); ++i)
	    v[i] += v1[i];
}

inline void operator-=(@T@_O &v, @T1@_I v1)
{
	assert_same_shape(v, v1);
	for (Long i = 0; i < v.size(); ++i)
	    v[i] -= v1[i];
}

inline void operator*=(@T@_O &v, @T1@_I v1)
{
	assert_same_shape(v, v1);
	for (Long i = 0; i < v.size(); ++i)
	    v[i] *= v1[i];
}

inline void operator/=(@T@_O &v, @T1@_I v1)
{
	assert_same_shape(v, v1);
	for (Long i = 0; i < v.size(); ++i)
	    v[i] /= v1[i];
}
//% elseif ndim(T) == 2 && ndim(T1) == 2
inline void operator+=(@T@_O &v, @T1@_I v1) // slow!
{
//% req('assert_same_shape', {T, T1});
	assert_same_shape(v, v1);
	for (Long j = 0; j < v.n1(); ++j)
	    for (Long i = 0; i < v.n0(); ++i)
	        v(i, j) += v1(i, j);
}

inline void operator-=(@T@_O &v, @T1@_I v1) // slow!
{
	assert_same_shape(v, v1);
	for (Long j = 0; j < v.n1(); ++j)
	    for (Long i = 0; i < v.n0(); ++i)
	        v(i, j) -= v1(i, j);
}

inline void operator*=(@T@_O &v, @T1@_I v1) // slow!
{
	assert_same_shape(v, v1);
	for (Long j = 0; j < v.n1(); ++j)
	    for (Long i = 0; i < v.n0(); ++i)
	        v(i, j) *= v1(i, j);
}

inline void operator/=(@T@_O &v, @T1@_I v1) // slow!
{
	assert_same_shape(v, v1);
	for (Long j = 0; j < v.n1(); ++j)
	    for (Long i = 0; i < v.n0(); ++i)
	        v(i, j) /= v1(i, j);
}
//% else
//%     error('not implemented (12)!');
//% end
//%-------------------------

//% tem('add_vvs', {
//%  'Int' 'Int' 'Int'
//%  'Llong' 'Llong' 'Llong'
//%  'Doub' 'Doub' 'Doub'
//%  'Comp' 'Doub' 'Comp'
//%  'Comp' 'Comp' 'Doub'
//%  'Comp' 'Comp' 'Comp'
//%  'Comp' 'Doub' 'Imag'
//%  'Qdoub' 'Qdoub' 'Qdoub'
//% });
//%------------------------------
//% [T, T1, T2] = varargin{:};
//% if ~is_promo(T, T1) || ~is_promo(T, T2)
//%     error('illegal types');
//% end
inline void add_vvs(@T@ *v, const @T1@ *v1, @T2@_I s, Long_I N)
{
	for (Long i = 0; i < N; ++i)
	    v[i] = v1[i] + s;
}

inline void add_vvs(@T@ *v, const @T1@ *v1, @T2@_I s, Long_I N, Long_I step1, Long_I step2)
{
	for (Long i = 0; i < N; ++i) {
	    *v = *v1 + s;
	    v += step1; v1 += step2;
	}
}

inline void sub_vvs(@T@ *v, const @T1@ *v1, @T2@_I s, Long_I N)
{
	for (Long i = 0; i < N; ++i)
	    v[i] = v1[i] - s;
}

inline void sub_vvs(@T@ *v, const @T1@ *v1, @T2@_I s, Long_I N, Long_I step1, Long_I step2)
{
	for (Long i = 0; i < N; ++i) {
	    *v = *v1 - s;
	    v += step1; v1 += step2;
	}
}

inline void times_vvs(@T@ *v, const @T1@ *v1, @T2@_I s, Long_I N)
{
	for (Long i = 0; i < N; ++i)
	    v[i] = v1[i] * s;
}

inline void times_vvs(@T@ *v, const @T1@ *v1, @T2@_I s, Long_I N, Long_I step1, Long_I step2)
{
	for (Long i = 0; i < N; ++i) {
	    *v = *v1 * s;
	    v += step1; v1 += step2;
	}
}

//% if is_integral(T1) && is_integral(T2)
inline void div_vvs(@T@ *v, const @T1@ *v1, @T2@_I s, Long_I N)
{
	for (Long i = 0; i < N; ++i)
	    v[i] = v1[i] / s;
}

inline void div_vvs(@T@ *v, const @T1@ *v1, @T2@_I s, Long_I N, Long_I step1, Long_I step2)
{
	for (Long i = 0; i < N; ++i) {
	    *v = *v1 / s;
	    v += step1; v1 += step2;
	}
}
//% elseif is_fpt(T2) || is_comp(T2) || is_imag(T2)
inline void div_vvs(@T@ *v, const @T1@ *v1, @T2@_I s, Long_I N)
{
	@T2@ inv_s = 1./s;
	times_vvs(v, v1, inv_s, N);
}

inline void div_vvs(@T@ *v, const @T1@ *v1, @T2@_I s, Long_I N, Long_I step, Long_I step1)
{
	@T2@ inv_s = 1./s;
	times_vvs(v, v1, inv_s, N, step, step1);
}
//% else
//%     error(['div_vvs: not implemented (13): ' T ' ' T1 ' ' T2]);
//% end
//%-------------------------

//% tem('sub_vsv', {
//%  'Int' 'Int' 'Int'
//%  'Llong' 'Llong' 'Llong'
//%  'Doub' 'Doub' 'Doub'
//%  'Comp' 'Doub' 'Comp'
//%  'Comp' 'Comp' 'Doub'
//%  'Comp' 'Comp' 'Comp'
//%  'Comp' 'Doub' 'Imag'
//%  'Qdoub' 'Qdoub' 'Qdoub' });
//%------------------------------
//% [T, T1, T2] = varargin{:};
//% if ~is_promo(T, T1) || ~is_promo(T, T2)
//%     error('illegal types');
//% end
inline void sub_vsv(@T@ *v, const @T1@ &s, const @T2@ *v1, Long_I N)
{
	for (Long i = 0; i < N; ++i)
	    v[i] = s - v1[i];
}

inline void sub_vsv(@T@ *v, const @T1@ &s, const @T2@ *v1, Long_I N, Long_I step, Long_I step1)
{
	for (Long i = 0; i < N; ++i) {
	    *v = s - *v1;
	    v += step; v1 += step1;
	}
}

inline void div_vsv(@T@ *v, const @T1@ &s, const @T2@ *v1, Long_I N)
{
	for (Long i = 0; i < N; ++i)
	    v[i] = s / v1[i];
}

inline void div_vsv(@T@ *v, const @T1@ &s, const @T2@ *v1, Long_I N, Long_I step, Long_I step1)
{
	for (Long i = 0; i < N; ++i) {
	    *v = s / *v1;
	    v += step; v1 += step1;
	}
}
//%-------------------------

//% tem('add_vvv', {
//%  'Int' 'Int' 'Int'
//%  'Llong' 'Llong' 'Llong'
//%  'Doub' 'Doub' 'Doub'
//%  'Comp' 'Doub' 'Comp'
//%  'Comp' 'Comp' 'Doub'
//%  'Comp' 'Comp' 'Comp'
//%  'Comp' 'Doub' 'Imag'
//%  'Qdoub' 'Qdoub' 'Qdoub' });
//%------------------------------
//% [T, T1, T2] = varargin{:};
//% if ~is_promo(T, T1) || ~is_promo(T, T2)
//%     error('illegal type!');
//% end
inline void add_vvv(@T@ *v, const @T1@ *v1, const @T2@ *v2, Long_I N)
{
	for (Long i = 0; i < N; ++i)
	    v[i] = v1[i] + v2[i];
}

inline void add_vvv(@T@ *v, const @T1@ *v1, const @T2@ *v2, Long_I N, Long_I step, Long_I step1, Long_I step2)
{
	for (Long i = 0; i < N; ++i) {
	    *v = *v1 + *v2;
	    v += step; v1 += step1; v2 += step2;
	}
}

inline void sub_vvv(@T@ *v, const @T1@ *v1, const @T2@ *v2, Long_I N)
{
	for (Long i = 0; i < N; ++i)
	    v[i] = v1[i] - v2[i];
}

inline void sub_vvv(@T@ *v, const @T1@ *v1, const @T2@ *v2, Long_I N, Long_I step, Long_I step1, Long_I step2)
{
	for (Long i = 0; i < N; ++i) {
	    *v = *v1 - *v2;
	    v += step; v1 += step1; v2 += step2;
	}
}

inline void times_vvv(@T@ *v, const @T1@ *v1, const @T2@ *v2, Long_I N)
{
	for (Long i = 0; i < N; ++i)
	    v[i] = v1[i] * v2[i];
}

inline void times_vvv(@T@ *v, const @T1@ *v1, const @T2@ *v2, Long_I N, Long_I step, Long_I step1, Long_I step2)
{
	for (Long i = 0; i < N; ++i) {
	    *v = *v1 * *v2;
	    v += step; v1 += step1; v2 += step2;
	}
}

inline void div_vvv(@T@ *v, const @T1@ *v1, const @T2@ *v2, Long_I N)
{
	for (Long i = 0; i < N; ++i)
	    v[i] = v1[i] / v2[i];
}

inline void div_vvv(@T@ *v, const @T1@ *v1, const @T2@ *v2, Long_I N, Long_I step, Long_I step1, Long_I step2)
{
	for (Long i = 0; i < N; ++i) {
	    *v = *v1 / *v2;
	    v += step; v1 += step1; v2 += step2;
	}
}
//%-------------------------

//% tem('add(v,v,s)', {
//%   'vecInt' 'vecInt' 'Int'
//%   'vecLlong' 'vecLlong' 'Llong'
//%   'VecInt' 'VecInt' 'Int'
//%   'VecLlong' 'VecLlong' 'Llong'
//%   'VecDoub' 'VecDoub' 'Doub'
//%   'VecComp' 'SvecDoub' 'Doub'
//%   'VecComp' 'SvecDoub' 'Imag'
//%   'VecComp' 'VecComp' 'Doub'
//%   'VecComp' 'VecComp' 'Comp'
//%   'SvecDoub' 'SvecDoub' 'Doub'
//%   'SvecComp' 'SvecComp' 'Doub'
//%   'SvecComp' 'SvecComp' 'Comp'
//%   'DcmatComp' 'DcmatComp' 'Doub'
//% });
//%------------------------------
//% [T, T1, Ts2] = varargin{:};
//% [Ts,Ts1] = val_t(T, T1);
//% if ~is_promo(Ts, Ts1) || ~is_promo(Ts, Ts2)
//%     error('illegal types');
//% end
//% if is_dense(T) && is_dense(T1) && is_same_major(T, T1)
inline void add(@T@_O v, @T1@_I v1, @Ts2@_I s)
{
//% req('assert_same_shape', {T, T1});
//% req('add_vvs', {Ts, Ts1, Ts2});
	assert_same_shape(v, v1);
	add_vvs(&v[0], &v1[0], s, v1.size());
}

inline void add(@T@_O v, @Ts2@_I s, @T1@_I v1)
{ add(v, v1, s); }

inline void sub(@T@_O v, @T1@_I v1, @Ts2@_I s)
{
	assert_same_shape(v, v1);
	sub_vvs(&v[0], &v1[0], s, v1.size());
}

inline void sub(@T@_O v, @Ts2@_I s, @T1@_I v1)
{
	assert_same_shape(v, v1);
//% req('sub_vsv', {Ts, Ts1, Ts2});
	sub_vsv(&v[0], s, &v1[0], v1.size());
}

inline void times(@T@_O v, @T1@_I v1, @Ts2@_I s)
{
	assert_same_shape(v, v1);
	times_vvs(&v[0], &v1[0], s, v1.size());
}

inline void times(@T@_O v, @Ts2@_I s, @T1@_I v1)
{ times(v, v1, s); }

inline void div(@T@_O v, @T1@_I v1, @Ts2@_I s)
{
	assert_same_shape(v, v1);
	div_vvs(&v[0], &v1[0], s, v1.size());
}

inline void div(@T@_O v, @Ts2@_I s, @T1@_I v1)
{
	assert_same_shape(v, v1);
	div_vsv(&v[0], s, &v1[0], v1.size());
}
//% elseif ndim(T) == 1 && ndim(T1) == 1
//%     if is_Dvec(T)
//%         step = 'v.step()';
//%     else
//%         step = '1';
//%     end
//%     if is_Dvec(T1)
//%         step1 = 'v1.step()';
//%     else
//%         step1 = '1';
//%     end
inline void add(@T@_O v, @T1@_I v1, @Ts2@_I s)
{
//% req('assert_same_shape', {T, T1});
	assert_same_shape(v, v1);
	add_vvs(&v[0], &v1[0], s, v1.size(), @step@, @step1@);
}

inline void add(@T@_O v, @Ts2@_I s, @T1@_I v1)
{ add(v, v1, s); }

inline void sub(@T@_O v, @T1@_I v1, @Ts2@_I s)
{
	assert_same_shape(v, v1);
	sub_vvs(&v[0], &v1[0], s, v1.size(), @step@, @step1@);
}

inline void sub(@T@_O v, @Ts2@_I s, @T1@_I v1)
{
	assert_same_shape(v, v1);
	sub_vsv(&v[0], s, &v1[0], v1.size(), @step@, @step1@);
}

inline void times(@T@_O v, @T1@_I v1, @Ts2@_I s)
{
	assert_same_shape(v, v1);
	times_vvs(&v[0], &v1[0], s, v1.size(), @step@, @step1@);
}

inline void times(@T@_O v, @Ts2@_I s, @T1@_I v1)
{ times(v, v1, s); }

inline void div(@T@_O v, @T1@_I v1, @Ts2@_I s)
{
	assert_same_shape(v, v1);
	div_vvs(&v[0], &v1[0], s, v1.size(), @step@, @step1@);
}

inline void div(@T@_O v, @Ts2@_I s, @T1@_I v1)
{
	assert_same_shape(v, v1);
	div_vsv(&v[0], s, &v1[0], v1.size(), @step@, @step1@);
}
//% elseif is_Dcmat(T) && is_Dcmat(T1)
inline void add(@T@_O v, @T1@_I v1, @Ts2@_I s)
{
//% req('assert_same_shape', {T, T1});
	assert_same_shape(v, v1);
	@Ts@ *p = v.p(); const @Ts1@ *p1 = v1.p();
	for (Long j = 0; j < v.n1(); ++j) {
	    add_vvs(p, p1, s, v.n0());
	    p += v.lda(); p1 += v1.lda();
	}
}

inline void add(@T@_O v, @Ts2@_I s, @T1@_I v1)
{ add(v, v1, s); }

inline void sub(@T@_O v, @T1@_I v1, @Ts2@_I s)
{
	assert_same_shape(v, v1);
	@Ts@ *p = v.p(); const @Ts1@ *p1 = v1.p();
	for (Long j = 0; j < v.n1(); ++j) {
	    sub_vvs(p, p1, s, v.n0());
	    p += v.lda(); p1 += v1.lda();
	}
}

inline void sub(@T@_O v, @Ts2@_I s, @T1@_I v1)
{
	assert_same_shape(v, v1);
	@Ts@ *p = v.p(); const @Ts1@ *p1 = v1.p();
	for (Long j = 0; j < v.n1(); ++j) {
	    sub_vsv(p, s, p1, v.n0());
	    p += v.lda(); p1 += v1.lda();
	}
}

inline void times(@T@_O v, @T1@_I v1, @Ts2@_I s)
{
	assert_same_shape(v, v1);
	@Ts@ *p = v.p(); const @Ts1@ *p1 = v1.p();
	for (Long j = 0; j < v.n1(); ++j) {
	    times_vvs(p, p1, s, v.n0());
	    p += v.lda(); p1 += v1.lda();
	}
}

inline void times(@T@_O v, @Ts2@_I s, @T1@_I v1)
{ times(v, v1, s); }

inline void div(@T@_O v, @T1@_I v1, @Ts2@_I s)
{
	assert_same_shape(v, v1);
	@Ts@ *p = v.p(); const @Ts1@ *p1 = v1.p();
	for (Long j = 0; j < v.n1(); ++j) {
	    div_vvs(p, p1, s, v.n0());
	    p += v.lda(); p1 += v1.lda();
	}
}

inline void div(@T@_O v, const @Ts2@_I s, @T1@_I v1)
{
	assert_same_shape(v, v1);
	@Ts@ *p = v.p(); const @Ts1@ *p1 = v1.p();
	for (Long j = 0; j < v.n1(); ++j) {
	    div_vsv(p, s, p1, v.n0());
	    p += v.lda(); p1 += v1.lda();
	}
}
//% end
//%-------------------------

//% tem('add(v,v,v)', {
//%   'vecInt' 'vecInt' 'vecInt'
//%   'vecLlong' 'vecLlong' 'vecLlong'
//%   'VecInt' 'VecInt' 'VecInt'
//%   'VecLlong' 'VecLlong' 'VecLlong'
//%   'VecDoub' 'VecDoub' 'VecDoub'
//%   'VecComp' 'VecComp' 'VecComp'
//%   'SvecDoub' 'SvecDoub' 'SvecDoub'
//%   'SvecComp' 'SvecComp' 'SvecComp'
//%   'SvecComp' 'VecComp' 'SvecComp'
//%   'DvecComp', 'SvecComp', 'DvecComp'
//%   'CmatInt' 'CmatInt' 'CmatInt'
//%   'CmatLlong' 'CmatLlong' 'CmatLlong'
//%   'CmatDoub' 'CmatDoub' 'CmatDoub'
//%   'CmatComp' 'CmatComp' 'CmatComp'
//% });
//%------------------------------
//% [T, T1, T2] = varargin{:};
//% Ts = val_t(T); Ts1 = val_t(T1); Ts2 = val_t(T2);
//% if ~is_promo(Ts, Ts1) || ~is_promo(Ts, Ts2)
//%     error('illegal types');
//% end
//% req('assert_same_shape3', {T, T1, T2});
//% req('add_vvv', {Ts, Ts1, Ts2});
//% if is_dense(T) && is_dense(T1)
inline void add(@T@_O v, @T1@_I v1, @T2@_I v2)
{
	assert_same_shape(v, v1, v2);
	add_vvv(&v[0], &v1[0], &v2[0], v.size());
}

inline void sub(@T@_O v, @T1@_I v1, @T2@_I v2)
{
	assert_same_shape(v, v1, v2);
	sub_vvv(&v[0], &v1[0], &v2[0], v.size());
}

inline void times(@T@_O v, @T1@_I v1, @T2@_I v2)
{
	assert_same_shape(v, v1, v2);
	times_vvv(&v[0], &v1[0], &v2[0], v.size());
}

inline void div(@T@_O v, @T1@_I v1, @T2@_I v2)
{
	assert_same_shape(v, v1, v2);
	div_vvv(&v[0], &v1[0], &v2[0], v.size());
}
//% elseif ndim(T) == 1 && ndim(T1) == 1
//%     if is_Dvec(T)
//%         step = 'v.step()';
//%     else
//%         step = '1';
//%     end
//%     if is_Dvec(T1)
//%         step1 = 'v1.step()';
//%     else
//%         step1 = '1';
//%     end
//%     if is_Dvec(T2)
//%         step2 = 'v2.step()';
//%     else
//%         step2 = '1';
//%     end
inline void add(@T@_O v, @T1@_I v1, @T2@_I v2)
{
	assert_same_shape(v, v1, v2);
	add_vvv(v.p(), v1.p(), v2.p(), v.size(), @step@, @step1@, @step2@);
}

inline void sub(@T@_O v, @T1@_I v1, @T2@_I v2)
{
	assert_same_shape(v, v1, v2);
	sub_vvv(v.p(), v1.p(), v2.p(), v.size(), @step@, @step1@, @step2@);
}

inline void times(@T@_O v, @T1@_I v1, @T2@_I v2)
{
	assert_same_shape(v, v1, v2);
	sub_vvv(v.p(), v1.p(), v2.p(), v.size(), @step@, @step1@, @step2@);
}

inline void div(@T@_O v, @T1@_I v1, @T2@_I v2)
{
	assert_same_shape(v, v1, v2);
	div_vvv(v.p(), v1.p(), v2.p(), v.size(), @step@, @step1@, @step2@);
}
//% else
//%     error('not implemented!');
//% end
//%--------------------------

//% tem('neg_vv', { 'Comp' 'Doub' });
//%----------------------------------------------------------
//% [T, T1] = varargin{:};
inline void neg_vv(@T@ *v, const @T1@ *v1, Long_I N)
{
	for (Long i = 0; i < N; ++i)
	    v[i] = -v1[i];
}
//%--------------------------

//% tem('neg(v,v)', {
//%     'VecLlong', 'VecLlong';
//%     'VecDoub', 'VecDoub';
//%     'VecComp', 'VecDoub';
//%     'VecComp', 'VecComp';
//%     'ScmatDoub', 'CmatDoub';
//% });
//%----------------------------------------------------------
//% [T, T1] = varargin{:}; [Ts,Ts1] = val_t(T,T1);
//% if is_dense(T) && is_dense(T1) && is_same_major(T, T1)
inline void neg(@T@_O v, @T1@_I v1)
{
//% req('assert_same_shape', {T, T1});
	assert_same_shape(v, v1);
//% req('neg_vv', {Ts,Ts1});
	neg_vv(v.p(), v1.p(), v1.size());
}
//% else
//%     error('not implemented (14)!');
//% end
//%--------------------------

} // namespace slisc
